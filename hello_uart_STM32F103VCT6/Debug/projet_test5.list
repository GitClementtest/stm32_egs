
projet_test5.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001590  080001e4  080001e4  000101e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000034  08001774  08001774  00011774  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080017a8  080017a8  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  080017a8  080017a8  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080017a8  080017a8  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080017a8  080017a8  000117a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080017ac  080017ac  000117ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080017b0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000060  2000000c  080017bc  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000006c  080017bc  0002006c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000049cf  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001046  00000000  00000000  00024a04  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000005b8  00000000  00000000  00025a50  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000520  00000000  00000000  00026008  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000147b4  00000000  00000000  00026528  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00004896  00000000  00000000  0003acdc  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00074354  00000000  00000000  0003f572  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000b38c6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000015dc  00000000  00000000  000b3944  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	; (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	2000000c 	.word	0x2000000c
 8000200:	00000000 	.word	0x00000000
 8000204:	0800175c 	.word	0x0800175c

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	; (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	; (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	; (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	20000010 	.word	0x20000010
 8000220:	0800175c 	.word	0x0800175c

08000224 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000224:	b580      	push	{r7, lr}
 8000226:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000228:	4b08      	ldr	r3, [pc, #32]	; (800024c <HAL_Init+0x28>)
 800022a:	681b      	ldr	r3, [r3, #0]
 800022c:	4a07      	ldr	r2, [pc, #28]	; (800024c <HAL_Init+0x28>)
 800022e:	f043 0310 	orr.w	r3, r3, #16
 8000232:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000234:	2003      	movs	r0, #3
 8000236:	f000 f907 	bl	8000448 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800023a:	2000      	movs	r0, #0
 800023c:	f000 f808 	bl	8000250 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000240:	f001 f95e 	bl	8001500 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000244:	2300      	movs	r3, #0
}
 8000246:	4618      	mov	r0, r3
 8000248:	bd80      	pop	{r7, pc}
 800024a:	bf00      	nop
 800024c:	40022000 	.word	0x40022000

08000250 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000250:	b580      	push	{r7, lr}
 8000252:	b082      	sub	sp, #8
 8000254:	af00      	add	r7, sp, #0
 8000256:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000258:	4b12      	ldr	r3, [pc, #72]	; (80002a4 <HAL_InitTick+0x54>)
 800025a:	681a      	ldr	r2, [r3, #0]
 800025c:	4b12      	ldr	r3, [pc, #72]	; (80002a8 <HAL_InitTick+0x58>)
 800025e:	781b      	ldrb	r3, [r3, #0]
 8000260:	4619      	mov	r1, r3
 8000262:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000266:	fbb3 f3f1 	udiv	r3, r3, r1
 800026a:	fbb2 f3f3 	udiv	r3, r2, r3
 800026e:	4618      	mov	r0, r3
 8000270:	f000 f911 	bl	8000496 <HAL_SYSTICK_Config>
 8000274:	4603      	mov	r3, r0
 8000276:	2b00      	cmp	r3, #0
 8000278:	d001      	beq.n	800027e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800027a:	2301      	movs	r3, #1
 800027c:	e00e      	b.n	800029c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800027e:	687b      	ldr	r3, [r7, #4]
 8000280:	2b0f      	cmp	r3, #15
 8000282:	d80a      	bhi.n	800029a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000284:	2200      	movs	r2, #0
 8000286:	6879      	ldr	r1, [r7, #4]
 8000288:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800028c:	f000 f8e7 	bl	800045e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000290:	4a06      	ldr	r2, [pc, #24]	; (80002ac <HAL_InitTick+0x5c>)
 8000292:	687b      	ldr	r3, [r7, #4]
 8000294:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000296:	2300      	movs	r3, #0
 8000298:	e000      	b.n	800029c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800029a:	2301      	movs	r3, #1
}
 800029c:	4618      	mov	r0, r3
 800029e:	3708      	adds	r7, #8
 80002a0:	46bd      	mov	sp, r7
 80002a2:	bd80      	pop	{r7, pc}
 80002a4:	20000008 	.word	0x20000008
 80002a8:	20000004 	.word	0x20000004
 80002ac:	20000000 	.word	0x20000000

080002b0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80002b0:	b480      	push	{r7}
 80002b2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80002b4:	4b05      	ldr	r3, [pc, #20]	; (80002cc <HAL_IncTick+0x1c>)
 80002b6:	781b      	ldrb	r3, [r3, #0]
 80002b8:	461a      	mov	r2, r3
 80002ba:	4b05      	ldr	r3, [pc, #20]	; (80002d0 <HAL_IncTick+0x20>)
 80002bc:	681b      	ldr	r3, [r3, #0]
 80002be:	4413      	add	r3, r2
 80002c0:	4a03      	ldr	r2, [pc, #12]	; (80002d0 <HAL_IncTick+0x20>)
 80002c2:	6013      	str	r3, [r2, #0]
}
 80002c4:	bf00      	nop
 80002c6:	46bd      	mov	sp, r7
 80002c8:	bc80      	pop	{r7}
 80002ca:	4770      	bx	lr
 80002cc:	20000004 	.word	0x20000004
 80002d0:	20000028 	.word	0x20000028

080002d4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80002d4:	b480      	push	{r7}
 80002d6:	af00      	add	r7, sp, #0
  return uwTick;
 80002d8:	4b02      	ldr	r3, [pc, #8]	; (80002e4 <HAL_GetTick+0x10>)
 80002da:	681b      	ldr	r3, [r3, #0]
}
 80002dc:	4618      	mov	r0, r3
 80002de:	46bd      	mov	sp, r7
 80002e0:	bc80      	pop	{r7}
 80002e2:	4770      	bx	lr
 80002e4:	20000028 	.word	0x20000028

080002e8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80002e8:	b480      	push	{r7}
 80002ea:	b085      	sub	sp, #20
 80002ec:	af00      	add	r7, sp, #0
 80002ee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80002f0:	687b      	ldr	r3, [r7, #4]
 80002f2:	f003 0307 	and.w	r3, r3, #7
 80002f6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80002f8:	4b0c      	ldr	r3, [pc, #48]	; (800032c <__NVIC_SetPriorityGrouping+0x44>)
 80002fa:	68db      	ldr	r3, [r3, #12]
 80002fc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80002fe:	68ba      	ldr	r2, [r7, #8]
 8000300:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000304:	4013      	ands	r3, r2
 8000306:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000308:	68fb      	ldr	r3, [r7, #12]
 800030a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800030c:	68bb      	ldr	r3, [r7, #8]
 800030e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000310:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000314:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000318:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800031a:	4a04      	ldr	r2, [pc, #16]	; (800032c <__NVIC_SetPriorityGrouping+0x44>)
 800031c:	68bb      	ldr	r3, [r7, #8]
 800031e:	60d3      	str	r3, [r2, #12]
}
 8000320:	bf00      	nop
 8000322:	3714      	adds	r7, #20
 8000324:	46bd      	mov	sp, r7
 8000326:	bc80      	pop	{r7}
 8000328:	4770      	bx	lr
 800032a:	bf00      	nop
 800032c:	e000ed00 	.word	0xe000ed00

08000330 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000330:	b480      	push	{r7}
 8000332:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000334:	4b04      	ldr	r3, [pc, #16]	; (8000348 <__NVIC_GetPriorityGrouping+0x18>)
 8000336:	68db      	ldr	r3, [r3, #12]
 8000338:	0a1b      	lsrs	r3, r3, #8
 800033a:	f003 0307 	and.w	r3, r3, #7
}
 800033e:	4618      	mov	r0, r3
 8000340:	46bd      	mov	sp, r7
 8000342:	bc80      	pop	{r7}
 8000344:	4770      	bx	lr
 8000346:	bf00      	nop
 8000348:	e000ed00 	.word	0xe000ed00

0800034c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800034c:	b480      	push	{r7}
 800034e:	b083      	sub	sp, #12
 8000350:	af00      	add	r7, sp, #0
 8000352:	4603      	mov	r3, r0
 8000354:	6039      	str	r1, [r7, #0]
 8000356:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000358:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800035c:	2b00      	cmp	r3, #0
 800035e:	db0a      	blt.n	8000376 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000360:	683b      	ldr	r3, [r7, #0]
 8000362:	b2da      	uxtb	r2, r3
 8000364:	490c      	ldr	r1, [pc, #48]	; (8000398 <__NVIC_SetPriority+0x4c>)
 8000366:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800036a:	0112      	lsls	r2, r2, #4
 800036c:	b2d2      	uxtb	r2, r2
 800036e:	440b      	add	r3, r1
 8000370:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000374:	e00a      	b.n	800038c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000376:	683b      	ldr	r3, [r7, #0]
 8000378:	b2da      	uxtb	r2, r3
 800037a:	4908      	ldr	r1, [pc, #32]	; (800039c <__NVIC_SetPriority+0x50>)
 800037c:	79fb      	ldrb	r3, [r7, #7]
 800037e:	f003 030f 	and.w	r3, r3, #15
 8000382:	3b04      	subs	r3, #4
 8000384:	0112      	lsls	r2, r2, #4
 8000386:	b2d2      	uxtb	r2, r2
 8000388:	440b      	add	r3, r1
 800038a:	761a      	strb	r2, [r3, #24]
}
 800038c:	bf00      	nop
 800038e:	370c      	adds	r7, #12
 8000390:	46bd      	mov	sp, r7
 8000392:	bc80      	pop	{r7}
 8000394:	4770      	bx	lr
 8000396:	bf00      	nop
 8000398:	e000e100 	.word	0xe000e100
 800039c:	e000ed00 	.word	0xe000ed00

080003a0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80003a0:	b480      	push	{r7}
 80003a2:	b089      	sub	sp, #36	; 0x24
 80003a4:	af00      	add	r7, sp, #0
 80003a6:	60f8      	str	r0, [r7, #12]
 80003a8:	60b9      	str	r1, [r7, #8]
 80003aa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80003ac:	68fb      	ldr	r3, [r7, #12]
 80003ae:	f003 0307 	and.w	r3, r3, #7
 80003b2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80003b4:	69fb      	ldr	r3, [r7, #28]
 80003b6:	f1c3 0307 	rsb	r3, r3, #7
 80003ba:	2b04      	cmp	r3, #4
 80003bc:	bf28      	it	cs
 80003be:	2304      	movcs	r3, #4
 80003c0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80003c2:	69fb      	ldr	r3, [r7, #28]
 80003c4:	3304      	adds	r3, #4
 80003c6:	2b06      	cmp	r3, #6
 80003c8:	d902      	bls.n	80003d0 <NVIC_EncodePriority+0x30>
 80003ca:	69fb      	ldr	r3, [r7, #28]
 80003cc:	3b03      	subs	r3, #3
 80003ce:	e000      	b.n	80003d2 <NVIC_EncodePriority+0x32>
 80003d0:	2300      	movs	r3, #0
 80003d2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80003d4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80003d8:	69bb      	ldr	r3, [r7, #24]
 80003da:	fa02 f303 	lsl.w	r3, r2, r3
 80003de:	43da      	mvns	r2, r3
 80003e0:	68bb      	ldr	r3, [r7, #8]
 80003e2:	401a      	ands	r2, r3
 80003e4:	697b      	ldr	r3, [r7, #20]
 80003e6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80003e8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80003ec:	697b      	ldr	r3, [r7, #20]
 80003ee:	fa01 f303 	lsl.w	r3, r1, r3
 80003f2:	43d9      	mvns	r1, r3
 80003f4:	687b      	ldr	r3, [r7, #4]
 80003f6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80003f8:	4313      	orrs	r3, r2
         );
}
 80003fa:	4618      	mov	r0, r3
 80003fc:	3724      	adds	r7, #36	; 0x24
 80003fe:	46bd      	mov	sp, r7
 8000400:	bc80      	pop	{r7}
 8000402:	4770      	bx	lr

08000404 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000404:	b580      	push	{r7, lr}
 8000406:	b082      	sub	sp, #8
 8000408:	af00      	add	r7, sp, #0
 800040a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800040c:	687b      	ldr	r3, [r7, #4]
 800040e:	3b01      	subs	r3, #1
 8000410:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000414:	d301      	bcc.n	800041a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000416:	2301      	movs	r3, #1
 8000418:	e00f      	b.n	800043a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800041a:	4a0a      	ldr	r2, [pc, #40]	; (8000444 <SysTick_Config+0x40>)
 800041c:	687b      	ldr	r3, [r7, #4]
 800041e:	3b01      	subs	r3, #1
 8000420:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000422:	210f      	movs	r1, #15
 8000424:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000428:	f7ff ff90 	bl	800034c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800042c:	4b05      	ldr	r3, [pc, #20]	; (8000444 <SysTick_Config+0x40>)
 800042e:	2200      	movs	r2, #0
 8000430:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000432:	4b04      	ldr	r3, [pc, #16]	; (8000444 <SysTick_Config+0x40>)
 8000434:	2207      	movs	r2, #7
 8000436:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000438:	2300      	movs	r3, #0
}
 800043a:	4618      	mov	r0, r3
 800043c:	3708      	adds	r7, #8
 800043e:	46bd      	mov	sp, r7
 8000440:	bd80      	pop	{r7, pc}
 8000442:	bf00      	nop
 8000444:	e000e010 	.word	0xe000e010

08000448 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000448:	b580      	push	{r7, lr}
 800044a:	b082      	sub	sp, #8
 800044c:	af00      	add	r7, sp, #0
 800044e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000450:	6878      	ldr	r0, [r7, #4]
 8000452:	f7ff ff49 	bl	80002e8 <__NVIC_SetPriorityGrouping>
}
 8000456:	bf00      	nop
 8000458:	3708      	adds	r7, #8
 800045a:	46bd      	mov	sp, r7
 800045c:	bd80      	pop	{r7, pc}

0800045e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800045e:	b580      	push	{r7, lr}
 8000460:	b086      	sub	sp, #24
 8000462:	af00      	add	r7, sp, #0
 8000464:	4603      	mov	r3, r0
 8000466:	60b9      	str	r1, [r7, #8]
 8000468:	607a      	str	r2, [r7, #4]
 800046a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800046c:	2300      	movs	r3, #0
 800046e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000470:	f7ff ff5e 	bl	8000330 <__NVIC_GetPriorityGrouping>
 8000474:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000476:	687a      	ldr	r2, [r7, #4]
 8000478:	68b9      	ldr	r1, [r7, #8]
 800047a:	6978      	ldr	r0, [r7, #20]
 800047c:	f7ff ff90 	bl	80003a0 <NVIC_EncodePriority>
 8000480:	4602      	mov	r2, r0
 8000482:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000486:	4611      	mov	r1, r2
 8000488:	4618      	mov	r0, r3
 800048a:	f7ff ff5f 	bl	800034c <__NVIC_SetPriority>
}
 800048e:	bf00      	nop
 8000490:	3718      	adds	r7, #24
 8000492:	46bd      	mov	sp, r7
 8000494:	bd80      	pop	{r7, pc}

08000496 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000496:	b580      	push	{r7, lr}
 8000498:	b082      	sub	sp, #8
 800049a:	af00      	add	r7, sp, #0
 800049c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800049e:	6878      	ldr	r0, [r7, #4]
 80004a0:	f7ff ffb0 	bl	8000404 <SysTick_Config>
 80004a4:	4603      	mov	r3, r0
}
 80004a6:	4618      	mov	r0, r3
 80004a8:	3708      	adds	r7, #8
 80004aa:	46bd      	mov	sp, r7
 80004ac:	bd80      	pop	{r7, pc}
	...

080004b0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80004b0:	b480      	push	{r7}
 80004b2:	b08b      	sub	sp, #44	; 0x2c
 80004b4:	af00      	add	r7, sp, #0
 80004b6:	6078      	str	r0, [r7, #4]
 80004b8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80004ba:	2300      	movs	r3, #0
 80004bc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80004be:	2300      	movs	r3, #0
 80004c0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80004c2:	e133      	b.n	800072c <HAL_GPIO_Init+0x27c>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80004c4:	2201      	movs	r2, #1
 80004c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80004c8:	fa02 f303 	lsl.w	r3, r2, r3
 80004cc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80004ce:	683b      	ldr	r3, [r7, #0]
 80004d0:	681b      	ldr	r3, [r3, #0]
 80004d2:	69fa      	ldr	r2, [r7, #28]
 80004d4:	4013      	ands	r3, r2
 80004d6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80004d8:	69ba      	ldr	r2, [r7, #24]
 80004da:	69fb      	ldr	r3, [r7, #28]
 80004dc:	429a      	cmp	r2, r3
 80004de:	f040 8122 	bne.w	8000726 <HAL_GPIO_Init+0x276>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80004e2:	683b      	ldr	r3, [r7, #0]
 80004e4:	685b      	ldr	r3, [r3, #4]
 80004e6:	2b12      	cmp	r3, #18
 80004e8:	d034      	beq.n	8000554 <HAL_GPIO_Init+0xa4>
 80004ea:	2b12      	cmp	r3, #18
 80004ec:	d80d      	bhi.n	800050a <HAL_GPIO_Init+0x5a>
 80004ee:	2b02      	cmp	r3, #2
 80004f0:	d02b      	beq.n	800054a <HAL_GPIO_Init+0x9a>
 80004f2:	2b02      	cmp	r3, #2
 80004f4:	d804      	bhi.n	8000500 <HAL_GPIO_Init+0x50>
 80004f6:	2b00      	cmp	r3, #0
 80004f8:	d031      	beq.n	800055e <HAL_GPIO_Init+0xae>
 80004fa:	2b01      	cmp	r3, #1
 80004fc:	d01c      	beq.n	8000538 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80004fe:	e048      	b.n	8000592 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000500:	2b03      	cmp	r3, #3
 8000502:	d043      	beq.n	800058c <HAL_GPIO_Init+0xdc>
 8000504:	2b11      	cmp	r3, #17
 8000506:	d01b      	beq.n	8000540 <HAL_GPIO_Init+0x90>
          break;
 8000508:	e043      	b.n	8000592 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 800050a:	4a8f      	ldr	r2, [pc, #572]	; (8000748 <HAL_GPIO_Init+0x298>)
 800050c:	4293      	cmp	r3, r2
 800050e:	d026      	beq.n	800055e <HAL_GPIO_Init+0xae>
 8000510:	4a8d      	ldr	r2, [pc, #564]	; (8000748 <HAL_GPIO_Init+0x298>)
 8000512:	4293      	cmp	r3, r2
 8000514:	d806      	bhi.n	8000524 <HAL_GPIO_Init+0x74>
 8000516:	4a8d      	ldr	r2, [pc, #564]	; (800074c <HAL_GPIO_Init+0x29c>)
 8000518:	4293      	cmp	r3, r2
 800051a:	d020      	beq.n	800055e <HAL_GPIO_Init+0xae>
 800051c:	4a8c      	ldr	r2, [pc, #560]	; (8000750 <HAL_GPIO_Init+0x2a0>)
 800051e:	4293      	cmp	r3, r2
 8000520:	d01d      	beq.n	800055e <HAL_GPIO_Init+0xae>
          break;
 8000522:	e036      	b.n	8000592 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000524:	4a8b      	ldr	r2, [pc, #556]	; (8000754 <HAL_GPIO_Init+0x2a4>)
 8000526:	4293      	cmp	r3, r2
 8000528:	d019      	beq.n	800055e <HAL_GPIO_Init+0xae>
 800052a:	4a8b      	ldr	r2, [pc, #556]	; (8000758 <HAL_GPIO_Init+0x2a8>)
 800052c:	4293      	cmp	r3, r2
 800052e:	d016      	beq.n	800055e <HAL_GPIO_Init+0xae>
 8000530:	4a8a      	ldr	r2, [pc, #552]	; (800075c <HAL_GPIO_Init+0x2ac>)
 8000532:	4293      	cmp	r3, r2
 8000534:	d013      	beq.n	800055e <HAL_GPIO_Init+0xae>
          break;
 8000536:	e02c      	b.n	8000592 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000538:	683b      	ldr	r3, [r7, #0]
 800053a:	68db      	ldr	r3, [r3, #12]
 800053c:	623b      	str	r3, [r7, #32]
          break;
 800053e:	e028      	b.n	8000592 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000540:	683b      	ldr	r3, [r7, #0]
 8000542:	68db      	ldr	r3, [r3, #12]
 8000544:	3304      	adds	r3, #4
 8000546:	623b      	str	r3, [r7, #32]
          break;
 8000548:	e023      	b.n	8000592 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800054a:	683b      	ldr	r3, [r7, #0]
 800054c:	68db      	ldr	r3, [r3, #12]
 800054e:	3308      	adds	r3, #8
 8000550:	623b      	str	r3, [r7, #32]
          break;
 8000552:	e01e      	b.n	8000592 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000554:	683b      	ldr	r3, [r7, #0]
 8000556:	68db      	ldr	r3, [r3, #12]
 8000558:	330c      	adds	r3, #12
 800055a:	623b      	str	r3, [r7, #32]
          break;
 800055c:	e019      	b.n	8000592 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800055e:	683b      	ldr	r3, [r7, #0]
 8000560:	689b      	ldr	r3, [r3, #8]
 8000562:	2b00      	cmp	r3, #0
 8000564:	d102      	bne.n	800056c <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000566:	2304      	movs	r3, #4
 8000568:	623b      	str	r3, [r7, #32]
          break;
 800056a:	e012      	b.n	8000592 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800056c:	683b      	ldr	r3, [r7, #0]
 800056e:	689b      	ldr	r3, [r3, #8]
 8000570:	2b01      	cmp	r3, #1
 8000572:	d105      	bne.n	8000580 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000574:	2308      	movs	r3, #8
 8000576:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000578:	687b      	ldr	r3, [r7, #4]
 800057a:	69fa      	ldr	r2, [r7, #28]
 800057c:	611a      	str	r2, [r3, #16]
          break;
 800057e:	e008      	b.n	8000592 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000580:	2308      	movs	r3, #8
 8000582:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000584:	687b      	ldr	r3, [r7, #4]
 8000586:	69fa      	ldr	r2, [r7, #28]
 8000588:	615a      	str	r2, [r3, #20]
          break;
 800058a:	e002      	b.n	8000592 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800058c:	2300      	movs	r3, #0
 800058e:	623b      	str	r3, [r7, #32]
          break;
 8000590:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000592:	69bb      	ldr	r3, [r7, #24]
 8000594:	2bff      	cmp	r3, #255	; 0xff
 8000596:	d801      	bhi.n	800059c <HAL_GPIO_Init+0xec>
 8000598:	687b      	ldr	r3, [r7, #4]
 800059a:	e001      	b.n	80005a0 <HAL_GPIO_Init+0xf0>
 800059c:	687b      	ldr	r3, [r7, #4]
 800059e:	3304      	adds	r3, #4
 80005a0:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80005a2:	69bb      	ldr	r3, [r7, #24]
 80005a4:	2bff      	cmp	r3, #255	; 0xff
 80005a6:	d802      	bhi.n	80005ae <HAL_GPIO_Init+0xfe>
 80005a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80005aa:	009b      	lsls	r3, r3, #2
 80005ac:	e002      	b.n	80005b4 <HAL_GPIO_Init+0x104>
 80005ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80005b0:	3b08      	subs	r3, #8
 80005b2:	009b      	lsls	r3, r3, #2
 80005b4:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80005b6:	697b      	ldr	r3, [r7, #20]
 80005b8:	681a      	ldr	r2, [r3, #0]
 80005ba:	210f      	movs	r1, #15
 80005bc:	693b      	ldr	r3, [r7, #16]
 80005be:	fa01 f303 	lsl.w	r3, r1, r3
 80005c2:	43db      	mvns	r3, r3
 80005c4:	401a      	ands	r2, r3
 80005c6:	6a39      	ldr	r1, [r7, #32]
 80005c8:	693b      	ldr	r3, [r7, #16]
 80005ca:	fa01 f303 	lsl.w	r3, r1, r3
 80005ce:	431a      	orrs	r2, r3
 80005d0:	697b      	ldr	r3, [r7, #20]
 80005d2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80005d4:	683b      	ldr	r3, [r7, #0]
 80005d6:	685b      	ldr	r3, [r3, #4]
 80005d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005dc:	2b00      	cmp	r3, #0
 80005de:	f000 80a2 	beq.w	8000726 <HAL_GPIO_Init+0x276>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80005e2:	4b5f      	ldr	r3, [pc, #380]	; (8000760 <HAL_GPIO_Init+0x2b0>)
 80005e4:	699b      	ldr	r3, [r3, #24]
 80005e6:	4a5e      	ldr	r2, [pc, #376]	; (8000760 <HAL_GPIO_Init+0x2b0>)
 80005e8:	f043 0301 	orr.w	r3, r3, #1
 80005ec:	6193      	str	r3, [r2, #24]
 80005ee:	4b5c      	ldr	r3, [pc, #368]	; (8000760 <HAL_GPIO_Init+0x2b0>)
 80005f0:	699b      	ldr	r3, [r3, #24]
 80005f2:	f003 0301 	and.w	r3, r3, #1
 80005f6:	60bb      	str	r3, [r7, #8]
 80005f8:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80005fa:	4a5a      	ldr	r2, [pc, #360]	; (8000764 <HAL_GPIO_Init+0x2b4>)
 80005fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80005fe:	089b      	lsrs	r3, r3, #2
 8000600:	3302      	adds	r3, #2
 8000602:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000606:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000608:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800060a:	f003 0303 	and.w	r3, r3, #3
 800060e:	009b      	lsls	r3, r3, #2
 8000610:	220f      	movs	r2, #15
 8000612:	fa02 f303 	lsl.w	r3, r2, r3
 8000616:	43db      	mvns	r3, r3
 8000618:	68fa      	ldr	r2, [r7, #12]
 800061a:	4013      	ands	r3, r2
 800061c:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800061e:	687b      	ldr	r3, [r7, #4]
 8000620:	4a51      	ldr	r2, [pc, #324]	; (8000768 <HAL_GPIO_Init+0x2b8>)
 8000622:	4293      	cmp	r3, r2
 8000624:	d01f      	beq.n	8000666 <HAL_GPIO_Init+0x1b6>
 8000626:	687b      	ldr	r3, [r7, #4]
 8000628:	4a50      	ldr	r2, [pc, #320]	; (800076c <HAL_GPIO_Init+0x2bc>)
 800062a:	4293      	cmp	r3, r2
 800062c:	d019      	beq.n	8000662 <HAL_GPIO_Init+0x1b2>
 800062e:	687b      	ldr	r3, [r7, #4]
 8000630:	4a4f      	ldr	r2, [pc, #316]	; (8000770 <HAL_GPIO_Init+0x2c0>)
 8000632:	4293      	cmp	r3, r2
 8000634:	d013      	beq.n	800065e <HAL_GPIO_Init+0x1ae>
 8000636:	687b      	ldr	r3, [r7, #4]
 8000638:	4a4e      	ldr	r2, [pc, #312]	; (8000774 <HAL_GPIO_Init+0x2c4>)
 800063a:	4293      	cmp	r3, r2
 800063c:	d00d      	beq.n	800065a <HAL_GPIO_Init+0x1aa>
 800063e:	687b      	ldr	r3, [r7, #4]
 8000640:	4a4d      	ldr	r2, [pc, #308]	; (8000778 <HAL_GPIO_Init+0x2c8>)
 8000642:	4293      	cmp	r3, r2
 8000644:	d007      	beq.n	8000656 <HAL_GPIO_Init+0x1a6>
 8000646:	687b      	ldr	r3, [r7, #4]
 8000648:	4a4c      	ldr	r2, [pc, #304]	; (800077c <HAL_GPIO_Init+0x2cc>)
 800064a:	4293      	cmp	r3, r2
 800064c:	d101      	bne.n	8000652 <HAL_GPIO_Init+0x1a2>
 800064e:	2305      	movs	r3, #5
 8000650:	e00a      	b.n	8000668 <HAL_GPIO_Init+0x1b8>
 8000652:	2306      	movs	r3, #6
 8000654:	e008      	b.n	8000668 <HAL_GPIO_Init+0x1b8>
 8000656:	2304      	movs	r3, #4
 8000658:	e006      	b.n	8000668 <HAL_GPIO_Init+0x1b8>
 800065a:	2303      	movs	r3, #3
 800065c:	e004      	b.n	8000668 <HAL_GPIO_Init+0x1b8>
 800065e:	2302      	movs	r3, #2
 8000660:	e002      	b.n	8000668 <HAL_GPIO_Init+0x1b8>
 8000662:	2301      	movs	r3, #1
 8000664:	e000      	b.n	8000668 <HAL_GPIO_Init+0x1b8>
 8000666:	2300      	movs	r3, #0
 8000668:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800066a:	f002 0203 	and.w	r2, r2, #3
 800066e:	0092      	lsls	r2, r2, #2
 8000670:	4093      	lsls	r3, r2
 8000672:	68fa      	ldr	r2, [r7, #12]
 8000674:	4313      	orrs	r3, r2
 8000676:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000678:	493a      	ldr	r1, [pc, #232]	; (8000764 <HAL_GPIO_Init+0x2b4>)
 800067a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800067c:	089b      	lsrs	r3, r3, #2
 800067e:	3302      	adds	r3, #2
 8000680:	68fa      	ldr	r2, [r7, #12]
 8000682:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000686:	683b      	ldr	r3, [r7, #0]
 8000688:	685b      	ldr	r3, [r3, #4]
 800068a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800068e:	2b00      	cmp	r3, #0
 8000690:	d006      	beq.n	80006a0 <HAL_GPIO_Init+0x1f0>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000692:	4b3b      	ldr	r3, [pc, #236]	; (8000780 <HAL_GPIO_Init+0x2d0>)
 8000694:	681a      	ldr	r2, [r3, #0]
 8000696:	493a      	ldr	r1, [pc, #232]	; (8000780 <HAL_GPIO_Init+0x2d0>)
 8000698:	69bb      	ldr	r3, [r7, #24]
 800069a:	4313      	orrs	r3, r2
 800069c:	600b      	str	r3, [r1, #0]
 800069e:	e006      	b.n	80006ae <HAL_GPIO_Init+0x1fe>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80006a0:	4b37      	ldr	r3, [pc, #220]	; (8000780 <HAL_GPIO_Init+0x2d0>)
 80006a2:	681a      	ldr	r2, [r3, #0]
 80006a4:	69bb      	ldr	r3, [r7, #24]
 80006a6:	43db      	mvns	r3, r3
 80006a8:	4935      	ldr	r1, [pc, #212]	; (8000780 <HAL_GPIO_Init+0x2d0>)
 80006aa:	4013      	ands	r3, r2
 80006ac:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80006ae:	683b      	ldr	r3, [r7, #0]
 80006b0:	685b      	ldr	r3, [r3, #4]
 80006b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80006b6:	2b00      	cmp	r3, #0
 80006b8:	d006      	beq.n	80006c8 <HAL_GPIO_Init+0x218>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80006ba:	4b31      	ldr	r3, [pc, #196]	; (8000780 <HAL_GPIO_Init+0x2d0>)
 80006bc:	685a      	ldr	r2, [r3, #4]
 80006be:	4930      	ldr	r1, [pc, #192]	; (8000780 <HAL_GPIO_Init+0x2d0>)
 80006c0:	69bb      	ldr	r3, [r7, #24]
 80006c2:	4313      	orrs	r3, r2
 80006c4:	604b      	str	r3, [r1, #4]
 80006c6:	e006      	b.n	80006d6 <HAL_GPIO_Init+0x226>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80006c8:	4b2d      	ldr	r3, [pc, #180]	; (8000780 <HAL_GPIO_Init+0x2d0>)
 80006ca:	685a      	ldr	r2, [r3, #4]
 80006cc:	69bb      	ldr	r3, [r7, #24]
 80006ce:	43db      	mvns	r3, r3
 80006d0:	492b      	ldr	r1, [pc, #172]	; (8000780 <HAL_GPIO_Init+0x2d0>)
 80006d2:	4013      	ands	r3, r2
 80006d4:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80006d6:	683b      	ldr	r3, [r7, #0]
 80006d8:	685b      	ldr	r3, [r3, #4]
 80006da:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80006de:	2b00      	cmp	r3, #0
 80006e0:	d006      	beq.n	80006f0 <HAL_GPIO_Init+0x240>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80006e2:	4b27      	ldr	r3, [pc, #156]	; (8000780 <HAL_GPIO_Init+0x2d0>)
 80006e4:	689a      	ldr	r2, [r3, #8]
 80006e6:	4926      	ldr	r1, [pc, #152]	; (8000780 <HAL_GPIO_Init+0x2d0>)
 80006e8:	69bb      	ldr	r3, [r7, #24]
 80006ea:	4313      	orrs	r3, r2
 80006ec:	608b      	str	r3, [r1, #8]
 80006ee:	e006      	b.n	80006fe <HAL_GPIO_Init+0x24e>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80006f0:	4b23      	ldr	r3, [pc, #140]	; (8000780 <HAL_GPIO_Init+0x2d0>)
 80006f2:	689a      	ldr	r2, [r3, #8]
 80006f4:	69bb      	ldr	r3, [r7, #24]
 80006f6:	43db      	mvns	r3, r3
 80006f8:	4921      	ldr	r1, [pc, #132]	; (8000780 <HAL_GPIO_Init+0x2d0>)
 80006fa:	4013      	ands	r3, r2
 80006fc:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80006fe:	683b      	ldr	r3, [r7, #0]
 8000700:	685b      	ldr	r3, [r3, #4]
 8000702:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000706:	2b00      	cmp	r3, #0
 8000708:	d006      	beq.n	8000718 <HAL_GPIO_Init+0x268>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800070a:	4b1d      	ldr	r3, [pc, #116]	; (8000780 <HAL_GPIO_Init+0x2d0>)
 800070c:	68da      	ldr	r2, [r3, #12]
 800070e:	491c      	ldr	r1, [pc, #112]	; (8000780 <HAL_GPIO_Init+0x2d0>)
 8000710:	69bb      	ldr	r3, [r7, #24]
 8000712:	4313      	orrs	r3, r2
 8000714:	60cb      	str	r3, [r1, #12]
 8000716:	e006      	b.n	8000726 <HAL_GPIO_Init+0x276>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000718:	4b19      	ldr	r3, [pc, #100]	; (8000780 <HAL_GPIO_Init+0x2d0>)
 800071a:	68da      	ldr	r2, [r3, #12]
 800071c:	69bb      	ldr	r3, [r7, #24]
 800071e:	43db      	mvns	r3, r3
 8000720:	4917      	ldr	r1, [pc, #92]	; (8000780 <HAL_GPIO_Init+0x2d0>)
 8000722:	4013      	ands	r3, r2
 8000724:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8000726:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000728:	3301      	adds	r3, #1
 800072a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800072c:	683b      	ldr	r3, [r7, #0]
 800072e:	681a      	ldr	r2, [r3, #0]
 8000730:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000732:	fa22 f303 	lsr.w	r3, r2, r3
 8000736:	2b00      	cmp	r3, #0
 8000738:	f47f aec4 	bne.w	80004c4 <HAL_GPIO_Init+0x14>
  }
}
 800073c:	bf00      	nop
 800073e:	372c      	adds	r7, #44	; 0x2c
 8000740:	46bd      	mov	sp, r7
 8000742:	bc80      	pop	{r7}
 8000744:	4770      	bx	lr
 8000746:	bf00      	nop
 8000748:	10210000 	.word	0x10210000
 800074c:	10110000 	.word	0x10110000
 8000750:	10120000 	.word	0x10120000
 8000754:	10310000 	.word	0x10310000
 8000758:	10320000 	.word	0x10320000
 800075c:	10220000 	.word	0x10220000
 8000760:	40021000 	.word	0x40021000
 8000764:	40010000 	.word	0x40010000
 8000768:	40010800 	.word	0x40010800
 800076c:	40010c00 	.word	0x40010c00
 8000770:	40011000 	.word	0x40011000
 8000774:	40011400 	.word	0x40011400
 8000778:	40011800 	.word	0x40011800
 800077c:	40011c00 	.word	0x40011c00
 8000780:	40010400 	.word	0x40010400

08000784 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	b086      	sub	sp, #24
 8000788:	af00      	add	r7, sp, #0
 800078a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800078c:	687b      	ldr	r3, [r7, #4]
 800078e:	2b00      	cmp	r3, #0
 8000790:	d101      	bne.n	8000796 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000792:	2301      	movs	r3, #1
 8000794:	e26c      	b.n	8000c70 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000796:	687b      	ldr	r3, [r7, #4]
 8000798:	681b      	ldr	r3, [r3, #0]
 800079a:	f003 0301 	and.w	r3, r3, #1
 800079e:	2b00      	cmp	r3, #0
 80007a0:	f000 8087 	beq.w	80008b2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80007a4:	4b92      	ldr	r3, [pc, #584]	; (80009f0 <HAL_RCC_OscConfig+0x26c>)
 80007a6:	685b      	ldr	r3, [r3, #4]
 80007a8:	f003 030c 	and.w	r3, r3, #12
 80007ac:	2b04      	cmp	r3, #4
 80007ae:	d00c      	beq.n	80007ca <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80007b0:	4b8f      	ldr	r3, [pc, #572]	; (80009f0 <HAL_RCC_OscConfig+0x26c>)
 80007b2:	685b      	ldr	r3, [r3, #4]
 80007b4:	f003 030c 	and.w	r3, r3, #12
 80007b8:	2b08      	cmp	r3, #8
 80007ba:	d112      	bne.n	80007e2 <HAL_RCC_OscConfig+0x5e>
 80007bc:	4b8c      	ldr	r3, [pc, #560]	; (80009f0 <HAL_RCC_OscConfig+0x26c>)
 80007be:	685b      	ldr	r3, [r3, #4]
 80007c0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80007c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80007c8:	d10b      	bne.n	80007e2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80007ca:	4b89      	ldr	r3, [pc, #548]	; (80009f0 <HAL_RCC_OscConfig+0x26c>)
 80007cc:	681b      	ldr	r3, [r3, #0]
 80007ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	d06c      	beq.n	80008b0 <HAL_RCC_OscConfig+0x12c>
 80007d6:	687b      	ldr	r3, [r7, #4]
 80007d8:	685b      	ldr	r3, [r3, #4]
 80007da:	2b00      	cmp	r3, #0
 80007dc:	d168      	bne.n	80008b0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80007de:	2301      	movs	r3, #1
 80007e0:	e246      	b.n	8000c70 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80007e2:	687b      	ldr	r3, [r7, #4]
 80007e4:	685b      	ldr	r3, [r3, #4]
 80007e6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80007ea:	d106      	bne.n	80007fa <HAL_RCC_OscConfig+0x76>
 80007ec:	4b80      	ldr	r3, [pc, #512]	; (80009f0 <HAL_RCC_OscConfig+0x26c>)
 80007ee:	681b      	ldr	r3, [r3, #0]
 80007f0:	4a7f      	ldr	r2, [pc, #508]	; (80009f0 <HAL_RCC_OscConfig+0x26c>)
 80007f2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80007f6:	6013      	str	r3, [r2, #0]
 80007f8:	e02e      	b.n	8000858 <HAL_RCC_OscConfig+0xd4>
 80007fa:	687b      	ldr	r3, [r7, #4]
 80007fc:	685b      	ldr	r3, [r3, #4]
 80007fe:	2b00      	cmp	r3, #0
 8000800:	d10c      	bne.n	800081c <HAL_RCC_OscConfig+0x98>
 8000802:	4b7b      	ldr	r3, [pc, #492]	; (80009f0 <HAL_RCC_OscConfig+0x26c>)
 8000804:	681b      	ldr	r3, [r3, #0]
 8000806:	4a7a      	ldr	r2, [pc, #488]	; (80009f0 <HAL_RCC_OscConfig+0x26c>)
 8000808:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800080c:	6013      	str	r3, [r2, #0]
 800080e:	4b78      	ldr	r3, [pc, #480]	; (80009f0 <HAL_RCC_OscConfig+0x26c>)
 8000810:	681b      	ldr	r3, [r3, #0]
 8000812:	4a77      	ldr	r2, [pc, #476]	; (80009f0 <HAL_RCC_OscConfig+0x26c>)
 8000814:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000818:	6013      	str	r3, [r2, #0]
 800081a:	e01d      	b.n	8000858 <HAL_RCC_OscConfig+0xd4>
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	685b      	ldr	r3, [r3, #4]
 8000820:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000824:	d10c      	bne.n	8000840 <HAL_RCC_OscConfig+0xbc>
 8000826:	4b72      	ldr	r3, [pc, #456]	; (80009f0 <HAL_RCC_OscConfig+0x26c>)
 8000828:	681b      	ldr	r3, [r3, #0]
 800082a:	4a71      	ldr	r2, [pc, #452]	; (80009f0 <HAL_RCC_OscConfig+0x26c>)
 800082c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000830:	6013      	str	r3, [r2, #0]
 8000832:	4b6f      	ldr	r3, [pc, #444]	; (80009f0 <HAL_RCC_OscConfig+0x26c>)
 8000834:	681b      	ldr	r3, [r3, #0]
 8000836:	4a6e      	ldr	r2, [pc, #440]	; (80009f0 <HAL_RCC_OscConfig+0x26c>)
 8000838:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800083c:	6013      	str	r3, [r2, #0]
 800083e:	e00b      	b.n	8000858 <HAL_RCC_OscConfig+0xd4>
 8000840:	4b6b      	ldr	r3, [pc, #428]	; (80009f0 <HAL_RCC_OscConfig+0x26c>)
 8000842:	681b      	ldr	r3, [r3, #0]
 8000844:	4a6a      	ldr	r2, [pc, #424]	; (80009f0 <HAL_RCC_OscConfig+0x26c>)
 8000846:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800084a:	6013      	str	r3, [r2, #0]
 800084c:	4b68      	ldr	r3, [pc, #416]	; (80009f0 <HAL_RCC_OscConfig+0x26c>)
 800084e:	681b      	ldr	r3, [r3, #0]
 8000850:	4a67      	ldr	r2, [pc, #412]	; (80009f0 <HAL_RCC_OscConfig+0x26c>)
 8000852:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000856:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	685b      	ldr	r3, [r3, #4]
 800085c:	2b00      	cmp	r3, #0
 800085e:	d013      	beq.n	8000888 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000860:	f7ff fd38 	bl	80002d4 <HAL_GetTick>
 8000864:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000866:	e008      	b.n	800087a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000868:	f7ff fd34 	bl	80002d4 <HAL_GetTick>
 800086c:	4602      	mov	r2, r0
 800086e:	693b      	ldr	r3, [r7, #16]
 8000870:	1ad3      	subs	r3, r2, r3
 8000872:	2b64      	cmp	r3, #100	; 0x64
 8000874:	d901      	bls.n	800087a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000876:	2303      	movs	r3, #3
 8000878:	e1fa      	b.n	8000c70 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800087a:	4b5d      	ldr	r3, [pc, #372]	; (80009f0 <HAL_RCC_OscConfig+0x26c>)
 800087c:	681b      	ldr	r3, [r3, #0]
 800087e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000882:	2b00      	cmp	r3, #0
 8000884:	d0f0      	beq.n	8000868 <HAL_RCC_OscConfig+0xe4>
 8000886:	e014      	b.n	80008b2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000888:	f7ff fd24 	bl	80002d4 <HAL_GetTick>
 800088c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800088e:	e008      	b.n	80008a2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000890:	f7ff fd20 	bl	80002d4 <HAL_GetTick>
 8000894:	4602      	mov	r2, r0
 8000896:	693b      	ldr	r3, [r7, #16]
 8000898:	1ad3      	subs	r3, r2, r3
 800089a:	2b64      	cmp	r3, #100	; 0x64
 800089c:	d901      	bls.n	80008a2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800089e:	2303      	movs	r3, #3
 80008a0:	e1e6      	b.n	8000c70 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80008a2:	4b53      	ldr	r3, [pc, #332]	; (80009f0 <HAL_RCC_OscConfig+0x26c>)
 80008a4:	681b      	ldr	r3, [r3, #0]
 80008a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80008aa:	2b00      	cmp	r3, #0
 80008ac:	d1f0      	bne.n	8000890 <HAL_RCC_OscConfig+0x10c>
 80008ae:	e000      	b.n	80008b2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80008b0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	681b      	ldr	r3, [r3, #0]
 80008b6:	f003 0302 	and.w	r3, r3, #2
 80008ba:	2b00      	cmp	r3, #0
 80008bc:	d063      	beq.n	8000986 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80008be:	4b4c      	ldr	r3, [pc, #304]	; (80009f0 <HAL_RCC_OscConfig+0x26c>)
 80008c0:	685b      	ldr	r3, [r3, #4]
 80008c2:	f003 030c 	and.w	r3, r3, #12
 80008c6:	2b00      	cmp	r3, #0
 80008c8:	d00b      	beq.n	80008e2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80008ca:	4b49      	ldr	r3, [pc, #292]	; (80009f0 <HAL_RCC_OscConfig+0x26c>)
 80008cc:	685b      	ldr	r3, [r3, #4]
 80008ce:	f003 030c 	and.w	r3, r3, #12
 80008d2:	2b08      	cmp	r3, #8
 80008d4:	d11c      	bne.n	8000910 <HAL_RCC_OscConfig+0x18c>
 80008d6:	4b46      	ldr	r3, [pc, #280]	; (80009f0 <HAL_RCC_OscConfig+0x26c>)
 80008d8:	685b      	ldr	r3, [r3, #4]
 80008da:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80008de:	2b00      	cmp	r3, #0
 80008e0:	d116      	bne.n	8000910 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80008e2:	4b43      	ldr	r3, [pc, #268]	; (80009f0 <HAL_RCC_OscConfig+0x26c>)
 80008e4:	681b      	ldr	r3, [r3, #0]
 80008e6:	f003 0302 	and.w	r3, r3, #2
 80008ea:	2b00      	cmp	r3, #0
 80008ec:	d005      	beq.n	80008fa <HAL_RCC_OscConfig+0x176>
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	691b      	ldr	r3, [r3, #16]
 80008f2:	2b01      	cmp	r3, #1
 80008f4:	d001      	beq.n	80008fa <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80008f6:	2301      	movs	r3, #1
 80008f8:	e1ba      	b.n	8000c70 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80008fa:	4b3d      	ldr	r3, [pc, #244]	; (80009f0 <HAL_RCC_OscConfig+0x26c>)
 80008fc:	681b      	ldr	r3, [r3, #0]
 80008fe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	695b      	ldr	r3, [r3, #20]
 8000906:	00db      	lsls	r3, r3, #3
 8000908:	4939      	ldr	r1, [pc, #228]	; (80009f0 <HAL_RCC_OscConfig+0x26c>)
 800090a:	4313      	orrs	r3, r2
 800090c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800090e:	e03a      	b.n	8000986 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	691b      	ldr	r3, [r3, #16]
 8000914:	2b00      	cmp	r3, #0
 8000916:	d020      	beq.n	800095a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000918:	4b36      	ldr	r3, [pc, #216]	; (80009f4 <HAL_RCC_OscConfig+0x270>)
 800091a:	2201      	movs	r2, #1
 800091c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800091e:	f7ff fcd9 	bl	80002d4 <HAL_GetTick>
 8000922:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000924:	e008      	b.n	8000938 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000926:	f7ff fcd5 	bl	80002d4 <HAL_GetTick>
 800092a:	4602      	mov	r2, r0
 800092c:	693b      	ldr	r3, [r7, #16]
 800092e:	1ad3      	subs	r3, r2, r3
 8000930:	2b02      	cmp	r3, #2
 8000932:	d901      	bls.n	8000938 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8000934:	2303      	movs	r3, #3
 8000936:	e19b      	b.n	8000c70 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000938:	4b2d      	ldr	r3, [pc, #180]	; (80009f0 <HAL_RCC_OscConfig+0x26c>)
 800093a:	681b      	ldr	r3, [r3, #0]
 800093c:	f003 0302 	and.w	r3, r3, #2
 8000940:	2b00      	cmp	r3, #0
 8000942:	d0f0      	beq.n	8000926 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000944:	4b2a      	ldr	r3, [pc, #168]	; (80009f0 <HAL_RCC_OscConfig+0x26c>)
 8000946:	681b      	ldr	r3, [r3, #0]
 8000948:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	695b      	ldr	r3, [r3, #20]
 8000950:	00db      	lsls	r3, r3, #3
 8000952:	4927      	ldr	r1, [pc, #156]	; (80009f0 <HAL_RCC_OscConfig+0x26c>)
 8000954:	4313      	orrs	r3, r2
 8000956:	600b      	str	r3, [r1, #0]
 8000958:	e015      	b.n	8000986 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800095a:	4b26      	ldr	r3, [pc, #152]	; (80009f4 <HAL_RCC_OscConfig+0x270>)
 800095c:	2200      	movs	r2, #0
 800095e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000960:	f7ff fcb8 	bl	80002d4 <HAL_GetTick>
 8000964:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000966:	e008      	b.n	800097a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000968:	f7ff fcb4 	bl	80002d4 <HAL_GetTick>
 800096c:	4602      	mov	r2, r0
 800096e:	693b      	ldr	r3, [r7, #16]
 8000970:	1ad3      	subs	r3, r2, r3
 8000972:	2b02      	cmp	r3, #2
 8000974:	d901      	bls.n	800097a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8000976:	2303      	movs	r3, #3
 8000978:	e17a      	b.n	8000c70 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800097a:	4b1d      	ldr	r3, [pc, #116]	; (80009f0 <HAL_RCC_OscConfig+0x26c>)
 800097c:	681b      	ldr	r3, [r3, #0]
 800097e:	f003 0302 	and.w	r3, r3, #2
 8000982:	2b00      	cmp	r3, #0
 8000984:	d1f0      	bne.n	8000968 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	681b      	ldr	r3, [r3, #0]
 800098a:	f003 0308 	and.w	r3, r3, #8
 800098e:	2b00      	cmp	r3, #0
 8000990:	d03a      	beq.n	8000a08 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	699b      	ldr	r3, [r3, #24]
 8000996:	2b00      	cmp	r3, #0
 8000998:	d019      	beq.n	80009ce <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800099a:	4b17      	ldr	r3, [pc, #92]	; (80009f8 <HAL_RCC_OscConfig+0x274>)
 800099c:	2201      	movs	r2, #1
 800099e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80009a0:	f7ff fc98 	bl	80002d4 <HAL_GetTick>
 80009a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80009a6:	e008      	b.n	80009ba <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80009a8:	f7ff fc94 	bl	80002d4 <HAL_GetTick>
 80009ac:	4602      	mov	r2, r0
 80009ae:	693b      	ldr	r3, [r7, #16]
 80009b0:	1ad3      	subs	r3, r2, r3
 80009b2:	2b02      	cmp	r3, #2
 80009b4:	d901      	bls.n	80009ba <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80009b6:	2303      	movs	r3, #3
 80009b8:	e15a      	b.n	8000c70 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80009ba:	4b0d      	ldr	r3, [pc, #52]	; (80009f0 <HAL_RCC_OscConfig+0x26c>)
 80009bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80009be:	f003 0302 	and.w	r3, r3, #2
 80009c2:	2b00      	cmp	r3, #0
 80009c4:	d0f0      	beq.n	80009a8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80009c6:	2001      	movs	r0, #1
 80009c8:	f000 fada 	bl	8000f80 <RCC_Delay>
 80009cc:	e01c      	b.n	8000a08 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80009ce:	4b0a      	ldr	r3, [pc, #40]	; (80009f8 <HAL_RCC_OscConfig+0x274>)
 80009d0:	2200      	movs	r2, #0
 80009d2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80009d4:	f7ff fc7e 	bl	80002d4 <HAL_GetTick>
 80009d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80009da:	e00f      	b.n	80009fc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80009dc:	f7ff fc7a 	bl	80002d4 <HAL_GetTick>
 80009e0:	4602      	mov	r2, r0
 80009e2:	693b      	ldr	r3, [r7, #16]
 80009e4:	1ad3      	subs	r3, r2, r3
 80009e6:	2b02      	cmp	r3, #2
 80009e8:	d908      	bls.n	80009fc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80009ea:	2303      	movs	r3, #3
 80009ec:	e140      	b.n	8000c70 <HAL_RCC_OscConfig+0x4ec>
 80009ee:	bf00      	nop
 80009f0:	40021000 	.word	0x40021000
 80009f4:	42420000 	.word	0x42420000
 80009f8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80009fc:	4b9e      	ldr	r3, [pc, #632]	; (8000c78 <HAL_RCC_OscConfig+0x4f4>)
 80009fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a00:	f003 0302 	and.w	r3, r3, #2
 8000a04:	2b00      	cmp	r3, #0
 8000a06:	d1e9      	bne.n	80009dc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	681b      	ldr	r3, [r3, #0]
 8000a0c:	f003 0304 	and.w	r3, r3, #4
 8000a10:	2b00      	cmp	r3, #0
 8000a12:	f000 80a6 	beq.w	8000b62 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000a16:	2300      	movs	r3, #0
 8000a18:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000a1a:	4b97      	ldr	r3, [pc, #604]	; (8000c78 <HAL_RCC_OscConfig+0x4f4>)
 8000a1c:	69db      	ldr	r3, [r3, #28]
 8000a1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a22:	2b00      	cmp	r3, #0
 8000a24:	d10d      	bne.n	8000a42 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000a26:	4b94      	ldr	r3, [pc, #592]	; (8000c78 <HAL_RCC_OscConfig+0x4f4>)
 8000a28:	69db      	ldr	r3, [r3, #28]
 8000a2a:	4a93      	ldr	r2, [pc, #588]	; (8000c78 <HAL_RCC_OscConfig+0x4f4>)
 8000a2c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a30:	61d3      	str	r3, [r2, #28]
 8000a32:	4b91      	ldr	r3, [pc, #580]	; (8000c78 <HAL_RCC_OscConfig+0x4f4>)
 8000a34:	69db      	ldr	r3, [r3, #28]
 8000a36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a3a:	60bb      	str	r3, [r7, #8]
 8000a3c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000a3e:	2301      	movs	r3, #1
 8000a40:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000a42:	4b8e      	ldr	r3, [pc, #568]	; (8000c7c <HAL_RCC_OscConfig+0x4f8>)
 8000a44:	681b      	ldr	r3, [r3, #0]
 8000a46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000a4a:	2b00      	cmp	r3, #0
 8000a4c:	d118      	bne.n	8000a80 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000a4e:	4b8b      	ldr	r3, [pc, #556]	; (8000c7c <HAL_RCC_OscConfig+0x4f8>)
 8000a50:	681b      	ldr	r3, [r3, #0]
 8000a52:	4a8a      	ldr	r2, [pc, #552]	; (8000c7c <HAL_RCC_OscConfig+0x4f8>)
 8000a54:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a58:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000a5a:	f7ff fc3b 	bl	80002d4 <HAL_GetTick>
 8000a5e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000a60:	e008      	b.n	8000a74 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000a62:	f7ff fc37 	bl	80002d4 <HAL_GetTick>
 8000a66:	4602      	mov	r2, r0
 8000a68:	693b      	ldr	r3, [r7, #16]
 8000a6a:	1ad3      	subs	r3, r2, r3
 8000a6c:	2b64      	cmp	r3, #100	; 0x64
 8000a6e:	d901      	bls.n	8000a74 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8000a70:	2303      	movs	r3, #3
 8000a72:	e0fd      	b.n	8000c70 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000a74:	4b81      	ldr	r3, [pc, #516]	; (8000c7c <HAL_RCC_OscConfig+0x4f8>)
 8000a76:	681b      	ldr	r3, [r3, #0]
 8000a78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	d0f0      	beq.n	8000a62 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	68db      	ldr	r3, [r3, #12]
 8000a84:	2b01      	cmp	r3, #1
 8000a86:	d106      	bne.n	8000a96 <HAL_RCC_OscConfig+0x312>
 8000a88:	4b7b      	ldr	r3, [pc, #492]	; (8000c78 <HAL_RCC_OscConfig+0x4f4>)
 8000a8a:	6a1b      	ldr	r3, [r3, #32]
 8000a8c:	4a7a      	ldr	r2, [pc, #488]	; (8000c78 <HAL_RCC_OscConfig+0x4f4>)
 8000a8e:	f043 0301 	orr.w	r3, r3, #1
 8000a92:	6213      	str	r3, [r2, #32]
 8000a94:	e02d      	b.n	8000af2 <HAL_RCC_OscConfig+0x36e>
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	68db      	ldr	r3, [r3, #12]
 8000a9a:	2b00      	cmp	r3, #0
 8000a9c:	d10c      	bne.n	8000ab8 <HAL_RCC_OscConfig+0x334>
 8000a9e:	4b76      	ldr	r3, [pc, #472]	; (8000c78 <HAL_RCC_OscConfig+0x4f4>)
 8000aa0:	6a1b      	ldr	r3, [r3, #32]
 8000aa2:	4a75      	ldr	r2, [pc, #468]	; (8000c78 <HAL_RCC_OscConfig+0x4f4>)
 8000aa4:	f023 0301 	bic.w	r3, r3, #1
 8000aa8:	6213      	str	r3, [r2, #32]
 8000aaa:	4b73      	ldr	r3, [pc, #460]	; (8000c78 <HAL_RCC_OscConfig+0x4f4>)
 8000aac:	6a1b      	ldr	r3, [r3, #32]
 8000aae:	4a72      	ldr	r2, [pc, #456]	; (8000c78 <HAL_RCC_OscConfig+0x4f4>)
 8000ab0:	f023 0304 	bic.w	r3, r3, #4
 8000ab4:	6213      	str	r3, [r2, #32]
 8000ab6:	e01c      	b.n	8000af2 <HAL_RCC_OscConfig+0x36e>
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	68db      	ldr	r3, [r3, #12]
 8000abc:	2b05      	cmp	r3, #5
 8000abe:	d10c      	bne.n	8000ada <HAL_RCC_OscConfig+0x356>
 8000ac0:	4b6d      	ldr	r3, [pc, #436]	; (8000c78 <HAL_RCC_OscConfig+0x4f4>)
 8000ac2:	6a1b      	ldr	r3, [r3, #32]
 8000ac4:	4a6c      	ldr	r2, [pc, #432]	; (8000c78 <HAL_RCC_OscConfig+0x4f4>)
 8000ac6:	f043 0304 	orr.w	r3, r3, #4
 8000aca:	6213      	str	r3, [r2, #32]
 8000acc:	4b6a      	ldr	r3, [pc, #424]	; (8000c78 <HAL_RCC_OscConfig+0x4f4>)
 8000ace:	6a1b      	ldr	r3, [r3, #32]
 8000ad0:	4a69      	ldr	r2, [pc, #420]	; (8000c78 <HAL_RCC_OscConfig+0x4f4>)
 8000ad2:	f043 0301 	orr.w	r3, r3, #1
 8000ad6:	6213      	str	r3, [r2, #32]
 8000ad8:	e00b      	b.n	8000af2 <HAL_RCC_OscConfig+0x36e>
 8000ada:	4b67      	ldr	r3, [pc, #412]	; (8000c78 <HAL_RCC_OscConfig+0x4f4>)
 8000adc:	6a1b      	ldr	r3, [r3, #32]
 8000ade:	4a66      	ldr	r2, [pc, #408]	; (8000c78 <HAL_RCC_OscConfig+0x4f4>)
 8000ae0:	f023 0301 	bic.w	r3, r3, #1
 8000ae4:	6213      	str	r3, [r2, #32]
 8000ae6:	4b64      	ldr	r3, [pc, #400]	; (8000c78 <HAL_RCC_OscConfig+0x4f4>)
 8000ae8:	6a1b      	ldr	r3, [r3, #32]
 8000aea:	4a63      	ldr	r2, [pc, #396]	; (8000c78 <HAL_RCC_OscConfig+0x4f4>)
 8000aec:	f023 0304 	bic.w	r3, r3, #4
 8000af0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	68db      	ldr	r3, [r3, #12]
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	d015      	beq.n	8000b26 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000afa:	f7ff fbeb 	bl	80002d4 <HAL_GetTick>
 8000afe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000b00:	e00a      	b.n	8000b18 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000b02:	f7ff fbe7 	bl	80002d4 <HAL_GetTick>
 8000b06:	4602      	mov	r2, r0
 8000b08:	693b      	ldr	r3, [r7, #16]
 8000b0a:	1ad3      	subs	r3, r2, r3
 8000b0c:	f241 3288 	movw	r2, #5000	; 0x1388
 8000b10:	4293      	cmp	r3, r2
 8000b12:	d901      	bls.n	8000b18 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8000b14:	2303      	movs	r3, #3
 8000b16:	e0ab      	b.n	8000c70 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000b18:	4b57      	ldr	r3, [pc, #348]	; (8000c78 <HAL_RCC_OscConfig+0x4f4>)
 8000b1a:	6a1b      	ldr	r3, [r3, #32]
 8000b1c:	f003 0302 	and.w	r3, r3, #2
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	d0ee      	beq.n	8000b02 <HAL_RCC_OscConfig+0x37e>
 8000b24:	e014      	b.n	8000b50 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000b26:	f7ff fbd5 	bl	80002d4 <HAL_GetTick>
 8000b2a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000b2c:	e00a      	b.n	8000b44 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000b2e:	f7ff fbd1 	bl	80002d4 <HAL_GetTick>
 8000b32:	4602      	mov	r2, r0
 8000b34:	693b      	ldr	r3, [r7, #16]
 8000b36:	1ad3      	subs	r3, r2, r3
 8000b38:	f241 3288 	movw	r2, #5000	; 0x1388
 8000b3c:	4293      	cmp	r3, r2
 8000b3e:	d901      	bls.n	8000b44 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8000b40:	2303      	movs	r3, #3
 8000b42:	e095      	b.n	8000c70 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000b44:	4b4c      	ldr	r3, [pc, #304]	; (8000c78 <HAL_RCC_OscConfig+0x4f4>)
 8000b46:	6a1b      	ldr	r3, [r3, #32]
 8000b48:	f003 0302 	and.w	r3, r3, #2
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	d1ee      	bne.n	8000b2e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8000b50:	7dfb      	ldrb	r3, [r7, #23]
 8000b52:	2b01      	cmp	r3, #1
 8000b54:	d105      	bne.n	8000b62 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000b56:	4b48      	ldr	r3, [pc, #288]	; (8000c78 <HAL_RCC_OscConfig+0x4f4>)
 8000b58:	69db      	ldr	r3, [r3, #28]
 8000b5a:	4a47      	ldr	r2, [pc, #284]	; (8000c78 <HAL_RCC_OscConfig+0x4f4>)
 8000b5c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000b60:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	69db      	ldr	r3, [r3, #28]
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	f000 8081 	beq.w	8000c6e <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000b6c:	4b42      	ldr	r3, [pc, #264]	; (8000c78 <HAL_RCC_OscConfig+0x4f4>)
 8000b6e:	685b      	ldr	r3, [r3, #4]
 8000b70:	f003 030c 	and.w	r3, r3, #12
 8000b74:	2b08      	cmp	r3, #8
 8000b76:	d061      	beq.n	8000c3c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	69db      	ldr	r3, [r3, #28]
 8000b7c:	2b02      	cmp	r3, #2
 8000b7e:	d146      	bne.n	8000c0e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000b80:	4b3f      	ldr	r3, [pc, #252]	; (8000c80 <HAL_RCC_OscConfig+0x4fc>)
 8000b82:	2200      	movs	r2, #0
 8000b84:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000b86:	f7ff fba5 	bl	80002d4 <HAL_GetTick>
 8000b8a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000b8c:	e008      	b.n	8000ba0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000b8e:	f7ff fba1 	bl	80002d4 <HAL_GetTick>
 8000b92:	4602      	mov	r2, r0
 8000b94:	693b      	ldr	r3, [r7, #16]
 8000b96:	1ad3      	subs	r3, r2, r3
 8000b98:	2b02      	cmp	r3, #2
 8000b9a:	d901      	bls.n	8000ba0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8000b9c:	2303      	movs	r3, #3
 8000b9e:	e067      	b.n	8000c70 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000ba0:	4b35      	ldr	r3, [pc, #212]	; (8000c78 <HAL_RCC_OscConfig+0x4f4>)
 8000ba2:	681b      	ldr	r3, [r3, #0]
 8000ba4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d1f0      	bne.n	8000b8e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	6a1b      	ldr	r3, [r3, #32]
 8000bb0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000bb4:	d108      	bne.n	8000bc8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000bb6:	4b30      	ldr	r3, [pc, #192]	; (8000c78 <HAL_RCC_OscConfig+0x4f4>)
 8000bb8:	685b      	ldr	r3, [r3, #4]
 8000bba:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	689b      	ldr	r3, [r3, #8]
 8000bc2:	492d      	ldr	r1, [pc, #180]	; (8000c78 <HAL_RCC_OscConfig+0x4f4>)
 8000bc4:	4313      	orrs	r3, r2
 8000bc6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000bc8:	4b2b      	ldr	r3, [pc, #172]	; (8000c78 <HAL_RCC_OscConfig+0x4f4>)
 8000bca:	685b      	ldr	r3, [r3, #4]
 8000bcc:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	6a19      	ldr	r1, [r3, #32]
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000bd8:	430b      	orrs	r3, r1
 8000bda:	4927      	ldr	r1, [pc, #156]	; (8000c78 <HAL_RCC_OscConfig+0x4f4>)
 8000bdc:	4313      	orrs	r3, r2
 8000bde:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8000be0:	4b27      	ldr	r3, [pc, #156]	; (8000c80 <HAL_RCC_OscConfig+0x4fc>)
 8000be2:	2201      	movs	r2, #1
 8000be4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000be6:	f7ff fb75 	bl	80002d4 <HAL_GetTick>
 8000bea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000bec:	e008      	b.n	8000c00 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000bee:	f7ff fb71 	bl	80002d4 <HAL_GetTick>
 8000bf2:	4602      	mov	r2, r0
 8000bf4:	693b      	ldr	r3, [r7, #16]
 8000bf6:	1ad3      	subs	r3, r2, r3
 8000bf8:	2b02      	cmp	r3, #2
 8000bfa:	d901      	bls.n	8000c00 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8000bfc:	2303      	movs	r3, #3
 8000bfe:	e037      	b.n	8000c70 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000c00:	4b1d      	ldr	r3, [pc, #116]	; (8000c78 <HAL_RCC_OscConfig+0x4f4>)
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	d0f0      	beq.n	8000bee <HAL_RCC_OscConfig+0x46a>
 8000c0c:	e02f      	b.n	8000c6e <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000c0e:	4b1c      	ldr	r3, [pc, #112]	; (8000c80 <HAL_RCC_OscConfig+0x4fc>)
 8000c10:	2200      	movs	r2, #0
 8000c12:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000c14:	f7ff fb5e 	bl	80002d4 <HAL_GetTick>
 8000c18:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000c1a:	e008      	b.n	8000c2e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000c1c:	f7ff fb5a 	bl	80002d4 <HAL_GetTick>
 8000c20:	4602      	mov	r2, r0
 8000c22:	693b      	ldr	r3, [r7, #16]
 8000c24:	1ad3      	subs	r3, r2, r3
 8000c26:	2b02      	cmp	r3, #2
 8000c28:	d901      	bls.n	8000c2e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8000c2a:	2303      	movs	r3, #3
 8000c2c:	e020      	b.n	8000c70 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000c2e:	4b12      	ldr	r3, [pc, #72]	; (8000c78 <HAL_RCC_OscConfig+0x4f4>)
 8000c30:	681b      	ldr	r3, [r3, #0]
 8000c32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	d1f0      	bne.n	8000c1c <HAL_RCC_OscConfig+0x498>
 8000c3a:	e018      	b.n	8000c6e <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	69db      	ldr	r3, [r3, #28]
 8000c40:	2b01      	cmp	r3, #1
 8000c42:	d101      	bne.n	8000c48 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8000c44:	2301      	movs	r3, #1
 8000c46:	e013      	b.n	8000c70 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8000c48:	4b0b      	ldr	r3, [pc, #44]	; (8000c78 <HAL_RCC_OscConfig+0x4f4>)
 8000c4a:	685b      	ldr	r3, [r3, #4]
 8000c4c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000c4e:	68fb      	ldr	r3, [r7, #12]
 8000c50:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	6a1b      	ldr	r3, [r3, #32]
 8000c58:	429a      	cmp	r2, r3
 8000c5a:	d106      	bne.n	8000c6a <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8000c5c:	68fb      	ldr	r3, [r7, #12]
 8000c5e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000c66:	429a      	cmp	r2, r3
 8000c68:	d001      	beq.n	8000c6e <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8000c6a:	2301      	movs	r3, #1
 8000c6c:	e000      	b.n	8000c70 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8000c6e:	2300      	movs	r3, #0
}
 8000c70:	4618      	mov	r0, r3
 8000c72:	3718      	adds	r7, #24
 8000c74:	46bd      	mov	sp, r7
 8000c76:	bd80      	pop	{r7, pc}
 8000c78:	40021000 	.word	0x40021000
 8000c7c:	40007000 	.word	0x40007000
 8000c80:	42420060 	.word	0x42420060

08000c84 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	b084      	sub	sp, #16
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	6078      	str	r0, [r7, #4]
 8000c8c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d101      	bne.n	8000c98 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8000c94:	2301      	movs	r3, #1
 8000c96:	e0d0      	b.n	8000e3a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8000c98:	4b6a      	ldr	r3, [pc, #424]	; (8000e44 <HAL_RCC_ClockConfig+0x1c0>)
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	f003 0307 	and.w	r3, r3, #7
 8000ca0:	683a      	ldr	r2, [r7, #0]
 8000ca2:	429a      	cmp	r2, r3
 8000ca4:	d910      	bls.n	8000cc8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000ca6:	4b67      	ldr	r3, [pc, #412]	; (8000e44 <HAL_RCC_ClockConfig+0x1c0>)
 8000ca8:	681b      	ldr	r3, [r3, #0]
 8000caa:	f023 0207 	bic.w	r2, r3, #7
 8000cae:	4965      	ldr	r1, [pc, #404]	; (8000e44 <HAL_RCC_ClockConfig+0x1c0>)
 8000cb0:	683b      	ldr	r3, [r7, #0]
 8000cb2:	4313      	orrs	r3, r2
 8000cb4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8000cb6:	4b63      	ldr	r3, [pc, #396]	; (8000e44 <HAL_RCC_ClockConfig+0x1c0>)
 8000cb8:	681b      	ldr	r3, [r3, #0]
 8000cba:	f003 0307 	and.w	r3, r3, #7
 8000cbe:	683a      	ldr	r2, [r7, #0]
 8000cc0:	429a      	cmp	r2, r3
 8000cc2:	d001      	beq.n	8000cc8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8000cc4:	2301      	movs	r3, #1
 8000cc6:	e0b8      	b.n	8000e3a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	f003 0302 	and.w	r3, r3, #2
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	d020      	beq.n	8000d16 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	f003 0304 	and.w	r3, r3, #4
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d005      	beq.n	8000cec <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8000ce0:	4b59      	ldr	r3, [pc, #356]	; (8000e48 <HAL_RCC_ClockConfig+0x1c4>)
 8000ce2:	685b      	ldr	r3, [r3, #4]
 8000ce4:	4a58      	ldr	r2, [pc, #352]	; (8000e48 <HAL_RCC_ClockConfig+0x1c4>)
 8000ce6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8000cea:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	f003 0308 	and.w	r3, r3, #8
 8000cf4:	2b00      	cmp	r3, #0
 8000cf6:	d005      	beq.n	8000d04 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8000cf8:	4b53      	ldr	r3, [pc, #332]	; (8000e48 <HAL_RCC_ClockConfig+0x1c4>)
 8000cfa:	685b      	ldr	r3, [r3, #4]
 8000cfc:	4a52      	ldr	r2, [pc, #328]	; (8000e48 <HAL_RCC_ClockConfig+0x1c4>)
 8000cfe:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8000d02:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000d04:	4b50      	ldr	r3, [pc, #320]	; (8000e48 <HAL_RCC_ClockConfig+0x1c4>)
 8000d06:	685b      	ldr	r3, [r3, #4]
 8000d08:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	689b      	ldr	r3, [r3, #8]
 8000d10:	494d      	ldr	r1, [pc, #308]	; (8000e48 <HAL_RCC_ClockConfig+0x1c4>)
 8000d12:	4313      	orrs	r3, r2
 8000d14:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	681b      	ldr	r3, [r3, #0]
 8000d1a:	f003 0301 	and.w	r3, r3, #1
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d040      	beq.n	8000da4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	685b      	ldr	r3, [r3, #4]
 8000d26:	2b01      	cmp	r3, #1
 8000d28:	d107      	bne.n	8000d3a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000d2a:	4b47      	ldr	r3, [pc, #284]	; (8000e48 <HAL_RCC_ClockConfig+0x1c4>)
 8000d2c:	681b      	ldr	r3, [r3, #0]
 8000d2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	d115      	bne.n	8000d62 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8000d36:	2301      	movs	r3, #1
 8000d38:	e07f      	b.n	8000e3a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	685b      	ldr	r3, [r3, #4]
 8000d3e:	2b02      	cmp	r3, #2
 8000d40:	d107      	bne.n	8000d52 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000d42:	4b41      	ldr	r3, [pc, #260]	; (8000e48 <HAL_RCC_ClockConfig+0x1c4>)
 8000d44:	681b      	ldr	r3, [r3, #0]
 8000d46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	d109      	bne.n	8000d62 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8000d4e:	2301      	movs	r3, #1
 8000d50:	e073      	b.n	8000e3a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000d52:	4b3d      	ldr	r3, [pc, #244]	; (8000e48 <HAL_RCC_ClockConfig+0x1c4>)
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	f003 0302 	and.w	r3, r3, #2
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	d101      	bne.n	8000d62 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8000d5e:	2301      	movs	r3, #1
 8000d60:	e06b      	b.n	8000e3a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000d62:	4b39      	ldr	r3, [pc, #228]	; (8000e48 <HAL_RCC_ClockConfig+0x1c4>)
 8000d64:	685b      	ldr	r3, [r3, #4]
 8000d66:	f023 0203 	bic.w	r2, r3, #3
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	685b      	ldr	r3, [r3, #4]
 8000d6e:	4936      	ldr	r1, [pc, #216]	; (8000e48 <HAL_RCC_ClockConfig+0x1c4>)
 8000d70:	4313      	orrs	r3, r2
 8000d72:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8000d74:	f7ff faae 	bl	80002d4 <HAL_GetTick>
 8000d78:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000d7a:	e00a      	b.n	8000d92 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000d7c:	f7ff faaa 	bl	80002d4 <HAL_GetTick>
 8000d80:	4602      	mov	r2, r0
 8000d82:	68fb      	ldr	r3, [r7, #12]
 8000d84:	1ad3      	subs	r3, r2, r3
 8000d86:	f241 3288 	movw	r2, #5000	; 0x1388
 8000d8a:	4293      	cmp	r3, r2
 8000d8c:	d901      	bls.n	8000d92 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8000d8e:	2303      	movs	r3, #3
 8000d90:	e053      	b.n	8000e3a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000d92:	4b2d      	ldr	r3, [pc, #180]	; (8000e48 <HAL_RCC_ClockConfig+0x1c4>)
 8000d94:	685b      	ldr	r3, [r3, #4]
 8000d96:	f003 020c 	and.w	r2, r3, #12
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	685b      	ldr	r3, [r3, #4]
 8000d9e:	009b      	lsls	r3, r3, #2
 8000da0:	429a      	cmp	r2, r3
 8000da2:	d1eb      	bne.n	8000d7c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8000da4:	4b27      	ldr	r3, [pc, #156]	; (8000e44 <HAL_RCC_ClockConfig+0x1c0>)
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	f003 0307 	and.w	r3, r3, #7
 8000dac:	683a      	ldr	r2, [r7, #0]
 8000dae:	429a      	cmp	r2, r3
 8000db0:	d210      	bcs.n	8000dd4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000db2:	4b24      	ldr	r3, [pc, #144]	; (8000e44 <HAL_RCC_ClockConfig+0x1c0>)
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	f023 0207 	bic.w	r2, r3, #7
 8000dba:	4922      	ldr	r1, [pc, #136]	; (8000e44 <HAL_RCC_ClockConfig+0x1c0>)
 8000dbc:	683b      	ldr	r3, [r7, #0]
 8000dbe:	4313      	orrs	r3, r2
 8000dc0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8000dc2:	4b20      	ldr	r3, [pc, #128]	; (8000e44 <HAL_RCC_ClockConfig+0x1c0>)
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	f003 0307 	and.w	r3, r3, #7
 8000dca:	683a      	ldr	r2, [r7, #0]
 8000dcc:	429a      	cmp	r2, r3
 8000dce:	d001      	beq.n	8000dd4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8000dd0:	2301      	movs	r3, #1
 8000dd2:	e032      	b.n	8000e3a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	f003 0304 	and.w	r3, r3, #4
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	d008      	beq.n	8000df2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000de0:	4b19      	ldr	r3, [pc, #100]	; (8000e48 <HAL_RCC_ClockConfig+0x1c4>)
 8000de2:	685b      	ldr	r3, [r3, #4]
 8000de4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	68db      	ldr	r3, [r3, #12]
 8000dec:	4916      	ldr	r1, [pc, #88]	; (8000e48 <HAL_RCC_ClockConfig+0x1c4>)
 8000dee:	4313      	orrs	r3, r2
 8000df0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	f003 0308 	and.w	r3, r3, #8
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d009      	beq.n	8000e12 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8000dfe:	4b12      	ldr	r3, [pc, #72]	; (8000e48 <HAL_RCC_ClockConfig+0x1c4>)
 8000e00:	685b      	ldr	r3, [r3, #4]
 8000e02:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	691b      	ldr	r3, [r3, #16]
 8000e0a:	00db      	lsls	r3, r3, #3
 8000e0c:	490e      	ldr	r1, [pc, #56]	; (8000e48 <HAL_RCC_ClockConfig+0x1c4>)
 8000e0e:	4313      	orrs	r3, r2
 8000e10:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8000e12:	f000 f821 	bl	8000e58 <HAL_RCC_GetSysClockFreq>
 8000e16:	4601      	mov	r1, r0
 8000e18:	4b0b      	ldr	r3, [pc, #44]	; (8000e48 <HAL_RCC_ClockConfig+0x1c4>)
 8000e1a:	685b      	ldr	r3, [r3, #4]
 8000e1c:	091b      	lsrs	r3, r3, #4
 8000e1e:	f003 030f 	and.w	r3, r3, #15
 8000e22:	4a0a      	ldr	r2, [pc, #40]	; (8000e4c <HAL_RCC_ClockConfig+0x1c8>)
 8000e24:	5cd3      	ldrb	r3, [r2, r3]
 8000e26:	fa21 f303 	lsr.w	r3, r1, r3
 8000e2a:	4a09      	ldr	r2, [pc, #36]	; (8000e50 <HAL_RCC_ClockConfig+0x1cc>)
 8000e2c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8000e2e:	4b09      	ldr	r3, [pc, #36]	; (8000e54 <HAL_RCC_ClockConfig+0x1d0>)
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	4618      	mov	r0, r3
 8000e34:	f7ff fa0c 	bl	8000250 <HAL_InitTick>

  return HAL_OK;
 8000e38:	2300      	movs	r3, #0
}
 8000e3a:	4618      	mov	r0, r3
 8000e3c:	3710      	adds	r7, #16
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	bd80      	pop	{r7, pc}
 8000e42:	bf00      	nop
 8000e44:	40022000 	.word	0x40022000
 8000e48:	40021000 	.word	0x40021000
 8000e4c:	08001790 	.word	0x08001790
 8000e50:	20000008 	.word	0x20000008
 8000e54:	20000000 	.word	0x20000000

08000e58 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8000e58:	b490      	push	{r4, r7}
 8000e5a:	b08a      	sub	sp, #40	; 0x28
 8000e5c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8000e5e:	4b2a      	ldr	r3, [pc, #168]	; (8000f08 <HAL_RCC_GetSysClockFreq+0xb0>)
 8000e60:	1d3c      	adds	r4, r7, #4
 8000e62:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000e64:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8000e68:	4b28      	ldr	r3, [pc, #160]	; (8000f0c <HAL_RCC_GetSysClockFreq+0xb4>)
 8000e6a:	881b      	ldrh	r3, [r3, #0]
 8000e6c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8000e6e:	2300      	movs	r3, #0
 8000e70:	61fb      	str	r3, [r7, #28]
 8000e72:	2300      	movs	r3, #0
 8000e74:	61bb      	str	r3, [r7, #24]
 8000e76:	2300      	movs	r3, #0
 8000e78:	627b      	str	r3, [r7, #36]	; 0x24
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8000e7e:	2300      	movs	r3, #0
 8000e80:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8000e82:	4b23      	ldr	r3, [pc, #140]	; (8000f10 <HAL_RCC_GetSysClockFreq+0xb8>)
 8000e84:	685b      	ldr	r3, [r3, #4]
 8000e86:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8000e88:	69fb      	ldr	r3, [r7, #28]
 8000e8a:	f003 030c 	and.w	r3, r3, #12
 8000e8e:	2b04      	cmp	r3, #4
 8000e90:	d002      	beq.n	8000e98 <HAL_RCC_GetSysClockFreq+0x40>
 8000e92:	2b08      	cmp	r3, #8
 8000e94:	d003      	beq.n	8000e9e <HAL_RCC_GetSysClockFreq+0x46>
 8000e96:	e02d      	b.n	8000ef4 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8000e98:	4b1e      	ldr	r3, [pc, #120]	; (8000f14 <HAL_RCC_GetSysClockFreq+0xbc>)
 8000e9a:	623b      	str	r3, [r7, #32]
      break;
 8000e9c:	e02d      	b.n	8000efa <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8000e9e:	69fb      	ldr	r3, [r7, #28]
 8000ea0:	0c9b      	lsrs	r3, r3, #18
 8000ea2:	f003 030f 	and.w	r3, r3, #15
 8000ea6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8000eaa:	4413      	add	r3, r2
 8000eac:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8000eb0:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8000eb2:	69fb      	ldr	r3, [r7, #28]
 8000eb4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	d013      	beq.n	8000ee4 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8000ebc:	4b14      	ldr	r3, [pc, #80]	; (8000f10 <HAL_RCC_GetSysClockFreq+0xb8>)
 8000ebe:	685b      	ldr	r3, [r3, #4]
 8000ec0:	0c5b      	lsrs	r3, r3, #17
 8000ec2:	f003 0301 	and.w	r3, r3, #1
 8000ec6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8000eca:	4413      	add	r3, r2
 8000ecc:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8000ed0:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8000ed2:	697b      	ldr	r3, [r7, #20]
 8000ed4:	4a0f      	ldr	r2, [pc, #60]	; (8000f14 <HAL_RCC_GetSysClockFreq+0xbc>)
 8000ed6:	fb02 f203 	mul.w	r2, r2, r3
 8000eda:	69bb      	ldr	r3, [r7, #24]
 8000edc:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ee0:	627b      	str	r3, [r7, #36]	; 0x24
 8000ee2:	e004      	b.n	8000eee <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8000ee4:	697b      	ldr	r3, [r7, #20]
 8000ee6:	4a0c      	ldr	r2, [pc, #48]	; (8000f18 <HAL_RCC_GetSysClockFreq+0xc0>)
 8000ee8:	fb02 f303 	mul.w	r3, r2, r3
 8000eec:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8000eee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ef0:	623b      	str	r3, [r7, #32]
      break;
 8000ef2:	e002      	b.n	8000efa <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8000ef4:	4b07      	ldr	r3, [pc, #28]	; (8000f14 <HAL_RCC_GetSysClockFreq+0xbc>)
 8000ef6:	623b      	str	r3, [r7, #32]
      break;
 8000ef8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8000efa:	6a3b      	ldr	r3, [r7, #32]
}
 8000efc:	4618      	mov	r0, r3
 8000efe:	3728      	adds	r7, #40	; 0x28
 8000f00:	46bd      	mov	sp, r7
 8000f02:	bc90      	pop	{r4, r7}
 8000f04:	4770      	bx	lr
 8000f06:	bf00      	nop
 8000f08:	08001774 	.word	0x08001774
 8000f0c:	08001784 	.word	0x08001784
 8000f10:	40021000 	.word	0x40021000
 8000f14:	007a1200 	.word	0x007a1200
 8000f18:	003d0900 	.word	0x003d0900

08000f1c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8000f1c:	b480      	push	{r7}
 8000f1e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8000f20:	4b02      	ldr	r3, [pc, #8]	; (8000f2c <HAL_RCC_GetHCLKFreq+0x10>)
 8000f22:	681b      	ldr	r3, [r3, #0]
}
 8000f24:	4618      	mov	r0, r3
 8000f26:	46bd      	mov	sp, r7
 8000f28:	bc80      	pop	{r7}
 8000f2a:	4770      	bx	lr
 8000f2c:	20000008 	.word	0x20000008

08000f30 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8000f34:	f7ff fff2 	bl	8000f1c <HAL_RCC_GetHCLKFreq>
 8000f38:	4601      	mov	r1, r0
 8000f3a:	4b05      	ldr	r3, [pc, #20]	; (8000f50 <HAL_RCC_GetPCLK1Freq+0x20>)
 8000f3c:	685b      	ldr	r3, [r3, #4]
 8000f3e:	0a1b      	lsrs	r3, r3, #8
 8000f40:	f003 0307 	and.w	r3, r3, #7
 8000f44:	4a03      	ldr	r2, [pc, #12]	; (8000f54 <HAL_RCC_GetPCLK1Freq+0x24>)
 8000f46:	5cd3      	ldrb	r3, [r2, r3]
 8000f48:	fa21 f303 	lsr.w	r3, r1, r3
}
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	bd80      	pop	{r7, pc}
 8000f50:	40021000 	.word	0x40021000
 8000f54:	080017a0 	.word	0x080017a0

08000f58 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8000f5c:	f7ff ffde 	bl	8000f1c <HAL_RCC_GetHCLKFreq>
 8000f60:	4601      	mov	r1, r0
 8000f62:	4b05      	ldr	r3, [pc, #20]	; (8000f78 <HAL_RCC_GetPCLK2Freq+0x20>)
 8000f64:	685b      	ldr	r3, [r3, #4]
 8000f66:	0adb      	lsrs	r3, r3, #11
 8000f68:	f003 0307 	and.w	r3, r3, #7
 8000f6c:	4a03      	ldr	r2, [pc, #12]	; (8000f7c <HAL_RCC_GetPCLK2Freq+0x24>)
 8000f6e:	5cd3      	ldrb	r3, [r2, r3]
 8000f70:	fa21 f303 	lsr.w	r3, r1, r3
}
 8000f74:	4618      	mov	r0, r3
 8000f76:	bd80      	pop	{r7, pc}
 8000f78:	40021000 	.word	0x40021000
 8000f7c:	080017a0 	.word	0x080017a0

08000f80 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8000f80:	b480      	push	{r7}
 8000f82:	b085      	sub	sp, #20
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8000f88:	4b0a      	ldr	r3, [pc, #40]	; (8000fb4 <RCC_Delay+0x34>)
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	4a0a      	ldr	r2, [pc, #40]	; (8000fb8 <RCC_Delay+0x38>)
 8000f8e:	fba2 2303 	umull	r2, r3, r2, r3
 8000f92:	0a5b      	lsrs	r3, r3, #9
 8000f94:	687a      	ldr	r2, [r7, #4]
 8000f96:	fb02 f303 	mul.w	r3, r2, r3
 8000f9a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8000f9c:	bf00      	nop
  }
  while (Delay --);
 8000f9e:	68fb      	ldr	r3, [r7, #12]
 8000fa0:	1e5a      	subs	r2, r3, #1
 8000fa2:	60fa      	str	r2, [r7, #12]
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d1f9      	bne.n	8000f9c <RCC_Delay+0x1c>
}
 8000fa8:	bf00      	nop
 8000faa:	3714      	adds	r7, #20
 8000fac:	46bd      	mov	sp, r7
 8000fae:	bc80      	pop	{r7}
 8000fb0:	4770      	bx	lr
 8000fb2:	bf00      	nop
 8000fb4:	20000008 	.word	0x20000008
 8000fb8:	10624dd3 	.word	0x10624dd3

08000fbc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b082      	sub	sp, #8
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d101      	bne.n	8000fce <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8000fca:	2301      	movs	r3, #1
 8000fcc:	e03f      	b.n	800104e <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8000fd4:	b2db      	uxtb	r3, r3
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d106      	bne.n	8000fe8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	2200      	movs	r2, #0
 8000fde:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8000fe2:	6878      	ldr	r0, [r7, #4]
 8000fe4:	f000 fabe 	bl	8001564 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	2224      	movs	r2, #36	; 0x24
 8000fec:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	68da      	ldr	r2, [r3, #12]
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8000ffe:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001000:	6878      	ldr	r0, [r7, #4]
 8001002:	f000 f90b 	bl	800121c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	691a      	ldr	r2, [r3, #16]
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001014:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	695a      	ldr	r2, [r3, #20]
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001024:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	68da      	ldr	r2, [r3, #12]
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001034:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	2200      	movs	r2, #0
 800103a:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	2220      	movs	r2, #32
 8001040:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	2220      	movs	r2, #32
 8001048:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800104c:	2300      	movs	r3, #0
}
 800104e:	4618      	mov	r0, r3
 8001050:	3708      	adds	r7, #8
 8001052:	46bd      	mov	sp, r7
 8001054:	bd80      	pop	{r7, pc}

08001056 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001056:	b580      	push	{r7, lr}
 8001058:	b088      	sub	sp, #32
 800105a:	af02      	add	r7, sp, #8
 800105c:	60f8      	str	r0, [r7, #12]
 800105e:	60b9      	str	r1, [r7, #8]
 8001060:	603b      	str	r3, [r7, #0]
 8001062:	4613      	mov	r3, r2
 8001064:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8001066:	2300      	movs	r3, #0
 8001068:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800106a:	68fb      	ldr	r3, [r7, #12]
 800106c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001070:	b2db      	uxtb	r3, r3
 8001072:	2b20      	cmp	r3, #32
 8001074:	f040 8083 	bne.w	800117e <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8001078:	68bb      	ldr	r3, [r7, #8]
 800107a:	2b00      	cmp	r3, #0
 800107c:	d002      	beq.n	8001084 <HAL_UART_Transmit+0x2e>
 800107e:	88fb      	ldrh	r3, [r7, #6]
 8001080:	2b00      	cmp	r3, #0
 8001082:	d101      	bne.n	8001088 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8001084:	2301      	movs	r3, #1
 8001086:	e07b      	b.n	8001180 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001088:	68fb      	ldr	r3, [r7, #12]
 800108a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800108e:	2b01      	cmp	r3, #1
 8001090:	d101      	bne.n	8001096 <HAL_UART_Transmit+0x40>
 8001092:	2302      	movs	r3, #2
 8001094:	e074      	b.n	8001180 <HAL_UART_Transmit+0x12a>
 8001096:	68fb      	ldr	r3, [r7, #12]
 8001098:	2201      	movs	r2, #1
 800109a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800109e:	68fb      	ldr	r3, [r7, #12]
 80010a0:	2200      	movs	r2, #0
 80010a2:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80010a4:	68fb      	ldr	r3, [r7, #12]
 80010a6:	2221      	movs	r2, #33	; 0x21
 80010a8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80010ac:	f7ff f912 	bl	80002d4 <HAL_GetTick>
 80010b0:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80010b2:	68fb      	ldr	r3, [r7, #12]
 80010b4:	88fa      	ldrh	r2, [r7, #6]
 80010b6:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80010b8:	68fb      	ldr	r3, [r7, #12]
 80010ba:	88fa      	ldrh	r2, [r7, #6]
 80010bc:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80010be:	e042      	b.n	8001146 <HAL_UART_Transmit+0xf0>
    {
      huart->TxXferCount--;
 80010c0:	68fb      	ldr	r3, [r7, #12]
 80010c2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80010c4:	b29b      	uxth	r3, r3
 80010c6:	3b01      	subs	r3, #1
 80010c8:	b29a      	uxth	r2, r3
 80010ca:	68fb      	ldr	r3, [r7, #12]
 80010cc:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80010ce:	68fb      	ldr	r3, [r7, #12]
 80010d0:	689b      	ldr	r3, [r3, #8]
 80010d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80010d6:	d122      	bne.n	800111e <HAL_UART_Transmit+0xc8>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80010d8:	683b      	ldr	r3, [r7, #0]
 80010da:	9300      	str	r3, [sp, #0]
 80010dc:	697b      	ldr	r3, [r7, #20]
 80010de:	2200      	movs	r2, #0
 80010e0:	2180      	movs	r1, #128	; 0x80
 80010e2:	68f8      	ldr	r0, [r7, #12]
 80010e4:	f000 f850 	bl	8001188 <UART_WaitOnFlagUntilTimeout>
 80010e8:	4603      	mov	r3, r0
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d001      	beq.n	80010f2 <HAL_UART_Transmit+0x9c>
        {
          return HAL_TIMEOUT;
 80010ee:	2303      	movs	r3, #3
 80010f0:	e046      	b.n	8001180 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 80010f2:	68bb      	ldr	r3, [r7, #8]
 80010f4:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 80010f6:	693b      	ldr	r3, [r7, #16]
 80010f8:	881b      	ldrh	r3, [r3, #0]
 80010fa:	461a      	mov	r2, r3
 80010fc:	68fb      	ldr	r3, [r7, #12]
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001104:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8001106:	68fb      	ldr	r3, [r7, #12]
 8001108:	691b      	ldr	r3, [r3, #16]
 800110a:	2b00      	cmp	r3, #0
 800110c:	d103      	bne.n	8001116 <HAL_UART_Transmit+0xc0>
        {
          pData += 2U;
 800110e:	68bb      	ldr	r3, [r7, #8]
 8001110:	3302      	adds	r3, #2
 8001112:	60bb      	str	r3, [r7, #8]
 8001114:	e017      	b.n	8001146 <HAL_UART_Transmit+0xf0>
        }
        else
        {
          pData += 1U;
 8001116:	68bb      	ldr	r3, [r7, #8]
 8001118:	3301      	adds	r3, #1
 800111a:	60bb      	str	r3, [r7, #8]
 800111c:	e013      	b.n	8001146 <HAL_UART_Transmit+0xf0>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800111e:	683b      	ldr	r3, [r7, #0]
 8001120:	9300      	str	r3, [sp, #0]
 8001122:	697b      	ldr	r3, [r7, #20]
 8001124:	2200      	movs	r2, #0
 8001126:	2180      	movs	r1, #128	; 0x80
 8001128:	68f8      	ldr	r0, [r7, #12]
 800112a:	f000 f82d 	bl	8001188 <UART_WaitOnFlagUntilTimeout>
 800112e:	4603      	mov	r3, r0
 8001130:	2b00      	cmp	r3, #0
 8001132:	d001      	beq.n	8001138 <HAL_UART_Transmit+0xe2>
        {
          return HAL_TIMEOUT;
 8001134:	2303      	movs	r3, #3
 8001136:	e023      	b.n	8001180 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8001138:	68bb      	ldr	r3, [r7, #8]
 800113a:	1c5a      	adds	r2, r3, #1
 800113c:	60ba      	str	r2, [r7, #8]
 800113e:	781a      	ldrb	r2, [r3, #0]
 8001140:	68fb      	ldr	r3, [r7, #12]
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8001146:	68fb      	ldr	r3, [r7, #12]
 8001148:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800114a:	b29b      	uxth	r3, r3
 800114c:	2b00      	cmp	r3, #0
 800114e:	d1b7      	bne.n	80010c0 <HAL_UART_Transmit+0x6a>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001150:	683b      	ldr	r3, [r7, #0]
 8001152:	9300      	str	r3, [sp, #0]
 8001154:	697b      	ldr	r3, [r7, #20]
 8001156:	2200      	movs	r2, #0
 8001158:	2140      	movs	r1, #64	; 0x40
 800115a:	68f8      	ldr	r0, [r7, #12]
 800115c:	f000 f814 	bl	8001188 <UART_WaitOnFlagUntilTimeout>
 8001160:	4603      	mov	r3, r0
 8001162:	2b00      	cmp	r3, #0
 8001164:	d001      	beq.n	800116a <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8001166:	2303      	movs	r3, #3
 8001168:	e00a      	b.n	8001180 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800116a:	68fb      	ldr	r3, [r7, #12]
 800116c:	2220      	movs	r2, #32
 800116e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001172:	68fb      	ldr	r3, [r7, #12]
 8001174:	2200      	movs	r2, #0
 8001176:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 800117a:	2300      	movs	r3, #0
 800117c:	e000      	b.n	8001180 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 800117e:	2302      	movs	r3, #2
  }
}
 8001180:	4618      	mov	r0, r3
 8001182:	3718      	adds	r7, #24
 8001184:	46bd      	mov	sp, r7
 8001186:	bd80      	pop	{r7, pc}

08001188 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b084      	sub	sp, #16
 800118c:	af00      	add	r7, sp, #0
 800118e:	60f8      	str	r0, [r7, #12]
 8001190:	60b9      	str	r1, [r7, #8]
 8001192:	603b      	str	r3, [r7, #0]
 8001194:	4613      	mov	r3, r2
 8001196:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001198:	e02c      	b.n	80011f4 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800119a:	69bb      	ldr	r3, [r7, #24]
 800119c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80011a0:	d028      	beq.n	80011f4 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80011a2:	69bb      	ldr	r3, [r7, #24]
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d007      	beq.n	80011b8 <UART_WaitOnFlagUntilTimeout+0x30>
 80011a8:	f7ff f894 	bl	80002d4 <HAL_GetTick>
 80011ac:	4602      	mov	r2, r0
 80011ae:	683b      	ldr	r3, [r7, #0]
 80011b0:	1ad3      	subs	r3, r2, r3
 80011b2:	69ba      	ldr	r2, [r7, #24]
 80011b4:	429a      	cmp	r2, r3
 80011b6:	d21d      	bcs.n	80011f4 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80011b8:	68fb      	ldr	r3, [r7, #12]
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	68da      	ldr	r2, [r3, #12]
 80011be:	68fb      	ldr	r3, [r7, #12]
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80011c6:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80011c8:	68fb      	ldr	r3, [r7, #12]
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	695a      	ldr	r2, [r3, #20]
 80011ce:	68fb      	ldr	r3, [r7, #12]
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	f022 0201 	bic.w	r2, r2, #1
 80011d6:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80011d8:	68fb      	ldr	r3, [r7, #12]
 80011da:	2220      	movs	r2, #32
 80011dc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 80011e0:	68fb      	ldr	r3, [r7, #12]
 80011e2:	2220      	movs	r2, #32
 80011e4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80011e8:	68fb      	ldr	r3, [r7, #12]
 80011ea:	2200      	movs	r2, #0
 80011ec:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 80011f0:	2303      	movs	r3, #3
 80011f2:	e00f      	b.n	8001214 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80011f4:	68fb      	ldr	r3, [r7, #12]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	681a      	ldr	r2, [r3, #0]
 80011fa:	68bb      	ldr	r3, [r7, #8]
 80011fc:	4013      	ands	r3, r2
 80011fe:	68ba      	ldr	r2, [r7, #8]
 8001200:	429a      	cmp	r2, r3
 8001202:	bf0c      	ite	eq
 8001204:	2301      	moveq	r3, #1
 8001206:	2300      	movne	r3, #0
 8001208:	b2db      	uxtb	r3, r3
 800120a:	461a      	mov	r2, r3
 800120c:	79fb      	ldrb	r3, [r7, #7]
 800120e:	429a      	cmp	r2, r3
 8001210:	d0c3      	beq.n	800119a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001212:	2300      	movs	r3, #0
}
 8001214:	4618      	mov	r0, r3
 8001216:	3710      	adds	r7, #16
 8001218:	46bd      	mov	sp, r7
 800121a:	bd80      	pop	{r7, pc}

0800121c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	b084      	sub	sp, #16
 8001220:	af00      	add	r7, sp, #0
 8001222:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	691b      	ldr	r3, [r3, #16]
 800122a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	68da      	ldr	r2, [r3, #12]
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	430a      	orrs	r2, r1
 8001238:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	689a      	ldr	r2, [r3, #8]
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	691b      	ldr	r3, [r3, #16]
 8001242:	431a      	orrs	r2, r3
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	695b      	ldr	r3, [r3, #20]
 8001248:	4313      	orrs	r3, r2
 800124a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	68db      	ldr	r3, [r3, #12]
 8001252:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8001256:	f023 030c 	bic.w	r3, r3, #12
 800125a:	687a      	ldr	r2, [r7, #4]
 800125c:	6812      	ldr	r2, [r2, #0]
 800125e:	68f9      	ldr	r1, [r7, #12]
 8001260:	430b      	orrs	r3, r1
 8001262:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	695b      	ldr	r3, [r3, #20]
 800126a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	699a      	ldr	r2, [r3, #24]
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	430a      	orrs	r2, r1
 8001278:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	4a52      	ldr	r2, [pc, #328]	; (80013c8 <UART_SetConfig+0x1ac>)
 8001280:	4293      	cmp	r3, r2
 8001282:	d14e      	bne.n	8001322 <UART_SetConfig+0x106>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8001284:	f7ff fe68 	bl	8000f58 <HAL_RCC_GetPCLK2Freq>
 8001288:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800128a:	68ba      	ldr	r2, [r7, #8]
 800128c:	4613      	mov	r3, r2
 800128e:	009b      	lsls	r3, r3, #2
 8001290:	4413      	add	r3, r2
 8001292:	009a      	lsls	r2, r3, #2
 8001294:	441a      	add	r2, r3
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	685b      	ldr	r3, [r3, #4]
 800129a:	009b      	lsls	r3, r3, #2
 800129c:	fbb2 f3f3 	udiv	r3, r2, r3
 80012a0:	4a4a      	ldr	r2, [pc, #296]	; (80013cc <UART_SetConfig+0x1b0>)
 80012a2:	fba2 2303 	umull	r2, r3, r2, r3
 80012a6:	095b      	lsrs	r3, r3, #5
 80012a8:	0119      	lsls	r1, r3, #4
 80012aa:	68ba      	ldr	r2, [r7, #8]
 80012ac:	4613      	mov	r3, r2
 80012ae:	009b      	lsls	r3, r3, #2
 80012b0:	4413      	add	r3, r2
 80012b2:	009a      	lsls	r2, r3, #2
 80012b4:	441a      	add	r2, r3
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	685b      	ldr	r3, [r3, #4]
 80012ba:	009b      	lsls	r3, r3, #2
 80012bc:	fbb2 f2f3 	udiv	r2, r2, r3
 80012c0:	4b42      	ldr	r3, [pc, #264]	; (80013cc <UART_SetConfig+0x1b0>)
 80012c2:	fba3 0302 	umull	r0, r3, r3, r2
 80012c6:	095b      	lsrs	r3, r3, #5
 80012c8:	2064      	movs	r0, #100	; 0x64
 80012ca:	fb00 f303 	mul.w	r3, r0, r3
 80012ce:	1ad3      	subs	r3, r2, r3
 80012d0:	011b      	lsls	r3, r3, #4
 80012d2:	3332      	adds	r3, #50	; 0x32
 80012d4:	4a3d      	ldr	r2, [pc, #244]	; (80013cc <UART_SetConfig+0x1b0>)
 80012d6:	fba2 2303 	umull	r2, r3, r2, r3
 80012da:	095b      	lsrs	r3, r3, #5
 80012dc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80012e0:	4419      	add	r1, r3
 80012e2:	68ba      	ldr	r2, [r7, #8]
 80012e4:	4613      	mov	r3, r2
 80012e6:	009b      	lsls	r3, r3, #2
 80012e8:	4413      	add	r3, r2
 80012ea:	009a      	lsls	r2, r3, #2
 80012ec:	441a      	add	r2, r3
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	685b      	ldr	r3, [r3, #4]
 80012f2:	009b      	lsls	r3, r3, #2
 80012f4:	fbb2 f2f3 	udiv	r2, r2, r3
 80012f8:	4b34      	ldr	r3, [pc, #208]	; (80013cc <UART_SetConfig+0x1b0>)
 80012fa:	fba3 0302 	umull	r0, r3, r3, r2
 80012fe:	095b      	lsrs	r3, r3, #5
 8001300:	2064      	movs	r0, #100	; 0x64
 8001302:	fb00 f303 	mul.w	r3, r0, r3
 8001306:	1ad3      	subs	r3, r2, r3
 8001308:	011b      	lsls	r3, r3, #4
 800130a:	3332      	adds	r3, #50	; 0x32
 800130c:	4a2f      	ldr	r2, [pc, #188]	; (80013cc <UART_SetConfig+0x1b0>)
 800130e:	fba2 2303 	umull	r2, r3, r2, r3
 8001312:	095b      	lsrs	r3, r3, #5
 8001314:	f003 020f 	and.w	r2, r3, #15
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	440a      	add	r2, r1
 800131e:	609a      	str	r2, [r3, #8]
  {
    pclk = HAL_RCC_GetPCLK1Freq();
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#endif /* USART_CR1_OVER8 */
}
 8001320:	e04d      	b.n	80013be <UART_SetConfig+0x1a2>
    pclk = HAL_RCC_GetPCLK1Freq();
 8001322:	f7ff fe05 	bl	8000f30 <HAL_RCC_GetPCLK1Freq>
 8001326:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001328:	68ba      	ldr	r2, [r7, #8]
 800132a:	4613      	mov	r3, r2
 800132c:	009b      	lsls	r3, r3, #2
 800132e:	4413      	add	r3, r2
 8001330:	009a      	lsls	r2, r3, #2
 8001332:	441a      	add	r2, r3
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	685b      	ldr	r3, [r3, #4]
 8001338:	009b      	lsls	r3, r3, #2
 800133a:	fbb2 f3f3 	udiv	r3, r2, r3
 800133e:	4a23      	ldr	r2, [pc, #140]	; (80013cc <UART_SetConfig+0x1b0>)
 8001340:	fba2 2303 	umull	r2, r3, r2, r3
 8001344:	095b      	lsrs	r3, r3, #5
 8001346:	0119      	lsls	r1, r3, #4
 8001348:	68ba      	ldr	r2, [r7, #8]
 800134a:	4613      	mov	r3, r2
 800134c:	009b      	lsls	r3, r3, #2
 800134e:	4413      	add	r3, r2
 8001350:	009a      	lsls	r2, r3, #2
 8001352:	441a      	add	r2, r3
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	685b      	ldr	r3, [r3, #4]
 8001358:	009b      	lsls	r3, r3, #2
 800135a:	fbb2 f2f3 	udiv	r2, r2, r3
 800135e:	4b1b      	ldr	r3, [pc, #108]	; (80013cc <UART_SetConfig+0x1b0>)
 8001360:	fba3 0302 	umull	r0, r3, r3, r2
 8001364:	095b      	lsrs	r3, r3, #5
 8001366:	2064      	movs	r0, #100	; 0x64
 8001368:	fb00 f303 	mul.w	r3, r0, r3
 800136c:	1ad3      	subs	r3, r2, r3
 800136e:	011b      	lsls	r3, r3, #4
 8001370:	3332      	adds	r3, #50	; 0x32
 8001372:	4a16      	ldr	r2, [pc, #88]	; (80013cc <UART_SetConfig+0x1b0>)
 8001374:	fba2 2303 	umull	r2, r3, r2, r3
 8001378:	095b      	lsrs	r3, r3, #5
 800137a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800137e:	4419      	add	r1, r3
 8001380:	68ba      	ldr	r2, [r7, #8]
 8001382:	4613      	mov	r3, r2
 8001384:	009b      	lsls	r3, r3, #2
 8001386:	4413      	add	r3, r2
 8001388:	009a      	lsls	r2, r3, #2
 800138a:	441a      	add	r2, r3
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	685b      	ldr	r3, [r3, #4]
 8001390:	009b      	lsls	r3, r3, #2
 8001392:	fbb2 f2f3 	udiv	r2, r2, r3
 8001396:	4b0d      	ldr	r3, [pc, #52]	; (80013cc <UART_SetConfig+0x1b0>)
 8001398:	fba3 0302 	umull	r0, r3, r3, r2
 800139c:	095b      	lsrs	r3, r3, #5
 800139e:	2064      	movs	r0, #100	; 0x64
 80013a0:	fb00 f303 	mul.w	r3, r0, r3
 80013a4:	1ad3      	subs	r3, r2, r3
 80013a6:	011b      	lsls	r3, r3, #4
 80013a8:	3332      	adds	r3, #50	; 0x32
 80013aa:	4a08      	ldr	r2, [pc, #32]	; (80013cc <UART_SetConfig+0x1b0>)
 80013ac:	fba2 2303 	umull	r2, r3, r2, r3
 80013b0:	095b      	lsrs	r3, r3, #5
 80013b2:	f003 020f 	and.w	r2, r3, #15
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	440a      	add	r2, r1
 80013bc:	609a      	str	r2, [r3, #8]
}
 80013be:	bf00      	nop
 80013c0:	3710      	adds	r7, #16
 80013c2:	46bd      	mov	sp, r7
 80013c4:	bd80      	pop	{r7, pc}
 80013c6:	bf00      	nop
 80013c8:	40013800 	.word	0x40013800
 80013cc:	51eb851f 	.word	0x51eb851f

080013d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80013d4:	f7fe ff26 	bl	8000224 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80013d8:	f000 f810 	bl	80013fc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80013dc:	f000 f874 	bl	80014c8 <MX_GPIO_Init>
  MX_UART4_Init();
 80013e0:	f000 f848 	bl	8001474 <MX_UART4_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  HAL_UART_Transmit(&huart4, (unsigned char *)"Hello\n\r", 15 , HAL_MAX_DELAY);
 80013e4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80013e8:	220f      	movs	r2, #15
 80013ea:	4902      	ldr	r1, [pc, #8]	; (80013f4 <main+0x24>)
 80013ec:	4802      	ldr	r0, [pc, #8]	; (80013f8 <main+0x28>)
 80013ee:	f7ff fe32 	bl	8001056 <HAL_UART_Transmit>
 80013f2:	e7f7      	b.n	80013e4 <main+0x14>
 80013f4:	08001788 	.word	0x08001788
 80013f8:	2000002c 	.word	0x2000002c

080013fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b090      	sub	sp, #64	; 0x40
 8001400:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001402:	f107 0318 	add.w	r3, r7, #24
 8001406:	2228      	movs	r2, #40	; 0x28
 8001408:	2100      	movs	r1, #0
 800140a:	4618      	mov	r0, r3
 800140c:	f000 f99e 	bl	800174c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001410:	1d3b      	adds	r3, r7, #4
 8001412:	2200      	movs	r2, #0
 8001414:	601a      	str	r2, [r3, #0]
 8001416:	605a      	str	r2, [r3, #4]
 8001418:	609a      	str	r2, [r3, #8]
 800141a:	60da      	str	r2, [r3, #12]
 800141c:	611a      	str	r2, [r3, #16]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800141e:	2302      	movs	r3, #2
 8001420:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001422:	2301      	movs	r3, #1
 8001424:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001426:	2310      	movs	r3, #16
 8001428:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800142a:	2300      	movs	r3, #0
 800142c:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800142e:	f107 0318 	add.w	r3, r7, #24
 8001432:	4618      	mov	r0, r3
 8001434:	f7ff f9a6 	bl	8000784 <HAL_RCC_OscConfig>
 8001438:	4603      	mov	r3, r0
 800143a:	2b00      	cmp	r3, #0
 800143c:	d001      	beq.n	8001442 <SystemClock_Config+0x46>
  {
    Error_Handler();
 800143e:	f000 f859 	bl	80014f4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001442:	230f      	movs	r3, #15
 8001444:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001446:	2300      	movs	r3, #0
 8001448:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800144a:	2300      	movs	r3, #0
 800144c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800144e:	2300      	movs	r3, #0
 8001450:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001452:	2300      	movs	r3, #0
 8001454:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001456:	1d3b      	adds	r3, r7, #4
 8001458:	2100      	movs	r1, #0
 800145a:	4618      	mov	r0, r3
 800145c:	f7ff fc12 	bl	8000c84 <HAL_RCC_ClockConfig>
 8001460:	4603      	mov	r3, r0
 8001462:	2b00      	cmp	r3, #0
 8001464:	d001      	beq.n	800146a <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8001466:	f000 f845 	bl	80014f4 <Error_Handler>
  }
}
 800146a:	bf00      	nop
 800146c:	3740      	adds	r7, #64	; 0x40
 800146e:	46bd      	mov	sp, r7
 8001470:	bd80      	pop	{r7, pc}
	...

08001474 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8001478:	4b11      	ldr	r3, [pc, #68]	; (80014c0 <MX_UART4_Init+0x4c>)
 800147a:	4a12      	ldr	r2, [pc, #72]	; (80014c4 <MX_UART4_Init+0x50>)
 800147c:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 800147e:	4b10      	ldr	r3, [pc, #64]	; (80014c0 <MX_UART4_Init+0x4c>)
 8001480:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001484:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8001486:	4b0e      	ldr	r3, [pc, #56]	; (80014c0 <MX_UART4_Init+0x4c>)
 8001488:	2200      	movs	r2, #0
 800148a:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 800148c:	4b0c      	ldr	r3, [pc, #48]	; (80014c0 <MX_UART4_Init+0x4c>)
 800148e:	2200      	movs	r2, #0
 8001490:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8001492:	4b0b      	ldr	r3, [pc, #44]	; (80014c0 <MX_UART4_Init+0x4c>)
 8001494:	2200      	movs	r2, #0
 8001496:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8001498:	4b09      	ldr	r3, [pc, #36]	; (80014c0 <MX_UART4_Init+0x4c>)
 800149a:	220c      	movs	r2, #12
 800149c:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800149e:	4b08      	ldr	r3, [pc, #32]	; (80014c0 <MX_UART4_Init+0x4c>)
 80014a0:	2200      	movs	r2, #0
 80014a2:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80014a4:	4b06      	ldr	r3, [pc, #24]	; (80014c0 <MX_UART4_Init+0x4c>)
 80014a6:	2200      	movs	r2, #0
 80014a8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 80014aa:	4805      	ldr	r0, [pc, #20]	; (80014c0 <MX_UART4_Init+0x4c>)
 80014ac:	f7ff fd86 	bl	8000fbc <HAL_UART_Init>
 80014b0:	4603      	mov	r3, r0
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d001      	beq.n	80014ba <MX_UART4_Init+0x46>
  {
    Error_Handler();
 80014b6:	f000 f81d 	bl	80014f4 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 80014ba:	bf00      	nop
 80014bc:	bd80      	pop	{r7, pc}
 80014be:	bf00      	nop
 80014c0:	2000002c 	.word	0x2000002c
 80014c4:	40004c00 	.word	0x40004c00

080014c8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80014c8:	b480      	push	{r7}
 80014ca:	b083      	sub	sp, #12
 80014cc:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80014ce:	4b08      	ldr	r3, [pc, #32]	; (80014f0 <MX_GPIO_Init+0x28>)
 80014d0:	699b      	ldr	r3, [r3, #24]
 80014d2:	4a07      	ldr	r2, [pc, #28]	; (80014f0 <MX_GPIO_Init+0x28>)
 80014d4:	f043 0310 	orr.w	r3, r3, #16
 80014d8:	6193      	str	r3, [r2, #24]
 80014da:	4b05      	ldr	r3, [pc, #20]	; (80014f0 <MX_GPIO_Init+0x28>)
 80014dc:	699b      	ldr	r3, [r3, #24]
 80014de:	f003 0310 	and.w	r3, r3, #16
 80014e2:	607b      	str	r3, [r7, #4]
 80014e4:	687b      	ldr	r3, [r7, #4]

}
 80014e6:	bf00      	nop
 80014e8:	370c      	adds	r7, #12
 80014ea:	46bd      	mov	sp, r7
 80014ec:	bc80      	pop	{r7}
 80014ee:	4770      	bx	lr
 80014f0:	40021000 	.word	0x40021000

080014f4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80014f4:	b480      	push	{r7}
 80014f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80014f8:	bf00      	nop
 80014fa:	46bd      	mov	sp, r7
 80014fc:	bc80      	pop	{r7}
 80014fe:	4770      	bx	lr

08001500 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001500:	b480      	push	{r7}
 8001502:	b085      	sub	sp, #20
 8001504:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001506:	4b15      	ldr	r3, [pc, #84]	; (800155c <HAL_MspInit+0x5c>)
 8001508:	699b      	ldr	r3, [r3, #24]
 800150a:	4a14      	ldr	r2, [pc, #80]	; (800155c <HAL_MspInit+0x5c>)
 800150c:	f043 0301 	orr.w	r3, r3, #1
 8001510:	6193      	str	r3, [r2, #24]
 8001512:	4b12      	ldr	r3, [pc, #72]	; (800155c <HAL_MspInit+0x5c>)
 8001514:	699b      	ldr	r3, [r3, #24]
 8001516:	f003 0301 	and.w	r3, r3, #1
 800151a:	60bb      	str	r3, [r7, #8]
 800151c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800151e:	4b0f      	ldr	r3, [pc, #60]	; (800155c <HAL_MspInit+0x5c>)
 8001520:	69db      	ldr	r3, [r3, #28]
 8001522:	4a0e      	ldr	r2, [pc, #56]	; (800155c <HAL_MspInit+0x5c>)
 8001524:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001528:	61d3      	str	r3, [r2, #28]
 800152a:	4b0c      	ldr	r3, [pc, #48]	; (800155c <HAL_MspInit+0x5c>)
 800152c:	69db      	ldr	r3, [r3, #28]
 800152e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001532:	607b      	str	r3, [r7, #4]
 8001534:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled 
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8001536:	4b0a      	ldr	r3, [pc, #40]	; (8001560 <HAL_MspInit+0x60>)
 8001538:	685b      	ldr	r3, [r3, #4]
 800153a:	60fb      	str	r3, [r7, #12]
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001542:	60fb      	str	r3, [r7, #12]
 8001544:	68fb      	ldr	r3, [r7, #12]
 8001546:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800154a:	60fb      	str	r3, [r7, #12]
 800154c:	4a04      	ldr	r2, [pc, #16]	; (8001560 <HAL_MspInit+0x60>)
 800154e:	68fb      	ldr	r3, [r7, #12]
 8001550:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001552:	bf00      	nop
 8001554:	3714      	adds	r7, #20
 8001556:	46bd      	mov	sp, r7
 8001558:	bc80      	pop	{r7}
 800155a:	4770      	bx	lr
 800155c:	40021000 	.word	0x40021000
 8001560:	40010000 	.word	0x40010000

08001564 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	b088      	sub	sp, #32
 8001568:	af00      	add	r7, sp, #0
 800156a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800156c:	f107 0310 	add.w	r3, r7, #16
 8001570:	2200      	movs	r2, #0
 8001572:	601a      	str	r2, [r3, #0]
 8001574:	605a      	str	r2, [r3, #4]
 8001576:	609a      	str	r2, [r3, #8]
 8001578:	60da      	str	r2, [r3, #12]
  if(huart->Instance==UART4)
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	4a1c      	ldr	r2, [pc, #112]	; (80015f0 <HAL_UART_MspInit+0x8c>)
 8001580:	4293      	cmp	r3, r2
 8001582:	d131      	bne.n	80015e8 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8001584:	4b1b      	ldr	r3, [pc, #108]	; (80015f4 <HAL_UART_MspInit+0x90>)
 8001586:	69db      	ldr	r3, [r3, #28]
 8001588:	4a1a      	ldr	r2, [pc, #104]	; (80015f4 <HAL_UART_MspInit+0x90>)
 800158a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800158e:	61d3      	str	r3, [r2, #28]
 8001590:	4b18      	ldr	r3, [pc, #96]	; (80015f4 <HAL_UART_MspInit+0x90>)
 8001592:	69db      	ldr	r3, [r3, #28]
 8001594:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001598:	60fb      	str	r3, [r7, #12]
 800159a:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800159c:	4b15      	ldr	r3, [pc, #84]	; (80015f4 <HAL_UART_MspInit+0x90>)
 800159e:	699b      	ldr	r3, [r3, #24]
 80015a0:	4a14      	ldr	r2, [pc, #80]	; (80015f4 <HAL_UART_MspInit+0x90>)
 80015a2:	f043 0310 	orr.w	r3, r3, #16
 80015a6:	6193      	str	r3, [r2, #24]
 80015a8:	4b12      	ldr	r3, [pc, #72]	; (80015f4 <HAL_UART_MspInit+0x90>)
 80015aa:	699b      	ldr	r3, [r3, #24]
 80015ac:	f003 0310 	and.w	r3, r3, #16
 80015b0:	60bb      	str	r3, [r7, #8]
 80015b2:	68bb      	ldr	r3, [r7, #8]
    /**UART4 GPIO Configuration    
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80015b4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80015b8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015ba:	2302      	movs	r3, #2
 80015bc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80015be:	2303      	movs	r3, #3
 80015c0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015c2:	f107 0310 	add.w	r3, r7, #16
 80015c6:	4619      	mov	r1, r3
 80015c8:	480b      	ldr	r0, [pc, #44]	; (80015f8 <HAL_UART_MspInit+0x94>)
 80015ca:	f7fe ff71 	bl	80004b0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80015ce:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80015d2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80015d4:	2300      	movs	r3, #0
 80015d6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015d8:	2300      	movs	r3, #0
 80015da:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015dc:	f107 0310 	add.w	r3, r7, #16
 80015e0:	4619      	mov	r1, r3
 80015e2:	4805      	ldr	r0, [pc, #20]	; (80015f8 <HAL_UART_MspInit+0x94>)
 80015e4:	f7fe ff64 	bl	80004b0 <HAL_GPIO_Init>
  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }

}
 80015e8:	bf00      	nop
 80015ea:	3720      	adds	r7, #32
 80015ec:	46bd      	mov	sp, r7
 80015ee:	bd80      	pop	{r7, pc}
 80015f0:	40004c00 	.word	0x40004c00
 80015f4:	40021000 	.word	0x40021000
 80015f8:	40011000 	.word	0x40011000

080015fc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80015fc:	b480      	push	{r7}
 80015fe:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001600:	bf00      	nop
 8001602:	46bd      	mov	sp, r7
 8001604:	bc80      	pop	{r7}
 8001606:	4770      	bx	lr

08001608 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001608:	b480      	push	{r7}
 800160a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800160c:	e7fe      	b.n	800160c <HardFault_Handler+0x4>

0800160e <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800160e:	b480      	push	{r7}
 8001610:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001612:	e7fe      	b.n	8001612 <MemManage_Handler+0x4>

08001614 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001614:	b480      	push	{r7}
 8001616:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001618:	e7fe      	b.n	8001618 <BusFault_Handler+0x4>

0800161a <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800161a:	b480      	push	{r7}
 800161c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800161e:	e7fe      	b.n	800161e <UsageFault_Handler+0x4>

08001620 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001620:	b480      	push	{r7}
 8001622:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001624:	bf00      	nop
 8001626:	46bd      	mov	sp, r7
 8001628:	bc80      	pop	{r7}
 800162a:	4770      	bx	lr

0800162c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800162c:	b480      	push	{r7}
 800162e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001630:	bf00      	nop
 8001632:	46bd      	mov	sp, r7
 8001634:	bc80      	pop	{r7}
 8001636:	4770      	bx	lr

08001638 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001638:	b480      	push	{r7}
 800163a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800163c:	bf00      	nop
 800163e:	46bd      	mov	sp, r7
 8001640:	bc80      	pop	{r7}
 8001642:	4770      	bx	lr

08001644 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001648:	f7fe fe32 	bl	80002b0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800164c:	bf00      	nop
 800164e:	bd80      	pop	{r7, pc}

08001650 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001650:	b480      	push	{r7}
 8001652:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8001654:	4b15      	ldr	r3, [pc, #84]	; (80016ac <SystemInit+0x5c>)
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	4a14      	ldr	r2, [pc, #80]	; (80016ac <SystemInit+0x5c>)
 800165a:	f043 0301 	orr.w	r3, r3, #1
 800165e:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8001660:	4b12      	ldr	r3, [pc, #72]	; (80016ac <SystemInit+0x5c>)
 8001662:	685a      	ldr	r2, [r3, #4]
 8001664:	4911      	ldr	r1, [pc, #68]	; (80016ac <SystemInit+0x5c>)
 8001666:	4b12      	ldr	r3, [pc, #72]	; (80016b0 <SystemInit+0x60>)
 8001668:	4013      	ands	r3, r2
 800166a:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 800166c:	4b0f      	ldr	r3, [pc, #60]	; (80016ac <SystemInit+0x5c>)
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	4a0e      	ldr	r2, [pc, #56]	; (80016ac <SystemInit+0x5c>)
 8001672:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8001676:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800167a:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800167c:	4b0b      	ldr	r3, [pc, #44]	; (80016ac <SystemInit+0x5c>)
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	4a0a      	ldr	r2, [pc, #40]	; (80016ac <SystemInit+0x5c>)
 8001682:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001686:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8001688:	4b08      	ldr	r3, [pc, #32]	; (80016ac <SystemInit+0x5c>)
 800168a:	685b      	ldr	r3, [r3, #4]
 800168c:	4a07      	ldr	r2, [pc, #28]	; (80016ac <SystemInit+0x5c>)
 800168e:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8001692:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8001694:	4b05      	ldr	r3, [pc, #20]	; (80016ac <SystemInit+0x5c>)
 8001696:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 800169a:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 800169c:	4b05      	ldr	r3, [pc, #20]	; (80016b4 <SystemInit+0x64>)
 800169e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80016a2:	609a      	str	r2, [r3, #8]
#endif 
}
 80016a4:	bf00      	nop
 80016a6:	46bd      	mov	sp, r7
 80016a8:	bc80      	pop	{r7}
 80016aa:	4770      	bx	lr
 80016ac:	40021000 	.word	0x40021000
 80016b0:	f8ff0000 	.word	0xf8ff0000
 80016b4:	e000ed00 	.word	0xe000ed00

080016b8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80016b8:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80016ba:	e003      	b.n	80016c4 <LoopCopyDataInit>

080016bc <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80016bc:	4b0b      	ldr	r3, [pc, #44]	; (80016ec <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80016be:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80016c0:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80016c2:	3104      	adds	r1, #4

080016c4 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80016c4:	480a      	ldr	r0, [pc, #40]	; (80016f0 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80016c6:	4b0b      	ldr	r3, [pc, #44]	; (80016f4 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80016c8:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80016ca:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80016cc:	d3f6      	bcc.n	80016bc <CopyDataInit>
  ldr r2, =_sbss
 80016ce:	4a0a      	ldr	r2, [pc, #40]	; (80016f8 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80016d0:	e002      	b.n	80016d8 <LoopFillZerobss>

080016d2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80016d2:	2300      	movs	r3, #0
  str r3, [r2], #4
 80016d4:	f842 3b04 	str.w	r3, [r2], #4

080016d8 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80016d8:	4b08      	ldr	r3, [pc, #32]	; (80016fc <LoopFillZerobss+0x24>)
  cmp r2, r3
 80016da:	429a      	cmp	r2, r3
  bcc FillZerobss
 80016dc:	d3f9      	bcc.n	80016d2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80016de:	f7ff ffb7 	bl	8001650 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80016e2:	f000 f80f 	bl	8001704 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80016e6:	f7ff fe73 	bl	80013d0 <main>
  bx lr
 80016ea:	4770      	bx	lr
  ldr r3, =_sidata
 80016ec:	080017b0 	.word	0x080017b0
  ldr r0, =_sdata
 80016f0:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80016f4:	2000000c 	.word	0x2000000c
  ldr r2, =_sbss
 80016f8:	2000000c 	.word	0x2000000c
  ldr r3, = _ebss
 80016fc:	2000006c 	.word	0x2000006c

08001700 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001700:	e7fe      	b.n	8001700 <ADC1_2_IRQHandler>
	...

08001704 <__libc_init_array>:
 8001704:	b570      	push	{r4, r5, r6, lr}
 8001706:	2500      	movs	r5, #0
 8001708:	4e0c      	ldr	r6, [pc, #48]	; (800173c <__libc_init_array+0x38>)
 800170a:	4c0d      	ldr	r4, [pc, #52]	; (8001740 <__libc_init_array+0x3c>)
 800170c:	1ba4      	subs	r4, r4, r6
 800170e:	10a4      	asrs	r4, r4, #2
 8001710:	42a5      	cmp	r5, r4
 8001712:	d109      	bne.n	8001728 <__libc_init_array+0x24>
 8001714:	f000 f822 	bl	800175c <_init>
 8001718:	2500      	movs	r5, #0
 800171a:	4e0a      	ldr	r6, [pc, #40]	; (8001744 <__libc_init_array+0x40>)
 800171c:	4c0a      	ldr	r4, [pc, #40]	; (8001748 <__libc_init_array+0x44>)
 800171e:	1ba4      	subs	r4, r4, r6
 8001720:	10a4      	asrs	r4, r4, #2
 8001722:	42a5      	cmp	r5, r4
 8001724:	d105      	bne.n	8001732 <__libc_init_array+0x2e>
 8001726:	bd70      	pop	{r4, r5, r6, pc}
 8001728:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800172c:	4798      	blx	r3
 800172e:	3501      	adds	r5, #1
 8001730:	e7ee      	b.n	8001710 <__libc_init_array+0xc>
 8001732:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001736:	4798      	blx	r3
 8001738:	3501      	adds	r5, #1
 800173a:	e7f2      	b.n	8001722 <__libc_init_array+0x1e>
 800173c:	080017a8 	.word	0x080017a8
 8001740:	080017a8 	.word	0x080017a8
 8001744:	080017a8 	.word	0x080017a8
 8001748:	080017ac 	.word	0x080017ac

0800174c <memset>:
 800174c:	4603      	mov	r3, r0
 800174e:	4402      	add	r2, r0
 8001750:	4293      	cmp	r3, r2
 8001752:	d100      	bne.n	8001756 <memset+0xa>
 8001754:	4770      	bx	lr
 8001756:	f803 1b01 	strb.w	r1, [r3], #1
 800175a:	e7f9      	b.n	8001750 <memset+0x4>

0800175c <_init>:
 800175c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800175e:	bf00      	nop
 8001760:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001762:	bc08      	pop	{r3}
 8001764:	469e      	mov	lr, r3
 8001766:	4770      	bx	lr

08001768 <_fini>:
 8001768:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800176a:	bf00      	nop
 800176c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800176e:	bc08      	pop	{r3}
 8001770:	469e      	mov	lr, r3
 8001772:	4770      	bx	lr
