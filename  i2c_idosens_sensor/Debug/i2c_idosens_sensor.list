
i2c_idosens_sensor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002e18  0800013c  0800013c  0001013c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000007c  08002f54  08002f54  00012f54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002fd0  08002fd0  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08002fd0  08002fd0  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002fd0  08002fd0  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002fd0  08002fd0  00012fd0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002fd4  08002fd4  00012fd4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08002fd8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000c4  20000070  08003048  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000134  08003048  00020134  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008746  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001570  00000000  00000000  000287df  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000898  00000000  00000000  00029d50  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000800  00000000  00000000  0002a5e8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00013e5d  00000000  00000000  0002ade8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00006ea4  00000000  00000000  0003ec45  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0007a6b9  00000000  00000000  00045ae9  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000c01a2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002668  00000000  00000000  000c0220  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800013c <__do_global_dtors_aux>:
 800013c:	b510      	push	{r4, lr}
 800013e:	4c05      	ldr	r4, [pc, #20]	; (8000154 <__do_global_dtors_aux+0x18>)
 8000140:	7823      	ldrb	r3, [r4, #0]
 8000142:	b933      	cbnz	r3, 8000152 <__do_global_dtors_aux+0x16>
 8000144:	4b04      	ldr	r3, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x1c>)
 8000146:	b113      	cbz	r3, 800014e <__do_global_dtors_aux+0x12>
 8000148:	4804      	ldr	r0, [pc, #16]	; (800015c <__do_global_dtors_aux+0x20>)
 800014a:	f3af 8000 	nop.w
 800014e:	2301      	movs	r3, #1
 8000150:	7023      	strb	r3, [r4, #0]
 8000152:	bd10      	pop	{r4, pc}
 8000154:	20000070 	.word	0x20000070
 8000158:	00000000 	.word	0x00000000
 800015c:	08002f3c 	.word	0x08002f3c

08000160 <frame_dummy>:
 8000160:	b508      	push	{r3, lr}
 8000162:	4b03      	ldr	r3, [pc, #12]	; (8000170 <frame_dummy+0x10>)
 8000164:	b11b      	cbz	r3, 800016e <frame_dummy+0xe>
 8000166:	4903      	ldr	r1, [pc, #12]	; (8000174 <frame_dummy+0x14>)
 8000168:	4803      	ldr	r0, [pc, #12]	; (8000178 <frame_dummy+0x18>)
 800016a:	f3af 8000 	nop.w
 800016e:	bd08      	pop	{r3, pc}
 8000170:	00000000 	.word	0x00000000
 8000174:	20000074 	.word	0x20000074
 8000178:	08002f3c 	.word	0x08002f3c

0800017c <strlen>:
 800017c:	4603      	mov	r3, r0
 800017e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000182:	2a00      	cmp	r2, #0
 8000184:	d1fb      	bne.n	800017e <strlen+0x2>
 8000186:	1a18      	subs	r0, r3, r0
 8000188:	3801      	subs	r0, #1
 800018a:	4770      	bx	lr

0800018c <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800018c:	b580      	push	{r7, lr}
 800018e:	b082      	sub	sp, #8
 8000190:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000192:	2300      	movs	r3, #0
 8000194:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000196:	2003      	movs	r0, #3
 8000198:	f000 f938 	bl	800040c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800019c:	2000      	movs	r0, #0
 800019e:	f000 f80d 	bl	80001bc <HAL_InitTick>
 80001a2:	4603      	mov	r3, r0
 80001a4:	2b00      	cmp	r3, #0
 80001a6:	d002      	beq.n	80001ae <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80001a8:	2301      	movs	r3, #1
 80001aa:	71fb      	strb	r3, [r7, #7]
 80001ac:	e001      	b.n	80001b2 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80001ae:	f002 f95f 	bl	8002470 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80001b2:	79fb      	ldrb	r3, [r7, #7]
}
 80001b4:	4618      	mov	r0, r3
 80001b6:	3708      	adds	r7, #8
 80001b8:	46bd      	mov	sp, r7
 80001ba:	bd80      	pop	{r7, pc}

080001bc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80001bc:	b580      	push	{r7, lr}
 80001be:	b084      	sub	sp, #16
 80001c0:	af00      	add	r7, sp, #0
 80001c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80001c4:	2300      	movs	r3, #0
 80001c6:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80001c8:	4b16      	ldr	r3, [pc, #88]	; (8000224 <HAL_InitTick+0x68>)
 80001ca:	681b      	ldr	r3, [r3, #0]
 80001cc:	2b00      	cmp	r3, #0
 80001ce:	d022      	beq.n	8000216 <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80001d0:	4b15      	ldr	r3, [pc, #84]	; (8000228 <HAL_InitTick+0x6c>)
 80001d2:	681a      	ldr	r2, [r3, #0]
 80001d4:	4b13      	ldr	r3, [pc, #76]	; (8000224 <HAL_InitTick+0x68>)
 80001d6:	681b      	ldr	r3, [r3, #0]
 80001d8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80001dc:	fbb1 f3f3 	udiv	r3, r1, r3
 80001e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80001e4:	4618      	mov	r0, r3
 80001e6:	f000 f938 	bl	800045a <HAL_SYSTICK_Config>
 80001ea:	4603      	mov	r3, r0
 80001ec:	2b00      	cmp	r3, #0
 80001ee:	d10f      	bne.n	8000210 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80001f0:	687b      	ldr	r3, [r7, #4]
 80001f2:	2b0f      	cmp	r3, #15
 80001f4:	d809      	bhi.n	800020a <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80001f6:	2200      	movs	r2, #0
 80001f8:	6879      	ldr	r1, [r7, #4]
 80001fa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80001fe:	f000 f910 	bl	8000422 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000202:	4a0a      	ldr	r2, [pc, #40]	; (800022c <HAL_InitTick+0x70>)
 8000204:	687b      	ldr	r3, [r7, #4]
 8000206:	6013      	str	r3, [r2, #0]
 8000208:	e007      	b.n	800021a <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800020a:	2301      	movs	r3, #1
 800020c:	73fb      	strb	r3, [r7, #15]
 800020e:	e004      	b.n	800021a <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000210:	2301      	movs	r3, #1
 8000212:	73fb      	strb	r3, [r7, #15]
 8000214:	e001      	b.n	800021a <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000216:	2301      	movs	r3, #1
 8000218:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800021a:	7bfb      	ldrb	r3, [r7, #15]
}
 800021c:	4618      	mov	r0, r3
 800021e:	3710      	adds	r7, #16
 8000220:	46bd      	mov	sp, r7
 8000222:	bd80      	pop	{r7, pc}
 8000224:	20000004 	.word	0x20000004
 8000228:	20000008 	.word	0x20000008
 800022c:	20000000 	.word	0x20000000

08000230 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000230:	b480      	push	{r7}
 8000232:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000234:	4b05      	ldr	r3, [pc, #20]	; (800024c <HAL_IncTick+0x1c>)
 8000236:	681a      	ldr	r2, [r3, #0]
 8000238:	4b05      	ldr	r3, [pc, #20]	; (8000250 <HAL_IncTick+0x20>)
 800023a:	681b      	ldr	r3, [r3, #0]
 800023c:	4413      	add	r3, r2
 800023e:	4a03      	ldr	r2, [pc, #12]	; (800024c <HAL_IncTick+0x1c>)
 8000240:	6013      	str	r3, [r2, #0]
}
 8000242:	bf00      	nop
 8000244:	46bd      	mov	sp, r7
 8000246:	bc80      	pop	{r7}
 8000248:	4770      	bx	lr
 800024a:	bf00      	nop
 800024c:	20000098 	.word	0x20000098
 8000250:	20000004 	.word	0x20000004

08000254 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000254:	b480      	push	{r7}
 8000256:	af00      	add	r7, sp, #0
  return uwTick;
 8000258:	4b02      	ldr	r3, [pc, #8]	; (8000264 <HAL_GetTick+0x10>)
 800025a:	681b      	ldr	r3, [r3, #0]
}
 800025c:	4618      	mov	r0, r3
 800025e:	46bd      	mov	sp, r7
 8000260:	bc80      	pop	{r7}
 8000262:	4770      	bx	lr
 8000264:	20000098 	.word	0x20000098

08000268 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000268:	b580      	push	{r7, lr}
 800026a:	b084      	sub	sp, #16
 800026c:	af00      	add	r7, sp, #0
 800026e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000270:	f7ff fff0 	bl	8000254 <HAL_GetTick>
 8000274:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000276:	687b      	ldr	r3, [r7, #4]
 8000278:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800027a:	68fb      	ldr	r3, [r7, #12]
 800027c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000280:	d004      	beq.n	800028c <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8000282:	4b09      	ldr	r3, [pc, #36]	; (80002a8 <HAL_Delay+0x40>)
 8000284:	681b      	ldr	r3, [r3, #0]
 8000286:	68fa      	ldr	r2, [r7, #12]
 8000288:	4413      	add	r3, r2
 800028a:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800028c:	bf00      	nop
 800028e:	f7ff ffe1 	bl	8000254 <HAL_GetTick>
 8000292:	4602      	mov	r2, r0
 8000294:	68bb      	ldr	r3, [r7, #8]
 8000296:	1ad3      	subs	r3, r2, r3
 8000298:	68fa      	ldr	r2, [r7, #12]
 800029a:	429a      	cmp	r2, r3
 800029c:	d8f7      	bhi.n	800028e <HAL_Delay+0x26>
  {
  }
}
 800029e:	bf00      	nop
 80002a0:	3710      	adds	r7, #16
 80002a2:	46bd      	mov	sp, r7
 80002a4:	bd80      	pop	{r7, pc}
 80002a6:	bf00      	nop
 80002a8:	20000004 	.word	0x20000004

080002ac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80002ac:	b480      	push	{r7}
 80002ae:	b085      	sub	sp, #20
 80002b0:	af00      	add	r7, sp, #0
 80002b2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80002b4:	687b      	ldr	r3, [r7, #4]
 80002b6:	f003 0307 	and.w	r3, r3, #7
 80002ba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80002bc:	4b0c      	ldr	r3, [pc, #48]	; (80002f0 <__NVIC_SetPriorityGrouping+0x44>)
 80002be:	68db      	ldr	r3, [r3, #12]
 80002c0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80002c2:	68ba      	ldr	r2, [r7, #8]
 80002c4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80002c8:	4013      	ands	r3, r2
 80002ca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80002cc:	68fb      	ldr	r3, [r7, #12]
 80002ce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80002d0:	68bb      	ldr	r3, [r7, #8]
 80002d2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80002d4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80002d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80002dc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80002de:	4a04      	ldr	r2, [pc, #16]	; (80002f0 <__NVIC_SetPriorityGrouping+0x44>)
 80002e0:	68bb      	ldr	r3, [r7, #8]
 80002e2:	60d3      	str	r3, [r2, #12]
}
 80002e4:	bf00      	nop
 80002e6:	3714      	adds	r7, #20
 80002e8:	46bd      	mov	sp, r7
 80002ea:	bc80      	pop	{r7}
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop
 80002f0:	e000ed00 	.word	0xe000ed00

080002f4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80002f4:	b480      	push	{r7}
 80002f6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80002f8:	4b04      	ldr	r3, [pc, #16]	; (800030c <__NVIC_GetPriorityGrouping+0x18>)
 80002fa:	68db      	ldr	r3, [r3, #12]
 80002fc:	0a1b      	lsrs	r3, r3, #8
 80002fe:	f003 0307 	and.w	r3, r3, #7
}
 8000302:	4618      	mov	r0, r3
 8000304:	46bd      	mov	sp, r7
 8000306:	bc80      	pop	{r7}
 8000308:	4770      	bx	lr
 800030a:	bf00      	nop
 800030c:	e000ed00 	.word	0xe000ed00

08000310 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000310:	b480      	push	{r7}
 8000312:	b083      	sub	sp, #12
 8000314:	af00      	add	r7, sp, #0
 8000316:	4603      	mov	r3, r0
 8000318:	6039      	str	r1, [r7, #0]
 800031a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800031c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000320:	2b00      	cmp	r3, #0
 8000322:	db0a      	blt.n	800033a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000324:	683b      	ldr	r3, [r7, #0]
 8000326:	b2da      	uxtb	r2, r3
 8000328:	490c      	ldr	r1, [pc, #48]	; (800035c <__NVIC_SetPriority+0x4c>)
 800032a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800032e:	0112      	lsls	r2, r2, #4
 8000330:	b2d2      	uxtb	r2, r2
 8000332:	440b      	add	r3, r1
 8000334:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000338:	e00a      	b.n	8000350 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800033a:	683b      	ldr	r3, [r7, #0]
 800033c:	b2da      	uxtb	r2, r3
 800033e:	4908      	ldr	r1, [pc, #32]	; (8000360 <__NVIC_SetPriority+0x50>)
 8000340:	79fb      	ldrb	r3, [r7, #7]
 8000342:	f003 030f 	and.w	r3, r3, #15
 8000346:	3b04      	subs	r3, #4
 8000348:	0112      	lsls	r2, r2, #4
 800034a:	b2d2      	uxtb	r2, r2
 800034c:	440b      	add	r3, r1
 800034e:	761a      	strb	r2, [r3, #24]
}
 8000350:	bf00      	nop
 8000352:	370c      	adds	r7, #12
 8000354:	46bd      	mov	sp, r7
 8000356:	bc80      	pop	{r7}
 8000358:	4770      	bx	lr
 800035a:	bf00      	nop
 800035c:	e000e100 	.word	0xe000e100
 8000360:	e000ed00 	.word	0xe000ed00

08000364 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000364:	b480      	push	{r7}
 8000366:	b089      	sub	sp, #36	; 0x24
 8000368:	af00      	add	r7, sp, #0
 800036a:	60f8      	str	r0, [r7, #12]
 800036c:	60b9      	str	r1, [r7, #8]
 800036e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000370:	68fb      	ldr	r3, [r7, #12]
 8000372:	f003 0307 	and.w	r3, r3, #7
 8000376:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000378:	69fb      	ldr	r3, [r7, #28]
 800037a:	f1c3 0307 	rsb	r3, r3, #7
 800037e:	2b04      	cmp	r3, #4
 8000380:	bf28      	it	cs
 8000382:	2304      	movcs	r3, #4
 8000384:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000386:	69fb      	ldr	r3, [r7, #28]
 8000388:	3304      	adds	r3, #4
 800038a:	2b06      	cmp	r3, #6
 800038c:	d902      	bls.n	8000394 <NVIC_EncodePriority+0x30>
 800038e:	69fb      	ldr	r3, [r7, #28]
 8000390:	3b03      	subs	r3, #3
 8000392:	e000      	b.n	8000396 <NVIC_EncodePriority+0x32>
 8000394:	2300      	movs	r3, #0
 8000396:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000398:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800039c:	69bb      	ldr	r3, [r7, #24]
 800039e:	fa02 f303 	lsl.w	r3, r2, r3
 80003a2:	43da      	mvns	r2, r3
 80003a4:	68bb      	ldr	r3, [r7, #8]
 80003a6:	401a      	ands	r2, r3
 80003a8:	697b      	ldr	r3, [r7, #20]
 80003aa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80003ac:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80003b0:	697b      	ldr	r3, [r7, #20]
 80003b2:	fa01 f303 	lsl.w	r3, r1, r3
 80003b6:	43d9      	mvns	r1, r3
 80003b8:	687b      	ldr	r3, [r7, #4]
 80003ba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80003bc:	4313      	orrs	r3, r2
         );
}
 80003be:	4618      	mov	r0, r3
 80003c0:	3724      	adds	r7, #36	; 0x24
 80003c2:	46bd      	mov	sp, r7
 80003c4:	bc80      	pop	{r7}
 80003c6:	4770      	bx	lr

080003c8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80003c8:	b580      	push	{r7, lr}
 80003ca:	b082      	sub	sp, #8
 80003cc:	af00      	add	r7, sp, #0
 80003ce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80003d0:	687b      	ldr	r3, [r7, #4]
 80003d2:	3b01      	subs	r3, #1
 80003d4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80003d8:	d301      	bcc.n	80003de <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80003da:	2301      	movs	r3, #1
 80003dc:	e00f      	b.n	80003fe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80003de:	4a0a      	ldr	r2, [pc, #40]	; (8000408 <SysTick_Config+0x40>)
 80003e0:	687b      	ldr	r3, [r7, #4]
 80003e2:	3b01      	subs	r3, #1
 80003e4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80003e6:	210f      	movs	r1, #15
 80003e8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80003ec:	f7ff ff90 	bl	8000310 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80003f0:	4b05      	ldr	r3, [pc, #20]	; (8000408 <SysTick_Config+0x40>)
 80003f2:	2200      	movs	r2, #0
 80003f4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80003f6:	4b04      	ldr	r3, [pc, #16]	; (8000408 <SysTick_Config+0x40>)
 80003f8:	2207      	movs	r2, #7
 80003fa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80003fc:	2300      	movs	r3, #0
}
 80003fe:	4618      	mov	r0, r3
 8000400:	3708      	adds	r7, #8
 8000402:	46bd      	mov	sp, r7
 8000404:	bd80      	pop	{r7, pc}
 8000406:	bf00      	nop
 8000408:	e000e010 	.word	0xe000e010

0800040c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800040c:	b580      	push	{r7, lr}
 800040e:	b082      	sub	sp, #8
 8000410:	af00      	add	r7, sp, #0
 8000412:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000414:	6878      	ldr	r0, [r7, #4]
 8000416:	f7ff ff49 	bl	80002ac <__NVIC_SetPriorityGrouping>
}
 800041a:	bf00      	nop
 800041c:	3708      	adds	r7, #8
 800041e:	46bd      	mov	sp, r7
 8000420:	bd80      	pop	{r7, pc}

08000422 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000422:	b580      	push	{r7, lr}
 8000424:	b086      	sub	sp, #24
 8000426:	af00      	add	r7, sp, #0
 8000428:	4603      	mov	r3, r0
 800042a:	60b9      	str	r1, [r7, #8]
 800042c:	607a      	str	r2, [r7, #4]
 800042e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000430:	2300      	movs	r3, #0
 8000432:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000434:	f7ff ff5e 	bl	80002f4 <__NVIC_GetPriorityGrouping>
 8000438:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800043a:	687a      	ldr	r2, [r7, #4]
 800043c:	68b9      	ldr	r1, [r7, #8]
 800043e:	6978      	ldr	r0, [r7, #20]
 8000440:	f7ff ff90 	bl	8000364 <NVIC_EncodePriority>
 8000444:	4602      	mov	r2, r0
 8000446:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800044a:	4611      	mov	r1, r2
 800044c:	4618      	mov	r0, r3
 800044e:	f7ff ff5f 	bl	8000310 <__NVIC_SetPriority>
}
 8000452:	bf00      	nop
 8000454:	3718      	adds	r7, #24
 8000456:	46bd      	mov	sp, r7
 8000458:	bd80      	pop	{r7, pc}

0800045a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800045a:	b580      	push	{r7, lr}
 800045c:	b082      	sub	sp, #8
 800045e:	af00      	add	r7, sp, #0
 8000460:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000462:	6878      	ldr	r0, [r7, #4]
 8000464:	f7ff ffb0 	bl	80003c8 <SysTick_Config>
 8000468:	4603      	mov	r3, r0
}
 800046a:	4618      	mov	r0, r3
 800046c:	3708      	adds	r7, #8
 800046e:	46bd      	mov	sp, r7
 8000470:	bd80      	pop	{r7, pc}
	...

08000474 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 8000474:	b480      	push	{r7}
 8000476:	b087      	sub	sp, #28
 8000478:	af00      	add	r7, sp, #0
 800047a:	6078      	str	r0, [r7, #4]
 800047c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800047e:	2300      	movs	r3, #0
 8000480:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8000482:	2300      	movs	r3, #0
 8000484:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00;
 8000486:	2300      	movs	r3, #0
 8000488:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull)); 

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 800048a:	e154      	b.n	8000736 <HAL_GPIO_Init+0x2c2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 800048c:	683b      	ldr	r3, [r7, #0]
 800048e:	681a      	ldr	r2, [r3, #0]
 8000490:	2101      	movs	r1, #1
 8000492:	697b      	ldr	r3, [r7, #20]
 8000494:	fa01 f303 	lsl.w	r3, r1, r3
 8000498:	4013      	ands	r3, r2
 800049a:	60fb      	str	r3, [r7, #12]
    
    if(iocurrent)
 800049c:	68fb      	ldr	r3, [r7, #12]
 800049e:	2b00      	cmp	r3, #0
 80004a0:	f000 8146 	beq.w	8000730 <HAL_GPIO_Init+0x2bc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 80004a4:	683b      	ldr	r3, [r7, #0]
 80004a6:	685b      	ldr	r3, [r3, #4]
 80004a8:	2b02      	cmp	r3, #2
 80004aa:	d003      	beq.n	80004b4 <HAL_GPIO_Init+0x40>
 80004ac:	683b      	ldr	r3, [r7, #0]
 80004ae:	685b      	ldr	r3, [r3, #4]
 80004b0:	2b12      	cmp	r3, #18
 80004b2:	d123      	bne.n	80004fc <HAL_GPIO_Init+0x88>
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */ 
        /* Identify AFRL or AFRH register based on IO position*/
        temp = GPIOx->AFR[position >> 3];
 80004b4:	697b      	ldr	r3, [r7, #20]
 80004b6:	08da      	lsrs	r2, r3, #3
 80004b8:	687b      	ldr	r3, [r7, #4]
 80004ba:	3208      	adds	r2, #8
 80004bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80004c0:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4)) ;      
 80004c2:	697b      	ldr	r3, [r7, #20]
 80004c4:	f003 0307 	and.w	r3, r3, #7
 80004c8:	009b      	lsls	r3, r3, #2
 80004ca:	220f      	movs	r2, #15
 80004cc:	fa02 f303 	lsl.w	r3, r2, r3
 80004d0:	43db      	mvns	r3, r3
 80004d2:	693a      	ldr	r2, [r7, #16]
 80004d4:	4013      	ands	r3, r2
 80004d6:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));       
 80004d8:	683b      	ldr	r3, [r7, #0]
 80004da:	691a      	ldr	r2, [r3, #16]
 80004dc:	697b      	ldr	r3, [r7, #20]
 80004de:	f003 0307 	and.w	r3, r3, #7
 80004e2:	009b      	lsls	r3, r3, #2
 80004e4:	fa02 f303 	lsl.w	r3, r2, r3
 80004e8:	693a      	ldr	r2, [r7, #16]
 80004ea:	4313      	orrs	r3, r2
 80004ec:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 80004ee:	697b      	ldr	r3, [r7, #20]
 80004f0:	08da      	lsrs	r2, r3, #3
 80004f2:	687b      	ldr	r3, [r7, #4]
 80004f4:	3208      	adds	r2, #8
 80004f6:	6939      	ldr	r1, [r7, #16]
 80004f8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80004fc:	687b      	ldr	r3, [r7, #4]
 80004fe:	681b      	ldr	r3, [r3, #0]
 8000500:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));   
 8000502:	697b      	ldr	r3, [r7, #20]
 8000504:	005b      	lsls	r3, r3, #1
 8000506:	2203      	movs	r2, #3
 8000508:	fa02 f303 	lsl.w	r3, r2, r3
 800050c:	43db      	mvns	r3, r3
 800050e:	693a      	ldr	r2, [r7, #16]
 8000510:	4013      	ands	r3, r2
 8000512:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8000514:	683b      	ldr	r3, [r7, #0]
 8000516:	685b      	ldr	r3, [r3, #4]
 8000518:	f003 0203 	and.w	r2, r3, #3
 800051c:	697b      	ldr	r3, [r7, #20]
 800051e:	005b      	lsls	r3, r3, #1
 8000520:	fa02 f303 	lsl.w	r3, r2, r3
 8000524:	693a      	ldr	r2, [r7, #16]
 8000526:	4313      	orrs	r3, r2
 8000528:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800052a:	687b      	ldr	r3, [r7, #4]
 800052c:	693a      	ldr	r2, [r7, #16]
 800052e:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000530:	683b      	ldr	r3, [r7, #0]
 8000532:	685b      	ldr	r3, [r3, #4]
 8000534:	2b01      	cmp	r3, #1
 8000536:	d00b      	beq.n	8000550 <HAL_GPIO_Init+0xdc>
 8000538:	683b      	ldr	r3, [r7, #0]
 800053a:	685b      	ldr	r3, [r3, #4]
 800053c:	2b02      	cmp	r3, #2
 800053e:	d007      	beq.n	8000550 <HAL_GPIO_Init+0xdc>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000540:	683b      	ldr	r3, [r7, #0]
 8000542:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000544:	2b11      	cmp	r3, #17
 8000546:	d003      	beq.n	8000550 <HAL_GPIO_Init+0xdc>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000548:	683b      	ldr	r3, [r7, #0]
 800054a:	685b      	ldr	r3, [r3, #4]
 800054c:	2b12      	cmp	r3, #18
 800054e:	d130      	bne.n	80005b2 <HAL_GPIO_Init+0x13e>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000550:	687b      	ldr	r3, [r7, #4]
 8000552:	689b      	ldr	r3, [r3, #8]
 8000554:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8000556:	697b      	ldr	r3, [r7, #20]
 8000558:	005b      	lsls	r3, r3, #1
 800055a:	2203      	movs	r2, #3
 800055c:	fa02 f303 	lsl.w	r3, r2, r3
 8000560:	43db      	mvns	r3, r3
 8000562:	693a      	ldr	r2, [r7, #16]
 8000564:	4013      	ands	r3, r2
 8000566:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 8000568:	683b      	ldr	r3, [r7, #0]
 800056a:	68da      	ldr	r2, [r3, #12]
 800056c:	697b      	ldr	r3, [r7, #20]
 800056e:	005b      	lsls	r3, r3, #1
 8000570:	fa02 f303 	lsl.w	r3, r2, r3
 8000574:	693a      	ldr	r2, [r7, #16]
 8000576:	4313      	orrs	r3, r2
 8000578:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800057a:	687b      	ldr	r3, [r7, #4]
 800057c:	693a      	ldr	r2, [r7, #16]
 800057e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000580:	687b      	ldr	r3, [r7, #4]
 8000582:	685b      	ldr	r3, [r3, #4]
 8000584:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 8000586:	2201      	movs	r2, #1
 8000588:	697b      	ldr	r3, [r7, #20]
 800058a:	fa02 f303 	lsl.w	r3, r2, r3
 800058e:	43db      	mvns	r3, r3
 8000590:	693a      	ldr	r2, [r7, #16]
 8000592:	4013      	ands	r3, r2
 8000594:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, ((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8000596:	683b      	ldr	r3, [r7, #0]
 8000598:	685b      	ldr	r3, [r3, #4]
 800059a:	091b      	lsrs	r3, r3, #4
 800059c:	f003 0201 	and.w	r2, r3, #1
 80005a0:	697b      	ldr	r3, [r7, #20]
 80005a2:	fa02 f303 	lsl.w	r3, r2, r3
 80005a6:	693a      	ldr	r2, [r7, #16]
 80005a8:	4313      	orrs	r3, r2
 80005aa:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80005ac:	687b      	ldr	r3, [r7, #4]
 80005ae:	693a      	ldr	r2, [r7, #16]
 80005b0:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80005b2:	687b      	ldr	r3, [r7, #4]
 80005b4:	68db      	ldr	r3, [r3, #12]
 80005b6:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 80005b8:	697b      	ldr	r3, [r7, #20]
 80005ba:	005b      	lsls	r3, r3, #1
 80005bc:	2203      	movs	r2, #3
 80005be:	fa02 f303 	lsl.w	r3, r2, r3
 80005c2:	43db      	mvns	r3, r3
 80005c4:	693a      	ldr	r2, [r7, #16]
 80005c6:	4013      	ands	r3, r2
 80005c8:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 80005ca:	683b      	ldr	r3, [r7, #0]
 80005cc:	689a      	ldr	r2, [r3, #8]
 80005ce:	697b      	ldr	r3, [r7, #20]
 80005d0:	005b      	lsls	r3, r3, #1
 80005d2:	fa02 f303 	lsl.w	r3, r2, r3
 80005d6:	693a      	ldr	r2, [r7, #16]
 80005d8:	4313      	orrs	r3, r2
 80005da:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80005dc:	687b      	ldr	r3, [r7, #4]
 80005de:	693a      	ldr	r2, [r7, #16]
 80005e0:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 80005e2:	683b      	ldr	r3, [r7, #0]
 80005e4:	685b      	ldr	r3, [r3, #4]
 80005e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005ea:	2b00      	cmp	r3, #0
 80005ec:	f000 80a0 	beq.w	8000730 <HAL_GPIO_Init+0x2bc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80005f0:	4b57      	ldr	r3, [pc, #348]	; (8000750 <HAL_GPIO_Init+0x2dc>)
 80005f2:	6a1b      	ldr	r3, [r3, #32]
 80005f4:	4a56      	ldr	r2, [pc, #344]	; (8000750 <HAL_GPIO_Init+0x2dc>)
 80005f6:	f043 0301 	orr.w	r3, r3, #1
 80005fa:	6213      	str	r3, [r2, #32]
 80005fc:	4b54      	ldr	r3, [pc, #336]	; (8000750 <HAL_GPIO_Init+0x2dc>)
 80005fe:	6a1b      	ldr	r3, [r3, #32]
 8000600:	f003 0301 	and.w	r3, r3, #1
 8000604:	60bb      	str	r3, [r7, #8]
 8000606:	68bb      	ldr	r3, [r7, #8]
        
        temp = SYSCFG->EXTICR[position >> 2];
 8000608:	4a52      	ldr	r2, [pc, #328]	; (8000754 <HAL_GPIO_Init+0x2e0>)
 800060a:	697b      	ldr	r3, [r7, #20]
 800060c:	089b      	lsrs	r3, r3, #2
 800060e:	3302      	adds	r3, #2
 8000610:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000614:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 8000616:	697b      	ldr	r3, [r7, #20]
 8000618:	f003 0303 	and.w	r3, r3, #3
 800061c:	009b      	lsls	r3, r3, #2
 800061e:	220f      	movs	r2, #15
 8000620:	fa02 f303 	lsl.w	r3, r2, r3
 8000624:	43db      	mvns	r3, r3
 8000626:	693a      	ldr	r2, [r7, #16]
 8000628:	4013      	ands	r3, r2
 800062a:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800062c:	687b      	ldr	r3, [r7, #4]
 800062e:	4a4a      	ldr	r2, [pc, #296]	; (8000758 <HAL_GPIO_Init+0x2e4>)
 8000630:	4293      	cmp	r3, r2
 8000632:	d019      	beq.n	8000668 <HAL_GPIO_Init+0x1f4>
 8000634:	687b      	ldr	r3, [r7, #4]
 8000636:	4a49      	ldr	r2, [pc, #292]	; (800075c <HAL_GPIO_Init+0x2e8>)
 8000638:	4293      	cmp	r3, r2
 800063a:	d013      	beq.n	8000664 <HAL_GPIO_Init+0x1f0>
 800063c:	687b      	ldr	r3, [r7, #4]
 800063e:	4a48      	ldr	r2, [pc, #288]	; (8000760 <HAL_GPIO_Init+0x2ec>)
 8000640:	4293      	cmp	r3, r2
 8000642:	d00d      	beq.n	8000660 <HAL_GPIO_Init+0x1ec>
 8000644:	687b      	ldr	r3, [r7, #4]
 8000646:	4a47      	ldr	r2, [pc, #284]	; (8000764 <HAL_GPIO_Init+0x2f0>)
 8000648:	4293      	cmp	r3, r2
 800064a:	d007      	beq.n	800065c <HAL_GPIO_Init+0x1e8>
 800064c:	687b      	ldr	r3, [r7, #4]
 800064e:	4a46      	ldr	r2, [pc, #280]	; (8000768 <HAL_GPIO_Init+0x2f4>)
 8000650:	4293      	cmp	r3, r2
 8000652:	d101      	bne.n	8000658 <HAL_GPIO_Init+0x1e4>
 8000654:	2304      	movs	r3, #4
 8000656:	e008      	b.n	800066a <HAL_GPIO_Init+0x1f6>
 8000658:	2305      	movs	r3, #5
 800065a:	e006      	b.n	800066a <HAL_GPIO_Init+0x1f6>
 800065c:	2303      	movs	r3, #3
 800065e:	e004      	b.n	800066a <HAL_GPIO_Init+0x1f6>
 8000660:	2302      	movs	r3, #2
 8000662:	e002      	b.n	800066a <HAL_GPIO_Init+0x1f6>
 8000664:	2301      	movs	r3, #1
 8000666:	e000      	b.n	800066a <HAL_GPIO_Init+0x1f6>
 8000668:	2300      	movs	r3, #0
 800066a:	697a      	ldr	r2, [r7, #20]
 800066c:	f002 0203 	and.w	r2, r2, #3
 8000670:	0092      	lsls	r2, r2, #2
 8000672:	4093      	lsls	r3, r2
 8000674:	693a      	ldr	r2, [r7, #16]
 8000676:	4313      	orrs	r3, r2
 8000678:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 800067a:	4936      	ldr	r1, [pc, #216]	; (8000754 <HAL_GPIO_Init+0x2e0>)
 800067c:	697b      	ldr	r3, [r7, #20]
 800067e:	089b      	lsrs	r3, r3, #2
 8000680:	3302      	adds	r3, #2
 8000682:	693a      	ldr	r2, [r7, #16]
 8000684:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                  
        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000688:	4b38      	ldr	r3, [pc, #224]	; (800076c <HAL_GPIO_Init+0x2f8>)
 800068a:	681b      	ldr	r3, [r3, #0]
 800068c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 800068e:	68fb      	ldr	r3, [r7, #12]
 8000690:	43db      	mvns	r3, r3
 8000692:	693a      	ldr	r2, [r7, #16]
 8000694:	4013      	ands	r3, r2
 8000696:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000698:	683b      	ldr	r3, [r7, #0]
 800069a:	685b      	ldr	r3, [r3, #4]
 800069c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80006a0:	2b00      	cmp	r3, #0
 80006a2:	d003      	beq.n	80006ac <HAL_GPIO_Init+0x238>
        {
          SET_BIT(temp, iocurrent); 
 80006a4:	693a      	ldr	r2, [r7, #16]
 80006a6:	68fb      	ldr	r3, [r7, #12]
 80006a8:	4313      	orrs	r3, r2
 80006aa:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80006ac:	4a2f      	ldr	r2, [pc, #188]	; (800076c <HAL_GPIO_Init+0x2f8>)
 80006ae:	693b      	ldr	r3, [r7, #16]
 80006b0:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80006b2:	4b2e      	ldr	r3, [pc, #184]	; (800076c <HAL_GPIO_Init+0x2f8>)
 80006b4:	685b      	ldr	r3, [r3, #4]
 80006b6:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);      
 80006b8:	68fb      	ldr	r3, [r7, #12]
 80006ba:	43db      	mvns	r3, r3
 80006bc:	693a      	ldr	r2, [r7, #16]
 80006be:	4013      	ands	r3, r2
 80006c0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80006c2:	683b      	ldr	r3, [r7, #0]
 80006c4:	685b      	ldr	r3, [r3, #4]
 80006c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80006ca:	2b00      	cmp	r3, #0
 80006cc:	d003      	beq.n	80006d6 <HAL_GPIO_Init+0x262>
        {
          SET_BIT(temp, iocurrent); 
 80006ce:	693a      	ldr	r2, [r7, #16]
 80006d0:	68fb      	ldr	r3, [r7, #12]
 80006d2:	4313      	orrs	r3, r2
 80006d4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80006d6:	4a25      	ldr	r2, [pc, #148]	; (800076c <HAL_GPIO_Init+0x2f8>)
 80006d8:	693b      	ldr	r3, [r7, #16]
 80006da:	6053      	str	r3, [r2, #4]
  
        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80006dc:	4b23      	ldr	r3, [pc, #140]	; (800076c <HAL_GPIO_Init+0x2f8>)
 80006de:	689b      	ldr	r3, [r3, #8]
 80006e0:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 80006e2:	68fb      	ldr	r3, [r7, #12]
 80006e4:	43db      	mvns	r3, r3
 80006e6:	693a      	ldr	r2, [r7, #16]
 80006e8:	4013      	ands	r3, r2
 80006ea:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80006ec:	683b      	ldr	r3, [r7, #0]
 80006ee:	685b      	ldr	r3, [r3, #4]
 80006f0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80006f4:	2b00      	cmp	r3, #0
 80006f6:	d003      	beq.n	8000700 <HAL_GPIO_Init+0x28c>
        {
          SET_BIT(temp, iocurrent); 
 80006f8:	693a      	ldr	r2, [r7, #16]
 80006fa:	68fb      	ldr	r3, [r7, #12]
 80006fc:	4313      	orrs	r3, r2
 80006fe:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000700:	4a1a      	ldr	r2, [pc, #104]	; (800076c <HAL_GPIO_Init+0x2f8>)
 8000702:	693b      	ldr	r3, [r7, #16]
 8000704:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000706:	4b19      	ldr	r3, [pc, #100]	; (800076c <HAL_GPIO_Init+0x2f8>)
 8000708:	68db      	ldr	r3, [r3, #12]
 800070a:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 800070c:	68fb      	ldr	r3, [r7, #12]
 800070e:	43db      	mvns	r3, r3
 8000710:	693a      	ldr	r2, [r7, #16]
 8000712:	4013      	ands	r3, r2
 8000714:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000716:	683b      	ldr	r3, [r7, #0]
 8000718:	685b      	ldr	r3, [r3, #4]
 800071a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800071e:	2b00      	cmp	r3, #0
 8000720:	d003      	beq.n	800072a <HAL_GPIO_Init+0x2b6>
        {
          SET_BIT(temp, iocurrent); 
 8000722:	693a      	ldr	r2, [r7, #16]
 8000724:	68fb      	ldr	r3, [r7, #12]
 8000726:	4313      	orrs	r3, r2
 8000728:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800072a:	4a10      	ldr	r2, [pc, #64]	; (800076c <HAL_GPIO_Init+0x2f8>)
 800072c:	693b      	ldr	r3, [r7, #16]
 800072e:	60d3      	str	r3, [r2, #12]
      }
    }
    
    position++;
 8000730:	697b      	ldr	r3, [r7, #20]
 8000732:	3301      	adds	r3, #1
 8000734:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8000736:	683b      	ldr	r3, [r7, #0]
 8000738:	681a      	ldr	r2, [r3, #0]
 800073a:	697b      	ldr	r3, [r7, #20]
 800073c:	fa22 f303 	lsr.w	r3, r2, r3
 8000740:	2b00      	cmp	r3, #0
 8000742:	f47f aea3 	bne.w	800048c <HAL_GPIO_Init+0x18>
  } 
}
 8000746:	bf00      	nop
 8000748:	371c      	adds	r7, #28
 800074a:	46bd      	mov	sp, r7
 800074c:	bc80      	pop	{r7}
 800074e:	4770      	bx	lr
 8000750:	40023800 	.word	0x40023800
 8000754:	40010000 	.word	0x40010000
 8000758:	40020000 	.word	0x40020000
 800075c:	40020400 	.word	0x40020400
 8000760:	40020800 	.word	0x40020800
 8000764:	40020c00 	.word	0x40020c00
 8000768:	40021000 	.word	0x40021000
 800076c:	40010400 	.word	0x40010400

08000770 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	b084      	sub	sp, #16
 8000774:	af00      	add	r7, sp, #0
 8000776:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8000778:	687b      	ldr	r3, [r7, #4]
 800077a:	2b00      	cmp	r3, #0
 800077c:	d101      	bne.n	8000782 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800077e:	2301      	movs	r3, #1
 8000780:	e10f      	b.n	80009a2 <HAL_I2C_Init+0x232>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000782:	687b      	ldr	r3, [r7, #4]
 8000784:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8000788:	b2db      	uxtb	r3, r3
 800078a:	2b00      	cmp	r3, #0
 800078c:	d106      	bne.n	800079c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800078e:	687b      	ldr	r3, [r7, #4]
 8000790:	2200      	movs	r2, #0
 8000792:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8000796:	6878      	ldr	r0, [r7, #4]
 8000798:	f001 fe98 	bl	80024cc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800079c:	687b      	ldr	r3, [r7, #4]
 800079e:	2224      	movs	r2, #36	; 0x24
 80007a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80007a4:	687b      	ldr	r3, [r7, #4]
 80007a6:	681b      	ldr	r3, [r3, #0]
 80007a8:	681a      	ldr	r2, [r3, #0]
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	681b      	ldr	r3, [r3, #0]
 80007ae:	f022 0201 	bic.w	r2, r2, #1
 80007b2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80007b4:	f001 fbf6 	bl	8001fa4 <HAL_RCC_GetPCLK1Freq>
 80007b8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80007ba:	687b      	ldr	r3, [r7, #4]
 80007bc:	685b      	ldr	r3, [r3, #4]
 80007be:	4a7b      	ldr	r2, [pc, #492]	; (80009ac <HAL_I2C_Init+0x23c>)
 80007c0:	4293      	cmp	r3, r2
 80007c2:	d807      	bhi.n	80007d4 <HAL_I2C_Init+0x64>
 80007c4:	68fb      	ldr	r3, [r7, #12]
 80007c6:	4a7a      	ldr	r2, [pc, #488]	; (80009b0 <HAL_I2C_Init+0x240>)
 80007c8:	4293      	cmp	r3, r2
 80007ca:	bf94      	ite	ls
 80007cc:	2301      	movls	r3, #1
 80007ce:	2300      	movhi	r3, #0
 80007d0:	b2db      	uxtb	r3, r3
 80007d2:	e006      	b.n	80007e2 <HAL_I2C_Init+0x72>
 80007d4:	68fb      	ldr	r3, [r7, #12]
 80007d6:	4a77      	ldr	r2, [pc, #476]	; (80009b4 <HAL_I2C_Init+0x244>)
 80007d8:	4293      	cmp	r3, r2
 80007da:	bf94      	ite	ls
 80007dc:	2301      	movls	r3, #1
 80007de:	2300      	movhi	r3, #0
 80007e0:	b2db      	uxtb	r3, r3
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	d001      	beq.n	80007ea <HAL_I2C_Init+0x7a>
  {
    return HAL_ERROR;
 80007e6:	2301      	movs	r3, #1
 80007e8:	e0db      	b.n	80009a2 <HAL_I2C_Init+0x232>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80007ea:	68fb      	ldr	r3, [r7, #12]
 80007ec:	4a72      	ldr	r2, [pc, #456]	; (80009b8 <HAL_I2C_Init+0x248>)
 80007ee:	fba2 2303 	umull	r2, r3, r2, r3
 80007f2:	0c9b      	lsrs	r3, r3, #18
 80007f4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80007f6:	687b      	ldr	r3, [r7, #4]
 80007f8:	681b      	ldr	r3, [r3, #0]
 80007fa:	685b      	ldr	r3, [r3, #4]
 80007fc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	681b      	ldr	r3, [r3, #0]
 8000804:	68ba      	ldr	r2, [r7, #8]
 8000806:	430a      	orrs	r2, r1
 8000808:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800080a:	687b      	ldr	r3, [r7, #4]
 800080c:	681b      	ldr	r3, [r3, #0]
 800080e:	6a1b      	ldr	r3, [r3, #32]
 8000810:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8000814:	687b      	ldr	r3, [r7, #4]
 8000816:	685b      	ldr	r3, [r3, #4]
 8000818:	4a64      	ldr	r2, [pc, #400]	; (80009ac <HAL_I2C_Init+0x23c>)
 800081a:	4293      	cmp	r3, r2
 800081c:	d802      	bhi.n	8000824 <HAL_I2C_Init+0xb4>
 800081e:	68bb      	ldr	r3, [r7, #8]
 8000820:	3301      	adds	r3, #1
 8000822:	e009      	b.n	8000838 <HAL_I2C_Init+0xc8>
 8000824:	68bb      	ldr	r3, [r7, #8]
 8000826:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800082a:	fb02 f303 	mul.w	r3, r2, r3
 800082e:	4a63      	ldr	r2, [pc, #396]	; (80009bc <HAL_I2C_Init+0x24c>)
 8000830:	fba2 2303 	umull	r2, r3, r2, r3
 8000834:	099b      	lsrs	r3, r3, #6
 8000836:	3301      	adds	r3, #1
 8000838:	687a      	ldr	r2, [r7, #4]
 800083a:	6812      	ldr	r2, [r2, #0]
 800083c:	430b      	orrs	r3, r1
 800083e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	681b      	ldr	r3, [r3, #0]
 8000844:	69db      	ldr	r3, [r3, #28]
 8000846:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800084a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800084e:	687b      	ldr	r3, [r7, #4]
 8000850:	685b      	ldr	r3, [r3, #4]
 8000852:	4956      	ldr	r1, [pc, #344]	; (80009ac <HAL_I2C_Init+0x23c>)
 8000854:	428b      	cmp	r3, r1
 8000856:	d80d      	bhi.n	8000874 <HAL_I2C_Init+0x104>
 8000858:	68fb      	ldr	r3, [r7, #12]
 800085a:	1e59      	subs	r1, r3, #1
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	685b      	ldr	r3, [r3, #4]
 8000860:	005b      	lsls	r3, r3, #1
 8000862:	fbb1 f3f3 	udiv	r3, r1, r3
 8000866:	3301      	adds	r3, #1
 8000868:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800086c:	2b04      	cmp	r3, #4
 800086e:	bf38      	it	cc
 8000870:	2304      	movcc	r3, #4
 8000872:	e04f      	b.n	8000914 <HAL_I2C_Init+0x1a4>
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	689b      	ldr	r3, [r3, #8]
 8000878:	2b00      	cmp	r3, #0
 800087a:	d111      	bne.n	80008a0 <HAL_I2C_Init+0x130>
 800087c:	68fb      	ldr	r3, [r7, #12]
 800087e:	1e58      	subs	r0, r3, #1
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	6859      	ldr	r1, [r3, #4]
 8000884:	460b      	mov	r3, r1
 8000886:	005b      	lsls	r3, r3, #1
 8000888:	440b      	add	r3, r1
 800088a:	fbb0 f3f3 	udiv	r3, r0, r3
 800088e:	3301      	adds	r3, #1
 8000890:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000894:	2b00      	cmp	r3, #0
 8000896:	bf0c      	ite	eq
 8000898:	2301      	moveq	r3, #1
 800089a:	2300      	movne	r3, #0
 800089c:	b2db      	uxtb	r3, r3
 800089e:	e012      	b.n	80008c6 <HAL_I2C_Init+0x156>
 80008a0:	68fb      	ldr	r3, [r7, #12]
 80008a2:	1e58      	subs	r0, r3, #1
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	6859      	ldr	r1, [r3, #4]
 80008a8:	460b      	mov	r3, r1
 80008aa:	009b      	lsls	r3, r3, #2
 80008ac:	440b      	add	r3, r1
 80008ae:	0099      	lsls	r1, r3, #2
 80008b0:	440b      	add	r3, r1
 80008b2:	fbb0 f3f3 	udiv	r3, r0, r3
 80008b6:	3301      	adds	r3, #1
 80008b8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80008bc:	2b00      	cmp	r3, #0
 80008be:	bf0c      	ite	eq
 80008c0:	2301      	moveq	r3, #1
 80008c2:	2300      	movne	r3, #0
 80008c4:	b2db      	uxtb	r3, r3
 80008c6:	2b00      	cmp	r3, #0
 80008c8:	d001      	beq.n	80008ce <HAL_I2C_Init+0x15e>
 80008ca:	2301      	movs	r3, #1
 80008cc:	e022      	b.n	8000914 <HAL_I2C_Init+0x1a4>
 80008ce:	687b      	ldr	r3, [r7, #4]
 80008d0:	689b      	ldr	r3, [r3, #8]
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	d10e      	bne.n	80008f4 <HAL_I2C_Init+0x184>
 80008d6:	68fb      	ldr	r3, [r7, #12]
 80008d8:	1e58      	subs	r0, r3, #1
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	6859      	ldr	r1, [r3, #4]
 80008de:	460b      	mov	r3, r1
 80008e0:	005b      	lsls	r3, r3, #1
 80008e2:	440b      	add	r3, r1
 80008e4:	fbb0 f3f3 	udiv	r3, r0, r3
 80008e8:	3301      	adds	r3, #1
 80008ea:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80008ee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80008f2:	e00f      	b.n	8000914 <HAL_I2C_Init+0x1a4>
 80008f4:	68fb      	ldr	r3, [r7, #12]
 80008f6:	1e58      	subs	r0, r3, #1
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	6859      	ldr	r1, [r3, #4]
 80008fc:	460b      	mov	r3, r1
 80008fe:	009b      	lsls	r3, r3, #2
 8000900:	440b      	add	r3, r1
 8000902:	0099      	lsls	r1, r3, #2
 8000904:	440b      	add	r3, r1
 8000906:	fbb0 f3f3 	udiv	r3, r0, r3
 800090a:	3301      	adds	r3, #1
 800090c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000910:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000914:	6879      	ldr	r1, [r7, #4]
 8000916:	6809      	ldr	r1, [r1, #0]
 8000918:	4313      	orrs	r3, r2
 800091a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	681b      	ldr	r3, [r3, #0]
 8000920:	681b      	ldr	r3, [r3, #0]
 8000922:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	69da      	ldr	r2, [r3, #28]
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	6a1b      	ldr	r3, [r3, #32]
 800092e:	431a      	orrs	r2, r3
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	681b      	ldr	r3, [r3, #0]
 8000934:	430a      	orrs	r2, r1
 8000936:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	681b      	ldr	r3, [r3, #0]
 800093c:	689b      	ldr	r3, [r3, #8]
 800093e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8000942:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8000946:	687a      	ldr	r2, [r7, #4]
 8000948:	6911      	ldr	r1, [r2, #16]
 800094a:	687a      	ldr	r2, [r7, #4]
 800094c:	68d2      	ldr	r2, [r2, #12]
 800094e:	4311      	orrs	r1, r2
 8000950:	687a      	ldr	r2, [r7, #4]
 8000952:	6812      	ldr	r2, [r2, #0]
 8000954:	430b      	orrs	r3, r1
 8000956:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	681b      	ldr	r3, [r3, #0]
 800095c:	68db      	ldr	r3, [r3, #12]
 800095e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	695a      	ldr	r2, [r3, #20]
 8000966:	687b      	ldr	r3, [r7, #4]
 8000968:	699b      	ldr	r3, [r3, #24]
 800096a:	431a      	orrs	r2, r3
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	681b      	ldr	r3, [r3, #0]
 8000970:	430a      	orrs	r2, r1
 8000972:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	681b      	ldr	r3, [r3, #0]
 8000978:	681a      	ldr	r2, [r3, #0]
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	681b      	ldr	r3, [r3, #0]
 800097e:	f042 0201 	orr.w	r2, r2, #1
 8000982:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	2200      	movs	r2, #0
 8000988:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	2220      	movs	r2, #32
 800098e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	2200      	movs	r2, #0
 8000996:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	2200      	movs	r2, #0
 800099c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80009a0:	2300      	movs	r3, #0
}
 80009a2:	4618      	mov	r0, r3
 80009a4:	3710      	adds	r7, #16
 80009a6:	46bd      	mov	sp, r7
 80009a8:	bd80      	pop	{r7, pc}
 80009aa:	bf00      	nop
 80009ac:	000186a0 	.word	0x000186a0
 80009b0:	001e847f 	.word	0x001e847f
 80009b4:	003d08ff 	.word	0x003d08ff
 80009b8:	431bde83 	.word	0x431bde83
 80009bc:	10624dd3 	.word	0x10624dd3

080009c0 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	b088      	sub	sp, #32
 80009c4:	af02      	add	r7, sp, #8
 80009c6:	60f8      	str	r0, [r7, #12]
 80009c8:	607a      	str	r2, [r7, #4]
 80009ca:	461a      	mov	r2, r3
 80009cc:	460b      	mov	r3, r1
 80009ce:	817b      	strh	r3, [r7, #10]
 80009d0:	4613      	mov	r3, r2
 80009d2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80009d4:	f7ff fc3e 	bl	8000254 <HAL_GetTick>
 80009d8:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80009da:	68fb      	ldr	r3, [r7, #12]
 80009dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80009e0:	b2db      	uxtb	r3, r3
 80009e2:	2b20      	cmp	r3, #32
 80009e4:	f040 80e0 	bne.w	8000ba8 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80009e8:	697b      	ldr	r3, [r7, #20]
 80009ea:	9300      	str	r3, [sp, #0]
 80009ec:	2319      	movs	r3, #25
 80009ee:	2201      	movs	r2, #1
 80009f0:	4970      	ldr	r1, [pc, #448]	; (8000bb4 <HAL_I2C_Master_Transmit+0x1f4>)
 80009f2:	68f8      	ldr	r0, [r7, #12]
 80009f4:	f000 fc34 	bl	8001260 <I2C_WaitOnFlagUntilTimeout>
 80009f8:	4603      	mov	r3, r0
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	d001      	beq.n	8000a02 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80009fe:	2302      	movs	r3, #2
 8000a00:	e0d3      	b.n	8000baa <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8000a02:	68fb      	ldr	r3, [r7, #12]
 8000a04:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000a08:	2b01      	cmp	r3, #1
 8000a0a:	d101      	bne.n	8000a10 <HAL_I2C_Master_Transmit+0x50>
 8000a0c:	2302      	movs	r3, #2
 8000a0e:	e0cc      	b.n	8000baa <HAL_I2C_Master_Transmit+0x1ea>
 8000a10:	68fb      	ldr	r3, [r7, #12]
 8000a12:	2201      	movs	r2, #1
 8000a14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8000a18:	68fb      	ldr	r3, [r7, #12]
 8000a1a:	681b      	ldr	r3, [r3, #0]
 8000a1c:	681b      	ldr	r3, [r3, #0]
 8000a1e:	f003 0301 	and.w	r3, r3, #1
 8000a22:	2b01      	cmp	r3, #1
 8000a24:	d007      	beq.n	8000a36 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8000a26:	68fb      	ldr	r3, [r7, #12]
 8000a28:	681b      	ldr	r3, [r3, #0]
 8000a2a:	681a      	ldr	r2, [r3, #0]
 8000a2c:	68fb      	ldr	r3, [r7, #12]
 8000a2e:	681b      	ldr	r3, [r3, #0]
 8000a30:	f042 0201 	orr.w	r2, r2, #1
 8000a34:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8000a36:	68fb      	ldr	r3, [r7, #12]
 8000a38:	681b      	ldr	r3, [r3, #0]
 8000a3a:	681a      	ldr	r2, [r3, #0]
 8000a3c:	68fb      	ldr	r3, [r7, #12]
 8000a3e:	681b      	ldr	r3, [r3, #0]
 8000a40:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000a44:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8000a46:	68fb      	ldr	r3, [r7, #12]
 8000a48:	2221      	movs	r2, #33	; 0x21
 8000a4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8000a4e:	68fb      	ldr	r3, [r7, #12]
 8000a50:	2210      	movs	r2, #16
 8000a52:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8000a56:	68fb      	ldr	r3, [r7, #12]
 8000a58:	2200      	movs	r2, #0
 8000a5a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8000a5c:	68fb      	ldr	r3, [r7, #12]
 8000a5e:	687a      	ldr	r2, [r7, #4]
 8000a60:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8000a62:	68fb      	ldr	r3, [r7, #12]
 8000a64:	893a      	ldrh	r2, [r7, #8]
 8000a66:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8000a68:	68fb      	ldr	r3, [r7, #12]
 8000a6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000a6c:	b29a      	uxth	r2, r3
 8000a6e:	68fb      	ldr	r3, [r7, #12]
 8000a70:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8000a72:	68fb      	ldr	r3, [r7, #12]
 8000a74:	4a50      	ldr	r2, [pc, #320]	; (8000bb8 <HAL_I2C_Master_Transmit+0x1f8>)
 8000a76:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8000a78:	8979      	ldrh	r1, [r7, #10]
 8000a7a:	697b      	ldr	r3, [r7, #20]
 8000a7c:	6a3a      	ldr	r2, [r7, #32]
 8000a7e:	68f8      	ldr	r0, [r7, #12]
 8000a80:	f000 fac2 	bl	8001008 <I2C_MasterRequestWrite>
 8000a84:	4603      	mov	r3, r0
 8000a86:	2b00      	cmp	r3, #0
 8000a88:	d001      	beq.n	8000a8e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8000a8a:	2301      	movs	r3, #1
 8000a8c:	e08d      	b.n	8000baa <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8000a8e:	2300      	movs	r3, #0
 8000a90:	613b      	str	r3, [r7, #16]
 8000a92:	68fb      	ldr	r3, [r7, #12]
 8000a94:	681b      	ldr	r3, [r3, #0]
 8000a96:	695b      	ldr	r3, [r3, #20]
 8000a98:	613b      	str	r3, [r7, #16]
 8000a9a:	68fb      	ldr	r3, [r7, #12]
 8000a9c:	681b      	ldr	r3, [r3, #0]
 8000a9e:	699b      	ldr	r3, [r3, #24]
 8000aa0:	613b      	str	r3, [r7, #16]
 8000aa2:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8000aa4:	e066      	b.n	8000b74 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8000aa6:	697a      	ldr	r2, [r7, #20]
 8000aa8:	6a39      	ldr	r1, [r7, #32]
 8000aaa:	68f8      	ldr	r0, [r7, #12]
 8000aac:	f000 fcae 	bl	800140c <I2C_WaitOnTXEFlagUntilTimeout>
 8000ab0:	4603      	mov	r3, r0
 8000ab2:	2b00      	cmp	r3, #0
 8000ab4:	d00d      	beq.n	8000ad2 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8000ab6:	68fb      	ldr	r3, [r7, #12]
 8000ab8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aba:	2b04      	cmp	r3, #4
 8000abc:	d107      	bne.n	8000ace <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8000abe:	68fb      	ldr	r3, [r7, #12]
 8000ac0:	681b      	ldr	r3, [r3, #0]
 8000ac2:	681a      	ldr	r2, [r3, #0]
 8000ac4:	68fb      	ldr	r3, [r7, #12]
 8000ac6:	681b      	ldr	r3, [r3, #0]
 8000ac8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000acc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8000ace:	2301      	movs	r3, #1
 8000ad0:	e06b      	b.n	8000baa <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8000ad2:	68fb      	ldr	r3, [r7, #12]
 8000ad4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ad6:	781a      	ldrb	r2, [r3, #0]
 8000ad8:	68fb      	ldr	r3, [r7, #12]
 8000ada:	681b      	ldr	r3, [r3, #0]
 8000adc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8000ade:	68fb      	ldr	r3, [r7, #12]
 8000ae0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ae2:	1c5a      	adds	r2, r3, #1
 8000ae4:	68fb      	ldr	r3, [r7, #12]
 8000ae6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8000ae8:	68fb      	ldr	r3, [r7, #12]
 8000aea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000aec:	b29b      	uxth	r3, r3
 8000aee:	3b01      	subs	r3, #1
 8000af0:	b29a      	uxth	r2, r3
 8000af2:	68fb      	ldr	r3, [r7, #12]
 8000af4:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8000af6:	68fb      	ldr	r3, [r7, #12]
 8000af8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000afa:	3b01      	subs	r3, #1
 8000afc:	b29a      	uxth	r2, r3
 8000afe:	68fb      	ldr	r3, [r7, #12]
 8000b00:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8000b02:	68fb      	ldr	r3, [r7, #12]
 8000b04:	681b      	ldr	r3, [r3, #0]
 8000b06:	695b      	ldr	r3, [r3, #20]
 8000b08:	f003 0304 	and.w	r3, r3, #4
 8000b0c:	2b04      	cmp	r3, #4
 8000b0e:	d11b      	bne.n	8000b48 <HAL_I2C_Master_Transmit+0x188>
 8000b10:	68fb      	ldr	r3, [r7, #12]
 8000b12:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	d017      	beq.n	8000b48 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8000b18:	68fb      	ldr	r3, [r7, #12]
 8000b1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b1c:	781a      	ldrb	r2, [r3, #0]
 8000b1e:	68fb      	ldr	r3, [r7, #12]
 8000b20:	681b      	ldr	r3, [r3, #0]
 8000b22:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8000b24:	68fb      	ldr	r3, [r7, #12]
 8000b26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b28:	1c5a      	adds	r2, r3, #1
 8000b2a:	68fb      	ldr	r3, [r7, #12]
 8000b2c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8000b2e:	68fb      	ldr	r3, [r7, #12]
 8000b30:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000b32:	b29b      	uxth	r3, r3
 8000b34:	3b01      	subs	r3, #1
 8000b36:	b29a      	uxth	r2, r3
 8000b38:	68fb      	ldr	r3, [r7, #12]
 8000b3a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8000b3c:	68fb      	ldr	r3, [r7, #12]
 8000b3e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000b40:	3b01      	subs	r3, #1
 8000b42:	b29a      	uxth	r2, r3
 8000b44:	68fb      	ldr	r3, [r7, #12]
 8000b46:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8000b48:	697a      	ldr	r2, [r7, #20]
 8000b4a:	6a39      	ldr	r1, [r7, #32]
 8000b4c:	68f8      	ldr	r0, [r7, #12]
 8000b4e:	f000 fc9e 	bl	800148e <I2C_WaitOnBTFFlagUntilTimeout>
 8000b52:	4603      	mov	r3, r0
 8000b54:	2b00      	cmp	r3, #0
 8000b56:	d00d      	beq.n	8000b74 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8000b58:	68fb      	ldr	r3, [r7, #12]
 8000b5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b5c:	2b04      	cmp	r3, #4
 8000b5e:	d107      	bne.n	8000b70 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8000b60:	68fb      	ldr	r3, [r7, #12]
 8000b62:	681b      	ldr	r3, [r3, #0]
 8000b64:	681a      	ldr	r2, [r3, #0]
 8000b66:	68fb      	ldr	r3, [r7, #12]
 8000b68:	681b      	ldr	r3, [r3, #0]
 8000b6a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000b6e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8000b70:	2301      	movs	r3, #1
 8000b72:	e01a      	b.n	8000baa <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8000b74:	68fb      	ldr	r3, [r7, #12]
 8000b76:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	d194      	bne.n	8000aa6 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8000b7c:	68fb      	ldr	r3, [r7, #12]
 8000b7e:	681b      	ldr	r3, [r3, #0]
 8000b80:	681a      	ldr	r2, [r3, #0]
 8000b82:	68fb      	ldr	r3, [r7, #12]
 8000b84:	681b      	ldr	r3, [r3, #0]
 8000b86:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000b8a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8000b8c:	68fb      	ldr	r3, [r7, #12]
 8000b8e:	2220      	movs	r2, #32
 8000b90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8000b94:	68fb      	ldr	r3, [r7, #12]
 8000b96:	2200      	movs	r2, #0
 8000b98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8000b9c:	68fb      	ldr	r3, [r7, #12]
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	e000      	b.n	8000baa <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8000ba8:	2302      	movs	r3, #2
  }
}
 8000baa:	4618      	mov	r0, r3
 8000bac:	3718      	adds	r7, #24
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	bd80      	pop	{r7, pc}
 8000bb2:	bf00      	nop
 8000bb4:	00100002 	.word	0x00100002
 8000bb8:	ffff0000 	.word	0xffff0000

08000bbc <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	b08c      	sub	sp, #48	; 0x30
 8000bc0:	af02      	add	r7, sp, #8
 8000bc2:	60f8      	str	r0, [r7, #12]
 8000bc4:	607a      	str	r2, [r7, #4]
 8000bc6:	461a      	mov	r2, r3
 8000bc8:	460b      	mov	r3, r1
 8000bca:	817b      	strh	r3, [r7, #10]
 8000bcc:	4613      	mov	r3, r2
 8000bce:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8000bd0:	f7ff fb40 	bl	8000254 <HAL_GetTick>
 8000bd4:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8000bd6:	68fb      	ldr	r3, [r7, #12]
 8000bd8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8000bdc:	b2db      	uxtb	r3, r3
 8000bde:	2b20      	cmp	r3, #32
 8000be0:	f040 820b 	bne.w	8000ffa <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8000be4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000be6:	9300      	str	r3, [sp, #0]
 8000be8:	2319      	movs	r3, #25
 8000bea:	2201      	movs	r2, #1
 8000bec:	497c      	ldr	r1, [pc, #496]	; (8000de0 <HAL_I2C_Master_Receive+0x224>)
 8000bee:	68f8      	ldr	r0, [r7, #12]
 8000bf0:	f000 fb36 	bl	8001260 <I2C_WaitOnFlagUntilTimeout>
 8000bf4:	4603      	mov	r3, r0
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	d001      	beq.n	8000bfe <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8000bfa:	2302      	movs	r3, #2
 8000bfc:	e1fe      	b.n	8000ffc <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8000bfe:	68fb      	ldr	r3, [r7, #12]
 8000c00:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000c04:	2b01      	cmp	r3, #1
 8000c06:	d101      	bne.n	8000c0c <HAL_I2C_Master_Receive+0x50>
 8000c08:	2302      	movs	r3, #2
 8000c0a:	e1f7      	b.n	8000ffc <HAL_I2C_Master_Receive+0x440>
 8000c0c:	68fb      	ldr	r3, [r7, #12]
 8000c0e:	2201      	movs	r2, #1
 8000c10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8000c14:	68fb      	ldr	r3, [r7, #12]
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	681b      	ldr	r3, [r3, #0]
 8000c1a:	f003 0301 	and.w	r3, r3, #1
 8000c1e:	2b01      	cmp	r3, #1
 8000c20:	d007      	beq.n	8000c32 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8000c22:	68fb      	ldr	r3, [r7, #12]
 8000c24:	681b      	ldr	r3, [r3, #0]
 8000c26:	681a      	ldr	r2, [r3, #0]
 8000c28:	68fb      	ldr	r3, [r7, #12]
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	f042 0201 	orr.w	r2, r2, #1
 8000c30:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8000c32:	68fb      	ldr	r3, [r7, #12]
 8000c34:	681b      	ldr	r3, [r3, #0]
 8000c36:	681a      	ldr	r2, [r3, #0]
 8000c38:	68fb      	ldr	r3, [r7, #12]
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000c40:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8000c42:	68fb      	ldr	r3, [r7, #12]
 8000c44:	2222      	movs	r2, #34	; 0x22
 8000c46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8000c4a:	68fb      	ldr	r3, [r7, #12]
 8000c4c:	2210      	movs	r2, #16
 8000c4e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8000c52:	68fb      	ldr	r3, [r7, #12]
 8000c54:	2200      	movs	r2, #0
 8000c56:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8000c58:	68fb      	ldr	r3, [r7, #12]
 8000c5a:	687a      	ldr	r2, [r7, #4]
 8000c5c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8000c5e:	68fb      	ldr	r3, [r7, #12]
 8000c60:	893a      	ldrh	r2, [r7, #8]
 8000c62:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8000c64:	68fb      	ldr	r3, [r7, #12]
 8000c66:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000c68:	b29a      	uxth	r2, r3
 8000c6a:	68fb      	ldr	r3, [r7, #12]
 8000c6c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8000c6e:	68fb      	ldr	r3, [r7, #12]
 8000c70:	4a5c      	ldr	r2, [pc, #368]	; (8000de4 <HAL_I2C_Master_Receive+0x228>)
 8000c72:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8000c74:	8979      	ldrh	r1, [r7, #10]
 8000c76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c78:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000c7a:	68f8      	ldr	r0, [r7, #12]
 8000c7c:	f000 fa3a 	bl	80010f4 <I2C_MasterRequestRead>
 8000c80:	4603      	mov	r3, r0
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d001      	beq.n	8000c8a <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8000c86:	2301      	movs	r3, #1
 8000c88:	e1b8      	b.n	8000ffc <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8000c8a:	68fb      	ldr	r3, [r7, #12]
 8000c8c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	d113      	bne.n	8000cba <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8000c92:	2300      	movs	r3, #0
 8000c94:	623b      	str	r3, [r7, #32]
 8000c96:	68fb      	ldr	r3, [r7, #12]
 8000c98:	681b      	ldr	r3, [r3, #0]
 8000c9a:	695b      	ldr	r3, [r3, #20]
 8000c9c:	623b      	str	r3, [r7, #32]
 8000c9e:	68fb      	ldr	r3, [r7, #12]
 8000ca0:	681b      	ldr	r3, [r3, #0]
 8000ca2:	699b      	ldr	r3, [r3, #24]
 8000ca4:	623b      	str	r3, [r7, #32]
 8000ca6:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8000ca8:	68fb      	ldr	r3, [r7, #12]
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	681a      	ldr	r2, [r3, #0]
 8000cae:	68fb      	ldr	r3, [r7, #12]
 8000cb0:	681b      	ldr	r3, [r3, #0]
 8000cb2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000cb6:	601a      	str	r2, [r3, #0]
 8000cb8:	e18c      	b.n	8000fd4 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8000cba:	68fb      	ldr	r3, [r7, #12]
 8000cbc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000cbe:	2b01      	cmp	r3, #1
 8000cc0:	d11b      	bne.n	8000cfa <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8000cc2:	68fb      	ldr	r3, [r7, #12]
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	681a      	ldr	r2, [r3, #0]
 8000cc8:	68fb      	ldr	r3, [r7, #12]
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000cd0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	61fb      	str	r3, [r7, #28]
 8000cd6:	68fb      	ldr	r3, [r7, #12]
 8000cd8:	681b      	ldr	r3, [r3, #0]
 8000cda:	695b      	ldr	r3, [r3, #20]
 8000cdc:	61fb      	str	r3, [r7, #28]
 8000cde:	68fb      	ldr	r3, [r7, #12]
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	699b      	ldr	r3, [r3, #24]
 8000ce4:	61fb      	str	r3, [r7, #28]
 8000ce6:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8000ce8:	68fb      	ldr	r3, [r7, #12]
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	681a      	ldr	r2, [r3, #0]
 8000cee:	68fb      	ldr	r3, [r7, #12]
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000cf6:	601a      	str	r2, [r3, #0]
 8000cf8:	e16c      	b.n	8000fd4 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8000cfa:	68fb      	ldr	r3, [r7, #12]
 8000cfc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000cfe:	2b02      	cmp	r3, #2
 8000d00:	d11b      	bne.n	8000d3a <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8000d02:	68fb      	ldr	r3, [r7, #12]
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	681a      	ldr	r2, [r3, #0]
 8000d08:	68fb      	ldr	r3, [r7, #12]
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000d10:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8000d12:	68fb      	ldr	r3, [r7, #12]
 8000d14:	681b      	ldr	r3, [r3, #0]
 8000d16:	681a      	ldr	r2, [r3, #0]
 8000d18:	68fb      	ldr	r3, [r7, #12]
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8000d20:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8000d22:	2300      	movs	r3, #0
 8000d24:	61bb      	str	r3, [r7, #24]
 8000d26:	68fb      	ldr	r3, [r7, #12]
 8000d28:	681b      	ldr	r3, [r3, #0]
 8000d2a:	695b      	ldr	r3, [r3, #20]
 8000d2c:	61bb      	str	r3, [r7, #24]
 8000d2e:	68fb      	ldr	r3, [r7, #12]
 8000d30:	681b      	ldr	r3, [r3, #0]
 8000d32:	699b      	ldr	r3, [r3, #24]
 8000d34:	61bb      	str	r3, [r7, #24]
 8000d36:	69bb      	ldr	r3, [r7, #24]
 8000d38:	e14c      	b.n	8000fd4 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8000d3a:	68fb      	ldr	r3, [r7, #12]
 8000d3c:	681b      	ldr	r3, [r3, #0]
 8000d3e:	681a      	ldr	r2, [r3, #0]
 8000d40:	68fb      	ldr	r3, [r7, #12]
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000d48:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	617b      	str	r3, [r7, #20]
 8000d4e:	68fb      	ldr	r3, [r7, #12]
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	695b      	ldr	r3, [r3, #20]
 8000d54:	617b      	str	r3, [r7, #20]
 8000d56:	68fb      	ldr	r3, [r7, #12]
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	699b      	ldr	r3, [r3, #24]
 8000d5c:	617b      	str	r3, [r7, #20]
 8000d5e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8000d60:	e138      	b.n	8000fd4 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8000d62:	68fb      	ldr	r3, [r7, #12]
 8000d64:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000d66:	2b03      	cmp	r3, #3
 8000d68:	f200 80f1 	bhi.w	8000f4e <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8000d6c:	68fb      	ldr	r3, [r7, #12]
 8000d6e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000d70:	2b01      	cmp	r3, #1
 8000d72:	d123      	bne.n	8000dbc <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8000d74:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000d76:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8000d78:	68f8      	ldr	r0, [r7, #12]
 8000d7a:	f000 fbc9 	bl	8001510 <I2C_WaitOnRXNEFlagUntilTimeout>
 8000d7e:	4603      	mov	r3, r0
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d001      	beq.n	8000d88 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8000d84:	2301      	movs	r3, #1
 8000d86:	e139      	b.n	8000ffc <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8000d88:	68fb      	ldr	r3, [r7, #12]
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	691a      	ldr	r2, [r3, #16]
 8000d8e:	68fb      	ldr	r3, [r7, #12]
 8000d90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d92:	b2d2      	uxtb	r2, r2
 8000d94:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8000d96:	68fb      	ldr	r3, [r7, #12]
 8000d98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d9a:	1c5a      	adds	r2, r3, #1
 8000d9c:	68fb      	ldr	r3, [r7, #12]
 8000d9e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8000da0:	68fb      	ldr	r3, [r7, #12]
 8000da2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000da4:	3b01      	subs	r3, #1
 8000da6:	b29a      	uxth	r2, r3
 8000da8:	68fb      	ldr	r3, [r7, #12]
 8000daa:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8000dac:	68fb      	ldr	r3, [r7, #12]
 8000dae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000db0:	b29b      	uxth	r3, r3
 8000db2:	3b01      	subs	r3, #1
 8000db4:	b29a      	uxth	r2, r3
 8000db6:	68fb      	ldr	r3, [r7, #12]
 8000db8:	855a      	strh	r2, [r3, #42]	; 0x2a
 8000dba:	e10b      	b.n	8000fd4 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8000dbc:	68fb      	ldr	r3, [r7, #12]
 8000dbe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000dc0:	2b02      	cmp	r3, #2
 8000dc2:	d14e      	bne.n	8000e62 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8000dc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000dc6:	9300      	str	r3, [sp, #0]
 8000dc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000dca:	2200      	movs	r2, #0
 8000dcc:	4906      	ldr	r1, [pc, #24]	; (8000de8 <HAL_I2C_Master_Receive+0x22c>)
 8000dce:	68f8      	ldr	r0, [r7, #12]
 8000dd0:	f000 fa46 	bl	8001260 <I2C_WaitOnFlagUntilTimeout>
 8000dd4:	4603      	mov	r3, r0
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d008      	beq.n	8000dec <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8000dda:	2301      	movs	r3, #1
 8000ddc:	e10e      	b.n	8000ffc <HAL_I2C_Master_Receive+0x440>
 8000dde:	bf00      	nop
 8000de0:	00100002 	.word	0x00100002
 8000de4:	ffff0000 	.word	0xffff0000
 8000de8:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8000dec:	68fb      	ldr	r3, [r7, #12]
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	681a      	ldr	r2, [r3, #0]
 8000df2:	68fb      	ldr	r3, [r7, #12]
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000dfa:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8000dfc:	68fb      	ldr	r3, [r7, #12]
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	691a      	ldr	r2, [r3, #16]
 8000e02:	68fb      	ldr	r3, [r7, #12]
 8000e04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e06:	b2d2      	uxtb	r2, r2
 8000e08:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8000e0a:	68fb      	ldr	r3, [r7, #12]
 8000e0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e0e:	1c5a      	adds	r2, r3, #1
 8000e10:	68fb      	ldr	r3, [r7, #12]
 8000e12:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8000e14:	68fb      	ldr	r3, [r7, #12]
 8000e16:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000e18:	3b01      	subs	r3, #1
 8000e1a:	b29a      	uxth	r2, r3
 8000e1c:	68fb      	ldr	r3, [r7, #12]
 8000e1e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8000e20:	68fb      	ldr	r3, [r7, #12]
 8000e22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000e24:	b29b      	uxth	r3, r3
 8000e26:	3b01      	subs	r3, #1
 8000e28:	b29a      	uxth	r2, r3
 8000e2a:	68fb      	ldr	r3, [r7, #12]
 8000e2c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8000e2e:	68fb      	ldr	r3, [r7, #12]
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	691a      	ldr	r2, [r3, #16]
 8000e34:	68fb      	ldr	r3, [r7, #12]
 8000e36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e38:	b2d2      	uxtb	r2, r2
 8000e3a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8000e3c:	68fb      	ldr	r3, [r7, #12]
 8000e3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e40:	1c5a      	adds	r2, r3, #1
 8000e42:	68fb      	ldr	r3, [r7, #12]
 8000e44:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8000e46:	68fb      	ldr	r3, [r7, #12]
 8000e48:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000e4a:	3b01      	subs	r3, #1
 8000e4c:	b29a      	uxth	r2, r3
 8000e4e:	68fb      	ldr	r3, [r7, #12]
 8000e50:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8000e52:	68fb      	ldr	r3, [r7, #12]
 8000e54:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000e56:	b29b      	uxth	r3, r3
 8000e58:	3b01      	subs	r3, #1
 8000e5a:	b29a      	uxth	r2, r3
 8000e5c:	68fb      	ldr	r3, [r7, #12]
 8000e5e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8000e60:	e0b8      	b.n	8000fd4 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8000e62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e64:	9300      	str	r3, [sp, #0]
 8000e66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000e68:	2200      	movs	r2, #0
 8000e6a:	4966      	ldr	r1, [pc, #408]	; (8001004 <HAL_I2C_Master_Receive+0x448>)
 8000e6c:	68f8      	ldr	r0, [r7, #12]
 8000e6e:	f000 f9f7 	bl	8001260 <I2C_WaitOnFlagUntilTimeout>
 8000e72:	4603      	mov	r3, r0
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	d001      	beq.n	8000e7c <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8000e78:	2301      	movs	r3, #1
 8000e7a:	e0bf      	b.n	8000ffc <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8000e7c:	68fb      	ldr	r3, [r7, #12]
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	681a      	ldr	r2, [r3, #0]
 8000e82:	68fb      	ldr	r3, [r7, #12]
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000e8a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8000e8c:	68fb      	ldr	r3, [r7, #12]
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	691a      	ldr	r2, [r3, #16]
 8000e92:	68fb      	ldr	r3, [r7, #12]
 8000e94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e96:	b2d2      	uxtb	r2, r2
 8000e98:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8000e9a:	68fb      	ldr	r3, [r7, #12]
 8000e9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e9e:	1c5a      	adds	r2, r3, #1
 8000ea0:	68fb      	ldr	r3, [r7, #12]
 8000ea2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8000ea4:	68fb      	ldr	r3, [r7, #12]
 8000ea6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000ea8:	3b01      	subs	r3, #1
 8000eaa:	b29a      	uxth	r2, r3
 8000eac:	68fb      	ldr	r3, [r7, #12]
 8000eae:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8000eb0:	68fb      	ldr	r3, [r7, #12]
 8000eb2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000eb4:	b29b      	uxth	r3, r3
 8000eb6:	3b01      	subs	r3, #1
 8000eb8:	b29a      	uxth	r2, r3
 8000eba:	68fb      	ldr	r3, [r7, #12]
 8000ebc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8000ebe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ec0:	9300      	str	r3, [sp, #0]
 8000ec2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	494f      	ldr	r1, [pc, #316]	; (8001004 <HAL_I2C_Master_Receive+0x448>)
 8000ec8:	68f8      	ldr	r0, [r7, #12]
 8000eca:	f000 f9c9 	bl	8001260 <I2C_WaitOnFlagUntilTimeout>
 8000ece:	4603      	mov	r3, r0
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	d001      	beq.n	8000ed8 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8000ed4:	2301      	movs	r3, #1
 8000ed6:	e091      	b.n	8000ffc <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8000ed8:	68fb      	ldr	r3, [r7, #12]
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	681a      	ldr	r2, [r3, #0]
 8000ede:	68fb      	ldr	r3, [r7, #12]
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000ee6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8000ee8:	68fb      	ldr	r3, [r7, #12]
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	691a      	ldr	r2, [r3, #16]
 8000eee:	68fb      	ldr	r3, [r7, #12]
 8000ef0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ef2:	b2d2      	uxtb	r2, r2
 8000ef4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8000ef6:	68fb      	ldr	r3, [r7, #12]
 8000ef8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000efa:	1c5a      	adds	r2, r3, #1
 8000efc:	68fb      	ldr	r3, [r7, #12]
 8000efe:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8000f00:	68fb      	ldr	r3, [r7, #12]
 8000f02:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000f04:	3b01      	subs	r3, #1
 8000f06:	b29a      	uxth	r2, r3
 8000f08:	68fb      	ldr	r3, [r7, #12]
 8000f0a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8000f0c:	68fb      	ldr	r3, [r7, #12]
 8000f0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000f10:	b29b      	uxth	r3, r3
 8000f12:	3b01      	subs	r3, #1
 8000f14:	b29a      	uxth	r2, r3
 8000f16:	68fb      	ldr	r3, [r7, #12]
 8000f18:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8000f1a:	68fb      	ldr	r3, [r7, #12]
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	691a      	ldr	r2, [r3, #16]
 8000f20:	68fb      	ldr	r3, [r7, #12]
 8000f22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f24:	b2d2      	uxtb	r2, r2
 8000f26:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8000f28:	68fb      	ldr	r3, [r7, #12]
 8000f2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f2c:	1c5a      	adds	r2, r3, #1
 8000f2e:	68fb      	ldr	r3, [r7, #12]
 8000f30:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8000f32:	68fb      	ldr	r3, [r7, #12]
 8000f34:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000f36:	3b01      	subs	r3, #1
 8000f38:	b29a      	uxth	r2, r3
 8000f3a:	68fb      	ldr	r3, [r7, #12]
 8000f3c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8000f3e:	68fb      	ldr	r3, [r7, #12]
 8000f40:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000f42:	b29b      	uxth	r3, r3
 8000f44:	3b01      	subs	r3, #1
 8000f46:	b29a      	uxth	r2, r3
 8000f48:	68fb      	ldr	r3, [r7, #12]
 8000f4a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8000f4c:	e042      	b.n	8000fd4 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8000f4e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000f50:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8000f52:	68f8      	ldr	r0, [r7, #12]
 8000f54:	f000 fadc 	bl	8001510 <I2C_WaitOnRXNEFlagUntilTimeout>
 8000f58:	4603      	mov	r3, r0
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d001      	beq.n	8000f62 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8000f5e:	2301      	movs	r3, #1
 8000f60:	e04c      	b.n	8000ffc <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8000f62:	68fb      	ldr	r3, [r7, #12]
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	691a      	ldr	r2, [r3, #16]
 8000f68:	68fb      	ldr	r3, [r7, #12]
 8000f6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f6c:	b2d2      	uxtb	r2, r2
 8000f6e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8000f70:	68fb      	ldr	r3, [r7, #12]
 8000f72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f74:	1c5a      	adds	r2, r3, #1
 8000f76:	68fb      	ldr	r3, [r7, #12]
 8000f78:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8000f7a:	68fb      	ldr	r3, [r7, #12]
 8000f7c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000f7e:	3b01      	subs	r3, #1
 8000f80:	b29a      	uxth	r2, r3
 8000f82:	68fb      	ldr	r3, [r7, #12]
 8000f84:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8000f86:	68fb      	ldr	r3, [r7, #12]
 8000f88:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000f8a:	b29b      	uxth	r3, r3
 8000f8c:	3b01      	subs	r3, #1
 8000f8e:	b29a      	uxth	r2, r3
 8000f90:	68fb      	ldr	r3, [r7, #12]
 8000f92:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8000f94:	68fb      	ldr	r3, [r7, #12]
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	695b      	ldr	r3, [r3, #20]
 8000f9a:	f003 0304 	and.w	r3, r3, #4
 8000f9e:	2b04      	cmp	r3, #4
 8000fa0:	d118      	bne.n	8000fd4 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8000fa2:	68fb      	ldr	r3, [r7, #12]
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	691a      	ldr	r2, [r3, #16]
 8000fa8:	68fb      	ldr	r3, [r7, #12]
 8000faa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fac:	b2d2      	uxtb	r2, r2
 8000fae:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8000fb0:	68fb      	ldr	r3, [r7, #12]
 8000fb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fb4:	1c5a      	adds	r2, r3, #1
 8000fb6:	68fb      	ldr	r3, [r7, #12]
 8000fb8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8000fba:	68fb      	ldr	r3, [r7, #12]
 8000fbc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000fbe:	3b01      	subs	r3, #1
 8000fc0:	b29a      	uxth	r2, r3
 8000fc2:	68fb      	ldr	r3, [r7, #12]
 8000fc4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8000fc6:	68fb      	ldr	r3, [r7, #12]
 8000fc8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000fca:	b29b      	uxth	r3, r3
 8000fcc:	3b01      	subs	r3, #1
 8000fce:	b29a      	uxth	r2, r3
 8000fd0:	68fb      	ldr	r3, [r7, #12]
 8000fd2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8000fd4:	68fb      	ldr	r3, [r7, #12]
 8000fd6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	f47f aec2 	bne.w	8000d62 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8000fde:	68fb      	ldr	r3, [r7, #12]
 8000fe0:	2220      	movs	r2, #32
 8000fe2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8000fe6:	68fb      	ldr	r3, [r7, #12]
 8000fe8:	2200      	movs	r2, #0
 8000fea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8000fee:	68fb      	ldr	r3, [r7, #12]
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	e000      	b.n	8000ffc <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8000ffa:	2302      	movs	r3, #2
  }
}
 8000ffc:	4618      	mov	r0, r3
 8000ffe:	3728      	adds	r7, #40	; 0x28
 8001000:	46bd      	mov	sp, r7
 8001002:	bd80      	pop	{r7, pc}
 8001004:	00010004 	.word	0x00010004

08001008 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	b088      	sub	sp, #32
 800100c:	af02      	add	r7, sp, #8
 800100e:	60f8      	str	r0, [r7, #12]
 8001010:	607a      	str	r2, [r7, #4]
 8001012:	603b      	str	r3, [r7, #0]
 8001014:	460b      	mov	r3, r1
 8001016:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001018:	68fb      	ldr	r3, [r7, #12]
 800101a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800101c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800101e:	697b      	ldr	r3, [r7, #20]
 8001020:	2b08      	cmp	r3, #8
 8001022:	d006      	beq.n	8001032 <I2C_MasterRequestWrite+0x2a>
 8001024:	697b      	ldr	r3, [r7, #20]
 8001026:	2b01      	cmp	r3, #1
 8001028:	d003      	beq.n	8001032 <I2C_MasterRequestWrite+0x2a>
 800102a:	697b      	ldr	r3, [r7, #20]
 800102c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001030:	d108      	bne.n	8001044 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001032:	68fb      	ldr	r3, [r7, #12]
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	681a      	ldr	r2, [r3, #0]
 8001038:	68fb      	ldr	r3, [r7, #12]
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001040:	601a      	str	r2, [r3, #0]
 8001042:	e00b      	b.n	800105c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8001044:	68fb      	ldr	r3, [r7, #12]
 8001046:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001048:	2b12      	cmp	r3, #18
 800104a:	d107      	bne.n	800105c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800104c:	68fb      	ldr	r3, [r7, #12]
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	681a      	ldr	r2, [r3, #0]
 8001052:	68fb      	ldr	r3, [r7, #12]
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800105a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800105c:	683b      	ldr	r3, [r7, #0]
 800105e:	9300      	str	r3, [sp, #0]
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	2200      	movs	r2, #0
 8001064:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001068:	68f8      	ldr	r0, [r7, #12]
 800106a:	f000 f8f9 	bl	8001260 <I2C_WaitOnFlagUntilTimeout>
 800106e:	4603      	mov	r3, r0
 8001070:	2b00      	cmp	r3, #0
 8001072:	d001      	beq.n	8001078 <I2C_MasterRequestWrite+0x70>
  {
    return HAL_ERROR;
 8001074:	2301      	movs	r3, #1
 8001076:	e035      	b.n	80010e4 <I2C_MasterRequestWrite+0xdc>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001078:	68fb      	ldr	r3, [r7, #12]
 800107a:	691b      	ldr	r3, [r3, #16]
 800107c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001080:	d108      	bne.n	8001094 <I2C_MasterRequestWrite+0x8c>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001082:	897b      	ldrh	r3, [r7, #10]
 8001084:	b2db      	uxtb	r3, r3
 8001086:	461a      	mov	r2, r3
 8001088:	68fb      	ldr	r3, [r7, #12]
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001090:	611a      	str	r2, [r3, #16]
 8001092:	e01b      	b.n	80010cc <I2C_MasterRequestWrite+0xc4>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8001094:	897b      	ldrh	r3, [r7, #10]
 8001096:	11db      	asrs	r3, r3, #7
 8001098:	b2db      	uxtb	r3, r3
 800109a:	f003 0306 	and.w	r3, r3, #6
 800109e:	b2db      	uxtb	r3, r3
 80010a0:	f063 030f 	orn	r3, r3, #15
 80010a4:	b2da      	uxtb	r2, r3
 80010a6:	68fb      	ldr	r3, [r7, #12]
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80010ac:	683b      	ldr	r3, [r7, #0]
 80010ae:	687a      	ldr	r2, [r7, #4]
 80010b0:	490e      	ldr	r1, [pc, #56]	; (80010ec <I2C_MasterRequestWrite+0xe4>)
 80010b2:	68f8      	ldr	r0, [r7, #12]
 80010b4:	f000 f92b 	bl	800130e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80010b8:	4603      	mov	r3, r0
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d001      	beq.n	80010c2 <I2C_MasterRequestWrite+0xba>
    {
      return HAL_ERROR;
 80010be:	2301      	movs	r3, #1
 80010c0:	e010      	b.n	80010e4 <I2C_MasterRequestWrite+0xdc>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80010c2:	897b      	ldrh	r3, [r7, #10]
 80010c4:	b2da      	uxtb	r2, r3
 80010c6:	68fb      	ldr	r3, [r7, #12]
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80010cc:	683b      	ldr	r3, [r7, #0]
 80010ce:	687a      	ldr	r2, [r7, #4]
 80010d0:	4907      	ldr	r1, [pc, #28]	; (80010f0 <I2C_MasterRequestWrite+0xe8>)
 80010d2:	68f8      	ldr	r0, [r7, #12]
 80010d4:	f000 f91b 	bl	800130e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80010d8:	4603      	mov	r3, r0
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d001      	beq.n	80010e2 <I2C_MasterRequestWrite+0xda>
  {
    return HAL_ERROR;
 80010de:	2301      	movs	r3, #1
 80010e0:	e000      	b.n	80010e4 <I2C_MasterRequestWrite+0xdc>
  }

  return HAL_OK;
 80010e2:	2300      	movs	r3, #0
}
 80010e4:	4618      	mov	r0, r3
 80010e6:	3718      	adds	r7, #24
 80010e8:	46bd      	mov	sp, r7
 80010ea:	bd80      	pop	{r7, pc}
 80010ec:	00010008 	.word	0x00010008
 80010f0:	00010002 	.word	0x00010002

080010f4 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b088      	sub	sp, #32
 80010f8:	af02      	add	r7, sp, #8
 80010fa:	60f8      	str	r0, [r7, #12]
 80010fc:	607a      	str	r2, [r7, #4]
 80010fe:	603b      	str	r3, [r7, #0]
 8001100:	460b      	mov	r3, r1
 8001102:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001104:	68fb      	ldr	r3, [r7, #12]
 8001106:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001108:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800110a:	68fb      	ldr	r3, [r7, #12]
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	681a      	ldr	r2, [r3, #0]
 8001110:	68fb      	ldr	r3, [r7, #12]
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001118:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800111a:	697b      	ldr	r3, [r7, #20]
 800111c:	2b08      	cmp	r3, #8
 800111e:	d006      	beq.n	800112e <I2C_MasterRequestRead+0x3a>
 8001120:	697b      	ldr	r3, [r7, #20]
 8001122:	2b01      	cmp	r3, #1
 8001124:	d003      	beq.n	800112e <I2C_MasterRequestRead+0x3a>
 8001126:	697b      	ldr	r3, [r7, #20]
 8001128:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800112c:	d108      	bne.n	8001140 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800112e:	68fb      	ldr	r3, [r7, #12]
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	681a      	ldr	r2, [r3, #0]
 8001134:	68fb      	ldr	r3, [r7, #12]
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800113c:	601a      	str	r2, [r3, #0]
 800113e:	e00b      	b.n	8001158 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8001140:	68fb      	ldr	r3, [r7, #12]
 8001142:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001144:	2b11      	cmp	r3, #17
 8001146:	d107      	bne.n	8001158 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001148:	68fb      	ldr	r3, [r7, #12]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	681a      	ldr	r2, [r3, #0]
 800114e:	68fb      	ldr	r3, [r7, #12]
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001156:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001158:	683b      	ldr	r3, [r7, #0]
 800115a:	9300      	str	r3, [sp, #0]
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	2200      	movs	r2, #0
 8001160:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001164:	68f8      	ldr	r0, [r7, #12]
 8001166:	f000 f87b 	bl	8001260 <I2C_WaitOnFlagUntilTimeout>
 800116a:	4603      	mov	r3, r0
 800116c:	2b00      	cmp	r3, #0
 800116e:	d001      	beq.n	8001174 <I2C_MasterRequestRead+0x80>
  {
    return HAL_ERROR;
 8001170:	2301      	movs	r3, #1
 8001172:	e06d      	b.n	8001250 <I2C_MasterRequestRead+0x15c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001174:	68fb      	ldr	r3, [r7, #12]
 8001176:	691b      	ldr	r3, [r3, #16]
 8001178:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800117c:	d108      	bne.n	8001190 <I2C_MasterRequestRead+0x9c>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800117e:	897b      	ldrh	r3, [r7, #10]
 8001180:	b2db      	uxtb	r3, r3
 8001182:	f043 0301 	orr.w	r3, r3, #1
 8001186:	b2da      	uxtb	r2, r3
 8001188:	68fb      	ldr	r3, [r7, #12]
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	611a      	str	r2, [r3, #16]
 800118e:	e053      	b.n	8001238 <I2C_MasterRequestRead+0x144>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8001190:	897b      	ldrh	r3, [r7, #10]
 8001192:	11db      	asrs	r3, r3, #7
 8001194:	b2db      	uxtb	r3, r3
 8001196:	f003 0306 	and.w	r3, r3, #6
 800119a:	b2db      	uxtb	r3, r3
 800119c:	f063 030f 	orn	r3, r3, #15
 80011a0:	b2da      	uxtb	r2, r3
 80011a2:	68fb      	ldr	r3, [r7, #12]
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80011a8:	683b      	ldr	r3, [r7, #0]
 80011aa:	687a      	ldr	r2, [r7, #4]
 80011ac:	492a      	ldr	r1, [pc, #168]	; (8001258 <I2C_MasterRequestRead+0x164>)
 80011ae:	68f8      	ldr	r0, [r7, #12]
 80011b0:	f000 f8ad 	bl	800130e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80011b4:	4603      	mov	r3, r0
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d001      	beq.n	80011be <I2C_MasterRequestRead+0xca>
    {
      return HAL_ERROR;
 80011ba:	2301      	movs	r3, #1
 80011bc:	e048      	b.n	8001250 <I2C_MasterRequestRead+0x15c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80011be:	897b      	ldrh	r3, [r7, #10]
 80011c0:	b2da      	uxtb	r2, r3
 80011c2:	68fb      	ldr	r3, [r7, #12]
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80011c8:	683b      	ldr	r3, [r7, #0]
 80011ca:	687a      	ldr	r2, [r7, #4]
 80011cc:	4923      	ldr	r1, [pc, #140]	; (800125c <I2C_MasterRequestRead+0x168>)
 80011ce:	68f8      	ldr	r0, [r7, #12]
 80011d0:	f000 f89d 	bl	800130e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80011d4:	4603      	mov	r3, r0
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d001      	beq.n	80011de <I2C_MasterRequestRead+0xea>
    {
      return HAL_ERROR;
 80011da:	2301      	movs	r3, #1
 80011dc:	e038      	b.n	8001250 <I2C_MasterRequestRead+0x15c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80011de:	2300      	movs	r3, #0
 80011e0:	613b      	str	r3, [r7, #16]
 80011e2:	68fb      	ldr	r3, [r7, #12]
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	695b      	ldr	r3, [r3, #20]
 80011e8:	613b      	str	r3, [r7, #16]
 80011ea:	68fb      	ldr	r3, [r7, #12]
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	699b      	ldr	r3, [r3, #24]
 80011f0:	613b      	str	r3, [r7, #16]
 80011f2:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80011f4:	68fb      	ldr	r3, [r7, #12]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	681a      	ldr	r2, [r3, #0]
 80011fa:	68fb      	ldr	r3, [r7, #12]
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001202:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001204:	683b      	ldr	r3, [r7, #0]
 8001206:	9300      	str	r3, [sp, #0]
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	2200      	movs	r2, #0
 800120c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001210:	68f8      	ldr	r0, [r7, #12]
 8001212:	f000 f825 	bl	8001260 <I2C_WaitOnFlagUntilTimeout>
 8001216:	4603      	mov	r3, r0
 8001218:	2b00      	cmp	r3, #0
 800121a:	d001      	beq.n	8001220 <I2C_MasterRequestRead+0x12c>
    {
      return HAL_ERROR;
 800121c:	2301      	movs	r3, #1
 800121e:	e017      	b.n	8001250 <I2C_MasterRequestRead+0x15c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8001220:	897b      	ldrh	r3, [r7, #10]
 8001222:	11db      	asrs	r3, r3, #7
 8001224:	b2db      	uxtb	r3, r3
 8001226:	f003 0306 	and.w	r3, r3, #6
 800122a:	b2db      	uxtb	r3, r3
 800122c:	f063 030e 	orn	r3, r3, #14
 8001230:	b2da      	uxtb	r2, r3
 8001232:	68fb      	ldr	r3, [r7, #12]
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001238:	683b      	ldr	r3, [r7, #0]
 800123a:	687a      	ldr	r2, [r7, #4]
 800123c:	4907      	ldr	r1, [pc, #28]	; (800125c <I2C_MasterRequestRead+0x168>)
 800123e:	68f8      	ldr	r0, [r7, #12]
 8001240:	f000 f865 	bl	800130e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001244:	4603      	mov	r3, r0
 8001246:	2b00      	cmp	r3, #0
 8001248:	d001      	beq.n	800124e <I2C_MasterRequestRead+0x15a>
  {
    return HAL_ERROR;
 800124a:	2301      	movs	r3, #1
 800124c:	e000      	b.n	8001250 <I2C_MasterRequestRead+0x15c>
  }

  return HAL_OK;
 800124e:	2300      	movs	r3, #0
}
 8001250:	4618      	mov	r0, r3
 8001252:	3718      	adds	r7, #24
 8001254:	46bd      	mov	sp, r7
 8001256:	bd80      	pop	{r7, pc}
 8001258:	00010008 	.word	0x00010008
 800125c:	00010002 	.word	0x00010002

08001260 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	b084      	sub	sp, #16
 8001264:	af00      	add	r7, sp, #0
 8001266:	60f8      	str	r0, [r7, #12]
 8001268:	60b9      	str	r1, [r7, #8]
 800126a:	603b      	str	r3, [r7, #0]
 800126c:	4613      	mov	r3, r2
 800126e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001270:	e025      	b.n	80012be <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001272:	683b      	ldr	r3, [r7, #0]
 8001274:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001278:	d021      	beq.n	80012be <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800127a:	f7fe ffeb 	bl	8000254 <HAL_GetTick>
 800127e:	4602      	mov	r2, r0
 8001280:	69bb      	ldr	r3, [r7, #24]
 8001282:	1ad3      	subs	r3, r2, r3
 8001284:	683a      	ldr	r2, [r7, #0]
 8001286:	429a      	cmp	r2, r3
 8001288:	d302      	bcc.n	8001290 <I2C_WaitOnFlagUntilTimeout+0x30>
 800128a:	683b      	ldr	r3, [r7, #0]
 800128c:	2b00      	cmp	r3, #0
 800128e:	d116      	bne.n	80012be <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8001290:	68fb      	ldr	r3, [r7, #12]
 8001292:	2200      	movs	r2, #0
 8001294:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8001296:	68fb      	ldr	r3, [r7, #12]
 8001298:	2220      	movs	r2, #32
 800129a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800129e:	68fb      	ldr	r3, [r7, #12]
 80012a0:	2200      	movs	r2, #0
 80012a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80012a6:	68fb      	ldr	r3, [r7, #12]
 80012a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012aa:	f043 0220 	orr.w	r2, r3, #32
 80012ae:	68fb      	ldr	r3, [r7, #12]
 80012b0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80012b2:	68fb      	ldr	r3, [r7, #12]
 80012b4:	2200      	movs	r2, #0
 80012b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80012ba:	2301      	movs	r3, #1
 80012bc:	e023      	b.n	8001306 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80012be:	68bb      	ldr	r3, [r7, #8]
 80012c0:	0c1b      	lsrs	r3, r3, #16
 80012c2:	b2db      	uxtb	r3, r3
 80012c4:	2b01      	cmp	r3, #1
 80012c6:	d10d      	bne.n	80012e4 <I2C_WaitOnFlagUntilTimeout+0x84>
 80012c8:	68fb      	ldr	r3, [r7, #12]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	695b      	ldr	r3, [r3, #20]
 80012ce:	43da      	mvns	r2, r3
 80012d0:	68bb      	ldr	r3, [r7, #8]
 80012d2:	4013      	ands	r3, r2
 80012d4:	b29b      	uxth	r3, r3
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	bf0c      	ite	eq
 80012da:	2301      	moveq	r3, #1
 80012dc:	2300      	movne	r3, #0
 80012de:	b2db      	uxtb	r3, r3
 80012e0:	461a      	mov	r2, r3
 80012e2:	e00c      	b.n	80012fe <I2C_WaitOnFlagUntilTimeout+0x9e>
 80012e4:	68fb      	ldr	r3, [r7, #12]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	699b      	ldr	r3, [r3, #24]
 80012ea:	43da      	mvns	r2, r3
 80012ec:	68bb      	ldr	r3, [r7, #8]
 80012ee:	4013      	ands	r3, r2
 80012f0:	b29b      	uxth	r3, r3
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	bf0c      	ite	eq
 80012f6:	2301      	moveq	r3, #1
 80012f8:	2300      	movne	r3, #0
 80012fa:	b2db      	uxtb	r3, r3
 80012fc:	461a      	mov	r2, r3
 80012fe:	79fb      	ldrb	r3, [r7, #7]
 8001300:	429a      	cmp	r2, r3
 8001302:	d0b6      	beq.n	8001272 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001304:	2300      	movs	r3, #0
}
 8001306:	4618      	mov	r0, r3
 8001308:	3710      	adds	r7, #16
 800130a:	46bd      	mov	sp, r7
 800130c:	bd80      	pop	{r7, pc}

0800130e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800130e:	b580      	push	{r7, lr}
 8001310:	b084      	sub	sp, #16
 8001312:	af00      	add	r7, sp, #0
 8001314:	60f8      	str	r0, [r7, #12]
 8001316:	60b9      	str	r1, [r7, #8]
 8001318:	607a      	str	r2, [r7, #4]
 800131a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800131c:	e051      	b.n	80013c2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800131e:	68fb      	ldr	r3, [r7, #12]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	695b      	ldr	r3, [r3, #20]
 8001324:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001328:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800132c:	d123      	bne.n	8001376 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800132e:	68fb      	ldr	r3, [r7, #12]
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	681a      	ldr	r2, [r3, #0]
 8001334:	68fb      	ldr	r3, [r7, #12]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800133c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800133e:	68fb      	ldr	r3, [r7, #12]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001346:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8001348:	68fb      	ldr	r3, [r7, #12]
 800134a:	2200      	movs	r2, #0
 800134c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800134e:	68fb      	ldr	r3, [r7, #12]
 8001350:	2220      	movs	r2, #32
 8001352:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001356:	68fb      	ldr	r3, [r7, #12]
 8001358:	2200      	movs	r2, #0
 800135a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800135e:	68fb      	ldr	r3, [r7, #12]
 8001360:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001362:	f043 0204 	orr.w	r2, r3, #4
 8001366:	68fb      	ldr	r3, [r7, #12]
 8001368:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800136a:	68fb      	ldr	r3, [r7, #12]
 800136c:	2200      	movs	r2, #0
 800136e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8001372:	2301      	movs	r3, #1
 8001374:	e046      	b.n	8001404 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800137c:	d021      	beq.n	80013c2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800137e:	f7fe ff69 	bl	8000254 <HAL_GetTick>
 8001382:	4602      	mov	r2, r0
 8001384:	683b      	ldr	r3, [r7, #0]
 8001386:	1ad3      	subs	r3, r2, r3
 8001388:	687a      	ldr	r2, [r7, #4]
 800138a:	429a      	cmp	r2, r3
 800138c:	d302      	bcc.n	8001394 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	2b00      	cmp	r3, #0
 8001392:	d116      	bne.n	80013c2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001394:	68fb      	ldr	r3, [r7, #12]
 8001396:	2200      	movs	r2, #0
 8001398:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800139a:	68fb      	ldr	r3, [r7, #12]
 800139c:	2220      	movs	r2, #32
 800139e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80013a2:	68fb      	ldr	r3, [r7, #12]
 80013a4:	2200      	movs	r2, #0
 80013a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80013aa:	68fb      	ldr	r3, [r7, #12]
 80013ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013ae:	f043 0220 	orr.w	r2, r3, #32
 80013b2:	68fb      	ldr	r3, [r7, #12]
 80013b4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80013b6:	68fb      	ldr	r3, [r7, #12]
 80013b8:	2200      	movs	r2, #0
 80013ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80013be:	2301      	movs	r3, #1
 80013c0:	e020      	b.n	8001404 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80013c2:	68bb      	ldr	r3, [r7, #8]
 80013c4:	0c1b      	lsrs	r3, r3, #16
 80013c6:	b2db      	uxtb	r3, r3
 80013c8:	2b01      	cmp	r3, #1
 80013ca:	d10c      	bne.n	80013e6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80013cc:	68fb      	ldr	r3, [r7, #12]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	695b      	ldr	r3, [r3, #20]
 80013d2:	43da      	mvns	r2, r3
 80013d4:	68bb      	ldr	r3, [r7, #8]
 80013d6:	4013      	ands	r3, r2
 80013d8:	b29b      	uxth	r3, r3
 80013da:	2b00      	cmp	r3, #0
 80013dc:	bf14      	ite	ne
 80013de:	2301      	movne	r3, #1
 80013e0:	2300      	moveq	r3, #0
 80013e2:	b2db      	uxtb	r3, r3
 80013e4:	e00b      	b.n	80013fe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80013e6:	68fb      	ldr	r3, [r7, #12]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	699b      	ldr	r3, [r3, #24]
 80013ec:	43da      	mvns	r2, r3
 80013ee:	68bb      	ldr	r3, [r7, #8]
 80013f0:	4013      	ands	r3, r2
 80013f2:	b29b      	uxth	r3, r3
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	bf14      	ite	ne
 80013f8:	2301      	movne	r3, #1
 80013fa:	2300      	moveq	r3, #0
 80013fc:	b2db      	uxtb	r3, r3
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d18d      	bne.n	800131e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8001402:	2300      	movs	r3, #0
}
 8001404:	4618      	mov	r0, r3
 8001406:	3710      	adds	r7, #16
 8001408:	46bd      	mov	sp, r7
 800140a:	bd80      	pop	{r7, pc}

0800140c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	b084      	sub	sp, #16
 8001410:	af00      	add	r7, sp, #0
 8001412:	60f8      	str	r0, [r7, #12]
 8001414:	60b9      	str	r1, [r7, #8]
 8001416:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001418:	e02d      	b.n	8001476 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800141a:	68f8      	ldr	r0, [r7, #12]
 800141c:	f000 f8ce 	bl	80015bc <I2C_IsAcknowledgeFailed>
 8001420:	4603      	mov	r3, r0
 8001422:	2b00      	cmp	r3, #0
 8001424:	d001      	beq.n	800142a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001426:	2301      	movs	r3, #1
 8001428:	e02d      	b.n	8001486 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800142a:	68bb      	ldr	r3, [r7, #8]
 800142c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001430:	d021      	beq.n	8001476 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001432:	f7fe ff0f 	bl	8000254 <HAL_GetTick>
 8001436:	4602      	mov	r2, r0
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	1ad3      	subs	r3, r2, r3
 800143c:	68ba      	ldr	r2, [r7, #8]
 800143e:	429a      	cmp	r2, r3
 8001440:	d302      	bcc.n	8001448 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8001442:	68bb      	ldr	r3, [r7, #8]
 8001444:	2b00      	cmp	r3, #0
 8001446:	d116      	bne.n	8001476 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001448:	68fb      	ldr	r3, [r7, #12]
 800144a:	2200      	movs	r2, #0
 800144c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800144e:	68fb      	ldr	r3, [r7, #12]
 8001450:	2220      	movs	r2, #32
 8001452:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001456:	68fb      	ldr	r3, [r7, #12]
 8001458:	2200      	movs	r2, #0
 800145a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800145e:	68fb      	ldr	r3, [r7, #12]
 8001460:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001462:	f043 0220 	orr.w	r2, r3, #32
 8001466:	68fb      	ldr	r3, [r7, #12]
 8001468:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800146a:	68fb      	ldr	r3, [r7, #12]
 800146c:	2200      	movs	r2, #0
 800146e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001472:	2301      	movs	r3, #1
 8001474:	e007      	b.n	8001486 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001476:	68fb      	ldr	r3, [r7, #12]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	695b      	ldr	r3, [r3, #20]
 800147c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001480:	2b80      	cmp	r3, #128	; 0x80
 8001482:	d1ca      	bne.n	800141a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001484:	2300      	movs	r3, #0
}
 8001486:	4618      	mov	r0, r3
 8001488:	3710      	adds	r7, #16
 800148a:	46bd      	mov	sp, r7
 800148c:	bd80      	pop	{r7, pc}

0800148e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800148e:	b580      	push	{r7, lr}
 8001490:	b084      	sub	sp, #16
 8001492:	af00      	add	r7, sp, #0
 8001494:	60f8      	str	r0, [r7, #12]
 8001496:	60b9      	str	r1, [r7, #8]
 8001498:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800149a:	e02d      	b.n	80014f8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800149c:	68f8      	ldr	r0, [r7, #12]
 800149e:	f000 f88d 	bl	80015bc <I2C_IsAcknowledgeFailed>
 80014a2:	4603      	mov	r3, r0
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d001      	beq.n	80014ac <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80014a8:	2301      	movs	r3, #1
 80014aa:	e02d      	b.n	8001508 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80014ac:	68bb      	ldr	r3, [r7, #8]
 80014ae:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80014b2:	d021      	beq.n	80014f8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80014b4:	f7fe fece 	bl	8000254 <HAL_GetTick>
 80014b8:	4602      	mov	r2, r0
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	1ad3      	subs	r3, r2, r3
 80014be:	68ba      	ldr	r2, [r7, #8]
 80014c0:	429a      	cmp	r2, r3
 80014c2:	d302      	bcc.n	80014ca <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80014c4:	68bb      	ldr	r3, [r7, #8]
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d116      	bne.n	80014f8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80014ca:	68fb      	ldr	r3, [r7, #12]
 80014cc:	2200      	movs	r2, #0
 80014ce:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80014d0:	68fb      	ldr	r3, [r7, #12]
 80014d2:	2220      	movs	r2, #32
 80014d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80014d8:	68fb      	ldr	r3, [r7, #12]
 80014da:	2200      	movs	r2, #0
 80014dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80014e0:	68fb      	ldr	r3, [r7, #12]
 80014e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014e4:	f043 0220 	orr.w	r2, r3, #32
 80014e8:	68fb      	ldr	r3, [r7, #12]
 80014ea:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80014ec:	68fb      	ldr	r3, [r7, #12]
 80014ee:	2200      	movs	r2, #0
 80014f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80014f4:	2301      	movs	r3, #1
 80014f6:	e007      	b.n	8001508 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	695b      	ldr	r3, [r3, #20]
 80014fe:	f003 0304 	and.w	r3, r3, #4
 8001502:	2b04      	cmp	r3, #4
 8001504:	d1ca      	bne.n	800149c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001506:	2300      	movs	r3, #0
}
 8001508:	4618      	mov	r0, r3
 800150a:	3710      	adds	r7, #16
 800150c:	46bd      	mov	sp, r7
 800150e:	bd80      	pop	{r7, pc}

08001510 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	b084      	sub	sp, #16
 8001514:	af00      	add	r7, sp, #0
 8001516:	60f8      	str	r0, [r7, #12]
 8001518:	60b9      	str	r1, [r7, #8]
 800151a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800151c:	e042      	b.n	80015a4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800151e:	68fb      	ldr	r3, [r7, #12]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	695b      	ldr	r3, [r3, #20]
 8001524:	f003 0310 	and.w	r3, r3, #16
 8001528:	2b10      	cmp	r3, #16
 800152a:	d119      	bne.n	8001560 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800152c:	68fb      	ldr	r3, [r7, #12]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	f06f 0210 	mvn.w	r2, #16
 8001534:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8001536:	68fb      	ldr	r3, [r7, #12]
 8001538:	2200      	movs	r2, #0
 800153a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	2220      	movs	r2, #32
 8001540:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001544:	68fb      	ldr	r3, [r7, #12]
 8001546:	2200      	movs	r2, #0
 8001548:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800154c:	68fb      	ldr	r3, [r7, #12]
 800154e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001550:	68fb      	ldr	r3, [r7, #12]
 8001552:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	2200      	movs	r2, #0
 8001558:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800155c:	2301      	movs	r3, #1
 800155e:	e029      	b.n	80015b4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001560:	f7fe fe78 	bl	8000254 <HAL_GetTick>
 8001564:	4602      	mov	r2, r0
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	1ad3      	subs	r3, r2, r3
 800156a:	68ba      	ldr	r2, [r7, #8]
 800156c:	429a      	cmp	r2, r3
 800156e:	d302      	bcc.n	8001576 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8001570:	68bb      	ldr	r3, [r7, #8]
 8001572:	2b00      	cmp	r3, #0
 8001574:	d116      	bne.n	80015a4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8001576:	68fb      	ldr	r3, [r7, #12]
 8001578:	2200      	movs	r2, #0
 800157a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	2220      	movs	r2, #32
 8001580:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	2200      	movs	r2, #0
 8001588:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001590:	f043 0220 	orr.w	r2, r3, #32
 8001594:	68fb      	ldr	r3, [r7, #12]
 8001596:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	2200      	movs	r2, #0
 800159c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80015a0:	2301      	movs	r3, #1
 80015a2:	e007      	b.n	80015b4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80015a4:	68fb      	ldr	r3, [r7, #12]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	695b      	ldr	r3, [r3, #20]
 80015aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80015ae:	2b40      	cmp	r3, #64	; 0x40
 80015b0:	d1b5      	bne.n	800151e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80015b2:	2300      	movs	r3, #0
}
 80015b4:	4618      	mov	r0, r3
 80015b6:	3710      	adds	r7, #16
 80015b8:	46bd      	mov	sp, r7
 80015ba:	bd80      	pop	{r7, pc}

080015bc <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80015bc:	b480      	push	{r7}
 80015be:	b083      	sub	sp, #12
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	695b      	ldr	r3, [r3, #20]
 80015ca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80015ce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80015d2:	d11b      	bne.n	800160c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80015dc:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	2200      	movs	r2, #0
 80015e2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	2220      	movs	r2, #32
 80015e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	2200      	movs	r2, #0
 80015f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015f8:	f043 0204 	orr.w	r2, r3, #4
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	2200      	movs	r2, #0
 8001604:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8001608:	2301      	movs	r3, #1
 800160a:	e000      	b.n	800160e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800160c:	2300      	movs	r3, #0
}
 800160e:	4618      	mov	r0, r3
 8001610:	370c      	adds	r7, #12
 8001612:	46bd      	mov	sp, r7
 8001614:	bc80      	pop	{r7}
 8001616:	4770      	bx	lr

08001618 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	b088      	sub	sp, #32
 800161c:	af00      	add	r7, sp, #0
 800161e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	2b00      	cmp	r3, #0
 8001624:	d101      	bne.n	800162a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001626:	2301      	movs	r3, #1
 8001628:	e31d      	b.n	8001c66 <HAL_RCC_OscConfig+0x64e>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800162a:	4b94      	ldr	r3, [pc, #592]	; (800187c <HAL_RCC_OscConfig+0x264>)
 800162c:	689b      	ldr	r3, [r3, #8]
 800162e:	f003 030c 	and.w	r3, r3, #12
 8001632:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001634:	4b91      	ldr	r3, [pc, #580]	; (800187c <HAL_RCC_OscConfig+0x264>)
 8001636:	689b      	ldr	r3, [r3, #8]
 8001638:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800163c:	617b      	str	r3, [r7, #20]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	f003 0301 	and.w	r3, r3, #1
 8001646:	2b00      	cmp	r3, #0
 8001648:	d07b      	beq.n	8001742 <HAL_RCC_OscConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 800164a:	69bb      	ldr	r3, [r7, #24]
 800164c:	2b08      	cmp	r3, #8
 800164e:	d006      	beq.n	800165e <HAL_RCC_OscConfig+0x46>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001650:	69bb      	ldr	r3, [r7, #24]
 8001652:	2b0c      	cmp	r3, #12
 8001654:	d10f      	bne.n	8001676 <HAL_RCC_OscConfig+0x5e>
 8001656:	697b      	ldr	r3, [r7, #20]
 8001658:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800165c:	d10b      	bne.n	8001676 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800165e:	4b87      	ldr	r3, [pc, #540]	; (800187c <HAL_RCC_OscConfig+0x264>)
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001666:	2b00      	cmp	r3, #0
 8001668:	d06a      	beq.n	8001740 <HAL_RCC_OscConfig+0x128>
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	685b      	ldr	r3, [r3, #4]
 800166e:	2b00      	cmp	r3, #0
 8001670:	d166      	bne.n	8001740 <HAL_RCC_OscConfig+0x128>
      {
        return HAL_ERROR;
 8001672:	2301      	movs	r3, #1
 8001674:	e2f7      	b.n	8001c66 <HAL_RCC_OscConfig+0x64e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	685b      	ldr	r3, [r3, #4]
 800167a:	2b01      	cmp	r3, #1
 800167c:	d106      	bne.n	800168c <HAL_RCC_OscConfig+0x74>
 800167e:	4b7f      	ldr	r3, [pc, #508]	; (800187c <HAL_RCC_OscConfig+0x264>)
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	4a7e      	ldr	r2, [pc, #504]	; (800187c <HAL_RCC_OscConfig+0x264>)
 8001684:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001688:	6013      	str	r3, [r2, #0]
 800168a:	e02d      	b.n	80016e8 <HAL_RCC_OscConfig+0xd0>
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	685b      	ldr	r3, [r3, #4]
 8001690:	2b00      	cmp	r3, #0
 8001692:	d10c      	bne.n	80016ae <HAL_RCC_OscConfig+0x96>
 8001694:	4b79      	ldr	r3, [pc, #484]	; (800187c <HAL_RCC_OscConfig+0x264>)
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	4a78      	ldr	r2, [pc, #480]	; (800187c <HAL_RCC_OscConfig+0x264>)
 800169a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800169e:	6013      	str	r3, [r2, #0]
 80016a0:	4b76      	ldr	r3, [pc, #472]	; (800187c <HAL_RCC_OscConfig+0x264>)
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	4a75      	ldr	r2, [pc, #468]	; (800187c <HAL_RCC_OscConfig+0x264>)
 80016a6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80016aa:	6013      	str	r3, [r2, #0]
 80016ac:	e01c      	b.n	80016e8 <HAL_RCC_OscConfig+0xd0>
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	685b      	ldr	r3, [r3, #4]
 80016b2:	2b05      	cmp	r3, #5
 80016b4:	d10c      	bne.n	80016d0 <HAL_RCC_OscConfig+0xb8>
 80016b6:	4b71      	ldr	r3, [pc, #452]	; (800187c <HAL_RCC_OscConfig+0x264>)
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	4a70      	ldr	r2, [pc, #448]	; (800187c <HAL_RCC_OscConfig+0x264>)
 80016bc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80016c0:	6013      	str	r3, [r2, #0]
 80016c2:	4b6e      	ldr	r3, [pc, #440]	; (800187c <HAL_RCC_OscConfig+0x264>)
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	4a6d      	ldr	r2, [pc, #436]	; (800187c <HAL_RCC_OscConfig+0x264>)
 80016c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80016cc:	6013      	str	r3, [r2, #0]
 80016ce:	e00b      	b.n	80016e8 <HAL_RCC_OscConfig+0xd0>
 80016d0:	4b6a      	ldr	r3, [pc, #424]	; (800187c <HAL_RCC_OscConfig+0x264>)
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	4a69      	ldr	r2, [pc, #420]	; (800187c <HAL_RCC_OscConfig+0x264>)
 80016d6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80016da:	6013      	str	r3, [r2, #0]
 80016dc:	4b67      	ldr	r3, [pc, #412]	; (800187c <HAL_RCC_OscConfig+0x264>)
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	4a66      	ldr	r2, [pc, #408]	; (800187c <HAL_RCC_OscConfig+0x264>)
 80016e2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80016e6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	685b      	ldr	r3, [r3, #4]
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d013      	beq.n	8001718 <HAL_RCC_OscConfig+0x100>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016f0:	f7fe fdb0 	bl	8000254 <HAL_GetTick>
 80016f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80016f6:	e008      	b.n	800170a <HAL_RCC_OscConfig+0xf2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80016f8:	f7fe fdac 	bl	8000254 <HAL_GetTick>
 80016fc:	4602      	mov	r2, r0
 80016fe:	693b      	ldr	r3, [r7, #16]
 8001700:	1ad3      	subs	r3, r2, r3
 8001702:	2b64      	cmp	r3, #100	; 0x64
 8001704:	d901      	bls.n	800170a <HAL_RCC_OscConfig+0xf2>
          {
            return HAL_TIMEOUT;
 8001706:	2303      	movs	r3, #3
 8001708:	e2ad      	b.n	8001c66 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800170a:	4b5c      	ldr	r3, [pc, #368]	; (800187c <HAL_RCC_OscConfig+0x264>)
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001712:	2b00      	cmp	r3, #0
 8001714:	d0f0      	beq.n	80016f8 <HAL_RCC_OscConfig+0xe0>
 8001716:	e014      	b.n	8001742 <HAL_RCC_OscConfig+0x12a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001718:	f7fe fd9c 	bl	8000254 <HAL_GetTick>
 800171c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800171e:	e008      	b.n	8001732 <HAL_RCC_OscConfig+0x11a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001720:	f7fe fd98 	bl	8000254 <HAL_GetTick>
 8001724:	4602      	mov	r2, r0
 8001726:	693b      	ldr	r3, [r7, #16]
 8001728:	1ad3      	subs	r3, r2, r3
 800172a:	2b64      	cmp	r3, #100	; 0x64
 800172c:	d901      	bls.n	8001732 <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_TIMEOUT;
 800172e:	2303      	movs	r3, #3
 8001730:	e299      	b.n	8001c66 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001732:	4b52      	ldr	r3, [pc, #328]	; (800187c <HAL_RCC_OscConfig+0x264>)
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800173a:	2b00      	cmp	r3, #0
 800173c:	d1f0      	bne.n	8001720 <HAL_RCC_OscConfig+0x108>
 800173e:	e000      	b.n	8001742 <HAL_RCC_OscConfig+0x12a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001740:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	f003 0302 	and.w	r3, r3, #2
 800174a:	2b00      	cmp	r3, #0
 800174c:	d05a      	beq.n	8001804 <HAL_RCC_OscConfig+0x1ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 800174e:	69bb      	ldr	r3, [r7, #24]
 8001750:	2b04      	cmp	r3, #4
 8001752:	d005      	beq.n	8001760 <HAL_RCC_OscConfig+0x148>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001754:	69bb      	ldr	r3, [r7, #24]
 8001756:	2b0c      	cmp	r3, #12
 8001758:	d119      	bne.n	800178e <HAL_RCC_OscConfig+0x176>
 800175a:	697b      	ldr	r3, [r7, #20]
 800175c:	2b00      	cmp	r3, #0
 800175e:	d116      	bne.n	800178e <HAL_RCC_OscConfig+0x176>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001760:	4b46      	ldr	r3, [pc, #280]	; (800187c <HAL_RCC_OscConfig+0x264>)
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	f003 0302 	and.w	r3, r3, #2
 8001768:	2b00      	cmp	r3, #0
 800176a:	d005      	beq.n	8001778 <HAL_RCC_OscConfig+0x160>
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	68db      	ldr	r3, [r3, #12]
 8001770:	2b01      	cmp	r3, #1
 8001772:	d001      	beq.n	8001778 <HAL_RCC_OscConfig+0x160>
      {
        return HAL_ERROR;
 8001774:	2301      	movs	r3, #1
 8001776:	e276      	b.n	8001c66 <HAL_RCC_OscConfig+0x64e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001778:	4b40      	ldr	r3, [pc, #256]	; (800187c <HAL_RCC_OscConfig+0x264>)
 800177a:	685b      	ldr	r3, [r3, #4]
 800177c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	691b      	ldr	r3, [r3, #16]
 8001784:	021b      	lsls	r3, r3, #8
 8001786:	493d      	ldr	r1, [pc, #244]	; (800187c <HAL_RCC_OscConfig+0x264>)
 8001788:	4313      	orrs	r3, r2
 800178a:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800178c:	e03a      	b.n	8001804 <HAL_RCC_OscConfig+0x1ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	68db      	ldr	r3, [r3, #12]
 8001792:	2b00      	cmp	r3, #0
 8001794:	d020      	beq.n	80017d8 <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001796:	4b3a      	ldr	r3, [pc, #232]	; (8001880 <HAL_RCC_OscConfig+0x268>)
 8001798:	2201      	movs	r2, #1
 800179a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800179c:	f7fe fd5a 	bl	8000254 <HAL_GetTick>
 80017a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80017a2:	e008      	b.n	80017b6 <HAL_RCC_OscConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80017a4:	f7fe fd56 	bl	8000254 <HAL_GetTick>
 80017a8:	4602      	mov	r2, r0
 80017aa:	693b      	ldr	r3, [r7, #16]
 80017ac:	1ad3      	subs	r3, r2, r3
 80017ae:	2b02      	cmp	r3, #2
 80017b0:	d901      	bls.n	80017b6 <HAL_RCC_OscConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80017b2:	2303      	movs	r3, #3
 80017b4:	e257      	b.n	8001c66 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80017b6:	4b31      	ldr	r3, [pc, #196]	; (800187c <HAL_RCC_OscConfig+0x264>)
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	f003 0302 	and.w	r3, r3, #2
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d0f0      	beq.n	80017a4 <HAL_RCC_OscConfig+0x18c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017c2:	4b2e      	ldr	r3, [pc, #184]	; (800187c <HAL_RCC_OscConfig+0x264>)
 80017c4:	685b      	ldr	r3, [r3, #4]
 80017c6:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	691b      	ldr	r3, [r3, #16]
 80017ce:	021b      	lsls	r3, r3, #8
 80017d0:	492a      	ldr	r1, [pc, #168]	; (800187c <HAL_RCC_OscConfig+0x264>)
 80017d2:	4313      	orrs	r3, r2
 80017d4:	604b      	str	r3, [r1, #4]
 80017d6:	e015      	b.n	8001804 <HAL_RCC_OscConfig+0x1ec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80017d8:	4b29      	ldr	r3, [pc, #164]	; (8001880 <HAL_RCC_OscConfig+0x268>)
 80017da:	2200      	movs	r2, #0
 80017dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017de:	f7fe fd39 	bl	8000254 <HAL_GetTick>
 80017e2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80017e4:	e008      	b.n	80017f8 <HAL_RCC_OscConfig+0x1e0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80017e6:	f7fe fd35 	bl	8000254 <HAL_GetTick>
 80017ea:	4602      	mov	r2, r0
 80017ec:	693b      	ldr	r3, [r7, #16]
 80017ee:	1ad3      	subs	r3, r2, r3
 80017f0:	2b02      	cmp	r3, #2
 80017f2:	d901      	bls.n	80017f8 <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 80017f4:	2303      	movs	r3, #3
 80017f6:	e236      	b.n	8001c66 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80017f8:	4b20      	ldr	r3, [pc, #128]	; (800187c <HAL_RCC_OscConfig+0x264>)
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	f003 0302 	and.w	r3, r3, #2
 8001800:	2b00      	cmp	r3, #0
 8001802:	d1f0      	bne.n	80017e6 <HAL_RCC_OscConfig+0x1ce>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	f003 0310 	and.w	r3, r3, #16
 800180c:	2b00      	cmp	r3, #0
 800180e:	f000 80b8 	beq.w	8001982 <HAL_RCC_OscConfig+0x36a>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if((sysclk_source == RCC_CFGR_SWS_MSI) )
 8001812:	69bb      	ldr	r3, [r7, #24]
 8001814:	2b00      	cmp	r3, #0
 8001816:	d170      	bne.n	80018fa <HAL_RCC_OscConfig+0x2e2>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001818:	4b18      	ldr	r3, [pc, #96]	; (800187c <HAL_RCC_OscConfig+0x264>)
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001820:	2b00      	cmp	r3, #0
 8001822:	d005      	beq.n	8001830 <HAL_RCC_OscConfig+0x218>
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	699b      	ldr	r3, [r3, #24]
 8001828:	2b00      	cmp	r3, #0
 800182a:	d101      	bne.n	8001830 <HAL_RCC_OscConfig+0x218>
      {
        return HAL_ERROR;
 800182c:	2301      	movs	r3, #1
 800182e:	e21a      	b.n	8001c66 <HAL_RCC_OscConfig+0x64e>
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	6a1a      	ldr	r2, [r3, #32]
 8001834:	4b11      	ldr	r3, [pc, #68]	; (800187c <HAL_RCC_OscConfig+0x264>)
 8001836:	685b      	ldr	r3, [r3, #4]
 8001838:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800183c:	429a      	cmp	r2, r3
 800183e:	d921      	bls.n	8001884 <HAL_RCC_OscConfig+0x26c>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	6a1b      	ldr	r3, [r3, #32]
 8001844:	4618      	mov	r0, r3
 8001846:	f000 fbc1 	bl	8001fcc <RCC_SetFlashLatencyFromMSIRange>
 800184a:	4603      	mov	r3, r0
 800184c:	2b00      	cmp	r3, #0
 800184e:	d001      	beq.n	8001854 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_ERROR;
 8001850:	2301      	movs	r3, #1
 8001852:	e208      	b.n	8001c66 <HAL_RCC_OscConfig+0x64e>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001854:	4b09      	ldr	r3, [pc, #36]	; (800187c <HAL_RCC_OscConfig+0x264>)
 8001856:	685b      	ldr	r3, [r3, #4]
 8001858:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	6a1b      	ldr	r3, [r3, #32]
 8001860:	4906      	ldr	r1, [pc, #24]	; (800187c <HAL_RCC_OscConfig+0x264>)
 8001862:	4313      	orrs	r3, r2
 8001864:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001866:	4b05      	ldr	r3, [pc, #20]	; (800187c <HAL_RCC_OscConfig+0x264>)
 8001868:	685b      	ldr	r3, [r3, #4]
 800186a:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	69db      	ldr	r3, [r3, #28]
 8001872:	061b      	lsls	r3, r3, #24
 8001874:	4901      	ldr	r1, [pc, #4]	; (800187c <HAL_RCC_OscConfig+0x264>)
 8001876:	4313      	orrs	r3, r2
 8001878:	604b      	str	r3, [r1, #4]
 800187a:	e020      	b.n	80018be <HAL_RCC_OscConfig+0x2a6>
 800187c:	40023800 	.word	0x40023800
 8001880:	42470000 	.word	0x42470000
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001884:	4ba4      	ldr	r3, [pc, #656]	; (8001b18 <HAL_RCC_OscConfig+0x500>)
 8001886:	685b      	ldr	r3, [r3, #4]
 8001888:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	6a1b      	ldr	r3, [r3, #32]
 8001890:	49a1      	ldr	r1, [pc, #644]	; (8001b18 <HAL_RCC_OscConfig+0x500>)
 8001892:	4313      	orrs	r3, r2
 8001894:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001896:	4ba0      	ldr	r3, [pc, #640]	; (8001b18 <HAL_RCC_OscConfig+0x500>)
 8001898:	685b      	ldr	r3, [r3, #4]
 800189a:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	69db      	ldr	r3, [r3, #28]
 80018a2:	061b      	lsls	r3, r3, #24
 80018a4:	499c      	ldr	r1, [pc, #624]	; (8001b18 <HAL_RCC_OscConfig+0x500>)
 80018a6:	4313      	orrs	r3, r2
 80018a8:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	6a1b      	ldr	r3, [r3, #32]
 80018ae:	4618      	mov	r0, r3
 80018b0:	f000 fb8c 	bl	8001fcc <RCC_SetFlashLatencyFromMSIRange>
 80018b4:	4603      	mov	r3, r0
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d001      	beq.n	80018be <HAL_RCC_OscConfig+0x2a6>
          {
            return HAL_ERROR;
 80018ba:	2301      	movs	r3, #1
 80018bc:	e1d3      	b.n	8001c66 <HAL_RCC_OscConfig+0x64e>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	6a1b      	ldr	r3, [r3, #32]
 80018c2:	0b5b      	lsrs	r3, r3, #13
 80018c4:	3301      	adds	r3, #1
 80018c6:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80018ca:	fa02 f303 	lsl.w	r3, r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 80018ce:	4a92      	ldr	r2, [pc, #584]	; (8001b18 <HAL_RCC_OscConfig+0x500>)
 80018d0:	6892      	ldr	r2, [r2, #8]
 80018d2:	0912      	lsrs	r2, r2, #4
 80018d4:	f002 020f 	and.w	r2, r2, #15
 80018d8:	4990      	ldr	r1, [pc, #576]	; (8001b1c <HAL_RCC_OscConfig+0x504>)
 80018da:	5c8a      	ldrb	r2, [r1, r2]
 80018dc:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80018de:	4a90      	ldr	r2, [pc, #576]	; (8001b20 <HAL_RCC_OscConfig+0x508>)
 80018e0:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80018e2:	4b90      	ldr	r3, [pc, #576]	; (8001b24 <HAL_RCC_OscConfig+0x50c>)
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	4618      	mov	r0, r3
 80018e8:	f7fe fc68 	bl	80001bc <HAL_InitTick>
 80018ec:	4603      	mov	r3, r0
 80018ee:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80018f0:	7bfb      	ldrb	r3, [r7, #15]
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d045      	beq.n	8001982 <HAL_RCC_OscConfig+0x36a>
        {
          return status;
 80018f6:	7bfb      	ldrb	r3, [r7, #15]
 80018f8:	e1b5      	b.n	8001c66 <HAL_RCC_OscConfig+0x64e>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	699b      	ldr	r3, [r3, #24]
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d029      	beq.n	8001956 <HAL_RCC_OscConfig+0x33e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001902:	4b89      	ldr	r3, [pc, #548]	; (8001b28 <HAL_RCC_OscConfig+0x510>)
 8001904:	2201      	movs	r2, #1
 8001906:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001908:	f7fe fca4 	bl	8000254 <HAL_GetTick>
 800190c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800190e:	e008      	b.n	8001922 <HAL_RCC_OscConfig+0x30a>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001910:	f7fe fca0 	bl	8000254 <HAL_GetTick>
 8001914:	4602      	mov	r2, r0
 8001916:	693b      	ldr	r3, [r7, #16]
 8001918:	1ad3      	subs	r3, r2, r3
 800191a:	2b02      	cmp	r3, #2
 800191c:	d901      	bls.n	8001922 <HAL_RCC_OscConfig+0x30a>
          {
            return HAL_TIMEOUT;
 800191e:	2303      	movs	r3, #3
 8001920:	e1a1      	b.n	8001c66 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001922:	4b7d      	ldr	r3, [pc, #500]	; (8001b18 <HAL_RCC_OscConfig+0x500>)
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800192a:	2b00      	cmp	r3, #0
 800192c:	d0f0      	beq.n	8001910 <HAL_RCC_OscConfig+0x2f8>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800192e:	4b7a      	ldr	r3, [pc, #488]	; (8001b18 <HAL_RCC_OscConfig+0x500>)
 8001930:	685b      	ldr	r3, [r3, #4]
 8001932:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	6a1b      	ldr	r3, [r3, #32]
 800193a:	4977      	ldr	r1, [pc, #476]	; (8001b18 <HAL_RCC_OscConfig+0x500>)
 800193c:	4313      	orrs	r3, r2
 800193e:	604b      	str	r3, [r1, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001940:	4b75      	ldr	r3, [pc, #468]	; (8001b18 <HAL_RCC_OscConfig+0x500>)
 8001942:	685b      	ldr	r3, [r3, #4]
 8001944:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	69db      	ldr	r3, [r3, #28]
 800194c:	061b      	lsls	r3, r3, #24
 800194e:	4972      	ldr	r1, [pc, #456]	; (8001b18 <HAL_RCC_OscConfig+0x500>)
 8001950:	4313      	orrs	r3, r2
 8001952:	604b      	str	r3, [r1, #4]
 8001954:	e015      	b.n	8001982 <HAL_RCC_OscConfig+0x36a>

      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001956:	4b74      	ldr	r3, [pc, #464]	; (8001b28 <HAL_RCC_OscConfig+0x510>)
 8001958:	2200      	movs	r2, #0
 800195a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800195c:	f7fe fc7a 	bl	8000254 <HAL_GetTick>
 8001960:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8001962:	e008      	b.n	8001976 <HAL_RCC_OscConfig+0x35e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001964:	f7fe fc76 	bl	8000254 <HAL_GetTick>
 8001968:	4602      	mov	r2, r0
 800196a:	693b      	ldr	r3, [r7, #16]
 800196c:	1ad3      	subs	r3, r2, r3
 800196e:	2b02      	cmp	r3, #2
 8001970:	d901      	bls.n	8001976 <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 8001972:	2303      	movs	r3, #3
 8001974:	e177      	b.n	8001c66 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8001976:	4b68      	ldr	r3, [pc, #416]	; (8001b18 <HAL_RCC_OscConfig+0x500>)
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800197e:	2b00      	cmp	r3, #0
 8001980:	d1f0      	bne.n	8001964 <HAL_RCC_OscConfig+0x34c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	f003 0308 	and.w	r3, r3, #8
 800198a:	2b00      	cmp	r3, #0
 800198c:	d030      	beq.n	80019f0 <HAL_RCC_OscConfig+0x3d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	695b      	ldr	r3, [r3, #20]
 8001992:	2b00      	cmp	r3, #0
 8001994:	d016      	beq.n	80019c4 <HAL_RCC_OscConfig+0x3ac>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001996:	4b65      	ldr	r3, [pc, #404]	; (8001b2c <HAL_RCC_OscConfig+0x514>)
 8001998:	2201      	movs	r2, #1
 800199a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800199c:	f7fe fc5a 	bl	8000254 <HAL_GetTick>
 80019a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80019a2:	e008      	b.n	80019b6 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80019a4:	f7fe fc56 	bl	8000254 <HAL_GetTick>
 80019a8:	4602      	mov	r2, r0
 80019aa:	693b      	ldr	r3, [r7, #16]
 80019ac:	1ad3      	subs	r3, r2, r3
 80019ae:	2b02      	cmp	r3, #2
 80019b0:	d901      	bls.n	80019b6 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80019b2:	2303      	movs	r3, #3
 80019b4:	e157      	b.n	8001c66 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80019b6:	4b58      	ldr	r3, [pc, #352]	; (8001b18 <HAL_RCC_OscConfig+0x500>)
 80019b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80019ba:	f003 0302 	and.w	r3, r3, #2
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d0f0      	beq.n	80019a4 <HAL_RCC_OscConfig+0x38c>
 80019c2:	e015      	b.n	80019f0 <HAL_RCC_OscConfig+0x3d8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80019c4:	4b59      	ldr	r3, [pc, #356]	; (8001b2c <HAL_RCC_OscConfig+0x514>)
 80019c6:	2200      	movs	r2, #0
 80019c8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80019ca:	f7fe fc43 	bl	8000254 <HAL_GetTick>
 80019ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80019d0:	e008      	b.n	80019e4 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80019d2:	f7fe fc3f 	bl	8000254 <HAL_GetTick>
 80019d6:	4602      	mov	r2, r0
 80019d8:	693b      	ldr	r3, [r7, #16]
 80019da:	1ad3      	subs	r3, r2, r3
 80019dc:	2b02      	cmp	r3, #2
 80019de:	d901      	bls.n	80019e4 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80019e0:	2303      	movs	r3, #3
 80019e2:	e140      	b.n	8001c66 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80019e4:	4b4c      	ldr	r3, [pc, #304]	; (8001b18 <HAL_RCC_OscConfig+0x500>)
 80019e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80019e8:	f003 0302 	and.w	r3, r3, #2
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d1f0      	bne.n	80019d2 <HAL_RCC_OscConfig+0x3ba>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	f003 0304 	and.w	r3, r3, #4
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	f000 80b5 	beq.w	8001b68 <HAL_RCC_OscConfig+0x550>
  {
    FlagStatus       pwrclkchanged = RESET;
 80019fe:	2300      	movs	r3, #0
 8001a00:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001a02:	4b45      	ldr	r3, [pc, #276]	; (8001b18 <HAL_RCC_OscConfig+0x500>)
 8001a04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d10d      	bne.n	8001a2a <HAL_RCC_OscConfig+0x412>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001a0e:	4b42      	ldr	r3, [pc, #264]	; (8001b18 <HAL_RCC_OscConfig+0x500>)
 8001a10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a12:	4a41      	ldr	r2, [pc, #260]	; (8001b18 <HAL_RCC_OscConfig+0x500>)
 8001a14:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a18:	6253      	str	r3, [r2, #36]	; 0x24
 8001a1a:	4b3f      	ldr	r3, [pc, #252]	; (8001b18 <HAL_RCC_OscConfig+0x500>)
 8001a1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a22:	60bb      	str	r3, [r7, #8]
 8001a24:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001a26:	2301      	movs	r3, #1
 8001a28:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a2a:	4b41      	ldr	r3, [pc, #260]	; (8001b30 <HAL_RCC_OscConfig+0x518>)
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d118      	bne.n	8001a68 <HAL_RCC_OscConfig+0x450>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001a36:	4b3e      	ldr	r3, [pc, #248]	; (8001b30 <HAL_RCC_OscConfig+0x518>)
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	4a3d      	ldr	r2, [pc, #244]	; (8001b30 <HAL_RCC_OscConfig+0x518>)
 8001a3c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a40:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001a42:	f7fe fc07 	bl	8000254 <HAL_GetTick>
 8001a46:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a48:	e008      	b.n	8001a5c <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a4a:	f7fe fc03 	bl	8000254 <HAL_GetTick>
 8001a4e:	4602      	mov	r2, r0
 8001a50:	693b      	ldr	r3, [r7, #16]
 8001a52:	1ad3      	subs	r3, r2, r3
 8001a54:	2b64      	cmp	r3, #100	; 0x64
 8001a56:	d901      	bls.n	8001a5c <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8001a58:	2303      	movs	r3, #3
 8001a5a:	e104      	b.n	8001c66 <HAL_RCC_OscConfig+0x64e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a5c:	4b34      	ldr	r3, [pc, #208]	; (8001b30 <HAL_RCC_OscConfig+0x518>)
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d0f0      	beq.n	8001a4a <HAL_RCC_OscConfig+0x432>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	689b      	ldr	r3, [r3, #8]
 8001a6c:	2b01      	cmp	r3, #1
 8001a6e:	d106      	bne.n	8001a7e <HAL_RCC_OscConfig+0x466>
 8001a70:	4b29      	ldr	r3, [pc, #164]	; (8001b18 <HAL_RCC_OscConfig+0x500>)
 8001a72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a74:	4a28      	ldr	r2, [pc, #160]	; (8001b18 <HAL_RCC_OscConfig+0x500>)
 8001a76:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a7a:	6353      	str	r3, [r2, #52]	; 0x34
 8001a7c:	e02d      	b.n	8001ada <HAL_RCC_OscConfig+0x4c2>
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	689b      	ldr	r3, [r3, #8]
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d10c      	bne.n	8001aa0 <HAL_RCC_OscConfig+0x488>
 8001a86:	4b24      	ldr	r3, [pc, #144]	; (8001b18 <HAL_RCC_OscConfig+0x500>)
 8001a88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a8a:	4a23      	ldr	r2, [pc, #140]	; (8001b18 <HAL_RCC_OscConfig+0x500>)
 8001a8c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001a90:	6353      	str	r3, [r2, #52]	; 0x34
 8001a92:	4b21      	ldr	r3, [pc, #132]	; (8001b18 <HAL_RCC_OscConfig+0x500>)
 8001a94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a96:	4a20      	ldr	r2, [pc, #128]	; (8001b18 <HAL_RCC_OscConfig+0x500>)
 8001a98:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001a9c:	6353      	str	r3, [r2, #52]	; 0x34
 8001a9e:	e01c      	b.n	8001ada <HAL_RCC_OscConfig+0x4c2>
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	689b      	ldr	r3, [r3, #8]
 8001aa4:	2b05      	cmp	r3, #5
 8001aa6:	d10c      	bne.n	8001ac2 <HAL_RCC_OscConfig+0x4aa>
 8001aa8:	4b1b      	ldr	r3, [pc, #108]	; (8001b18 <HAL_RCC_OscConfig+0x500>)
 8001aaa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001aac:	4a1a      	ldr	r2, [pc, #104]	; (8001b18 <HAL_RCC_OscConfig+0x500>)
 8001aae:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001ab2:	6353      	str	r3, [r2, #52]	; 0x34
 8001ab4:	4b18      	ldr	r3, [pc, #96]	; (8001b18 <HAL_RCC_OscConfig+0x500>)
 8001ab6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ab8:	4a17      	ldr	r2, [pc, #92]	; (8001b18 <HAL_RCC_OscConfig+0x500>)
 8001aba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001abe:	6353      	str	r3, [r2, #52]	; 0x34
 8001ac0:	e00b      	b.n	8001ada <HAL_RCC_OscConfig+0x4c2>
 8001ac2:	4b15      	ldr	r3, [pc, #84]	; (8001b18 <HAL_RCC_OscConfig+0x500>)
 8001ac4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ac6:	4a14      	ldr	r2, [pc, #80]	; (8001b18 <HAL_RCC_OscConfig+0x500>)
 8001ac8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001acc:	6353      	str	r3, [r2, #52]	; 0x34
 8001ace:	4b12      	ldr	r3, [pc, #72]	; (8001b18 <HAL_RCC_OscConfig+0x500>)
 8001ad0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ad2:	4a11      	ldr	r2, [pc, #68]	; (8001b18 <HAL_RCC_OscConfig+0x500>)
 8001ad4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001ad8:	6353      	str	r3, [r2, #52]	; 0x34
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	689b      	ldr	r3, [r3, #8]
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d015      	beq.n	8001b0e <HAL_RCC_OscConfig+0x4f6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ae2:	f7fe fbb7 	bl	8000254 <HAL_GetTick>
 8001ae6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001ae8:	e00a      	b.n	8001b00 <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001aea:	f7fe fbb3 	bl	8000254 <HAL_GetTick>
 8001aee:	4602      	mov	r2, r0
 8001af0:	693b      	ldr	r3, [r7, #16]
 8001af2:	1ad3      	subs	r3, r2, r3
 8001af4:	f241 3288 	movw	r2, #5000	; 0x1388
 8001af8:	4293      	cmp	r3, r2
 8001afa:	d901      	bls.n	8001b00 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8001afc:	2303      	movs	r3, #3
 8001afe:	e0b2      	b.n	8001c66 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001b00:	4b05      	ldr	r3, [pc, #20]	; (8001b18 <HAL_RCC_OscConfig+0x500>)
 8001b02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b04:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d0ee      	beq.n	8001aea <HAL_RCC_OscConfig+0x4d2>
 8001b0c:	e023      	b.n	8001b56 <HAL_RCC_OscConfig+0x53e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b0e:	f7fe fba1 	bl	8000254 <HAL_GetTick>
 8001b12:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001b14:	e019      	b.n	8001b4a <HAL_RCC_OscConfig+0x532>
 8001b16:	bf00      	nop
 8001b18:	40023800 	.word	0x40023800
 8001b1c:	08002f84 	.word	0x08002f84
 8001b20:	20000008 	.word	0x20000008
 8001b24:	20000000 	.word	0x20000000
 8001b28:	42470020 	.word	0x42470020
 8001b2c:	42470680 	.word	0x42470680
 8001b30:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001b34:	f7fe fb8e 	bl	8000254 <HAL_GetTick>
 8001b38:	4602      	mov	r2, r0
 8001b3a:	693b      	ldr	r3, [r7, #16]
 8001b3c:	1ad3      	subs	r3, r2, r3
 8001b3e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b42:	4293      	cmp	r3, r2
 8001b44:	d901      	bls.n	8001b4a <HAL_RCC_OscConfig+0x532>
        {
          return HAL_TIMEOUT;
 8001b46:	2303      	movs	r3, #3
 8001b48:	e08d      	b.n	8001c66 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001b4a:	4b49      	ldr	r3, [pc, #292]	; (8001c70 <HAL_RCC_OscConfig+0x658>)
 8001b4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b4e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d1ee      	bne.n	8001b34 <HAL_RCC_OscConfig+0x51c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001b56:	7ffb      	ldrb	r3, [r7, #31]
 8001b58:	2b01      	cmp	r3, #1
 8001b5a:	d105      	bne.n	8001b68 <HAL_RCC_OscConfig+0x550>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b5c:	4b44      	ldr	r3, [pc, #272]	; (8001c70 <HAL_RCC_OscConfig+0x658>)
 8001b5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b60:	4a43      	ldr	r2, [pc, #268]	; (8001c70 <HAL_RCC_OscConfig+0x658>)
 8001b62:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001b66:	6253      	str	r3, [r2, #36]	; 0x24
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d079      	beq.n	8001c64 <HAL_RCC_OscConfig+0x64c>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001b70:	69bb      	ldr	r3, [r7, #24]
 8001b72:	2b0c      	cmp	r3, #12
 8001b74:	d056      	beq.n	8001c24 <HAL_RCC_OscConfig+0x60c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b7a:	2b02      	cmp	r3, #2
 8001b7c:	d13b      	bne.n	8001bf6 <HAL_RCC_OscConfig+0x5de>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b7e:	4b3d      	ldr	r3, [pc, #244]	; (8001c74 <HAL_RCC_OscConfig+0x65c>)
 8001b80:	2200      	movs	r2, #0
 8001b82:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b84:	f7fe fb66 	bl	8000254 <HAL_GetTick>
 8001b88:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001b8a:	e008      	b.n	8001b9e <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b8c:	f7fe fb62 	bl	8000254 <HAL_GetTick>
 8001b90:	4602      	mov	r2, r0
 8001b92:	693b      	ldr	r3, [r7, #16]
 8001b94:	1ad3      	subs	r3, r2, r3
 8001b96:	2b02      	cmp	r3, #2
 8001b98:	d901      	bls.n	8001b9e <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8001b9a:	2303      	movs	r3, #3
 8001b9c:	e063      	b.n	8001c66 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001b9e:	4b34      	ldr	r3, [pc, #208]	; (8001c70 <HAL_RCC_OscConfig+0x658>)
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d1f0      	bne.n	8001b8c <HAL_RCC_OscConfig+0x574>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001baa:	4b31      	ldr	r3, [pc, #196]	; (8001c70 <HAL_RCC_OscConfig+0x658>)
 8001bac:	689b      	ldr	r3, [r3, #8]
 8001bae:	f423 027d 	bic.w	r2, r3, #16580608	; 0xfd0000
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bba:	4319      	orrs	r1, r3
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bc0:	430b      	orrs	r3, r1
 8001bc2:	492b      	ldr	r1, [pc, #172]	; (8001c70 <HAL_RCC_OscConfig+0x658>)
 8001bc4:	4313      	orrs	r3, r2
 8001bc6:	608b      	str	r3, [r1, #8]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001bc8:	4b2a      	ldr	r3, [pc, #168]	; (8001c74 <HAL_RCC_OscConfig+0x65c>)
 8001bca:	2201      	movs	r2, #1
 8001bcc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bce:	f7fe fb41 	bl	8000254 <HAL_GetTick>
 8001bd2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001bd4:	e008      	b.n	8001be8 <HAL_RCC_OscConfig+0x5d0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001bd6:	f7fe fb3d 	bl	8000254 <HAL_GetTick>
 8001bda:	4602      	mov	r2, r0
 8001bdc:	693b      	ldr	r3, [r7, #16]
 8001bde:	1ad3      	subs	r3, r2, r3
 8001be0:	2b02      	cmp	r3, #2
 8001be2:	d901      	bls.n	8001be8 <HAL_RCC_OscConfig+0x5d0>
          {
            return HAL_TIMEOUT;
 8001be4:	2303      	movs	r3, #3
 8001be6:	e03e      	b.n	8001c66 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001be8:	4b21      	ldr	r3, [pc, #132]	; (8001c70 <HAL_RCC_OscConfig+0x658>)
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d0f0      	beq.n	8001bd6 <HAL_RCC_OscConfig+0x5be>
 8001bf4:	e036      	b.n	8001c64 <HAL_RCC_OscConfig+0x64c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001bf6:	4b1f      	ldr	r3, [pc, #124]	; (8001c74 <HAL_RCC_OscConfig+0x65c>)
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bfc:	f7fe fb2a 	bl	8000254 <HAL_GetTick>
 8001c00:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001c02:	e008      	b.n	8001c16 <HAL_RCC_OscConfig+0x5fe>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c04:	f7fe fb26 	bl	8000254 <HAL_GetTick>
 8001c08:	4602      	mov	r2, r0
 8001c0a:	693b      	ldr	r3, [r7, #16]
 8001c0c:	1ad3      	subs	r3, r2, r3
 8001c0e:	2b02      	cmp	r3, #2
 8001c10:	d901      	bls.n	8001c16 <HAL_RCC_OscConfig+0x5fe>
          {
            return HAL_TIMEOUT;
 8001c12:	2303      	movs	r3, #3
 8001c14:	e027      	b.n	8001c66 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001c16:	4b16      	ldr	r3, [pc, #88]	; (8001c70 <HAL_RCC_OscConfig+0x658>)
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d1f0      	bne.n	8001c04 <HAL_RCC_OscConfig+0x5ec>
 8001c22:	e01f      	b.n	8001c64 <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c28:	2b01      	cmp	r3, #1
 8001c2a:	d101      	bne.n	8001c30 <HAL_RCC_OscConfig+0x618>
      {
        return HAL_ERROR;
 8001c2c:	2301      	movs	r3, #1
 8001c2e:	e01a      	b.n	8001c66 <HAL_RCC_OscConfig+0x64e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001c30:	4b0f      	ldr	r3, [pc, #60]	; (8001c70 <HAL_RCC_OscConfig+0x658>)
 8001c32:	689b      	ldr	r3, [r3, #8]
 8001c34:	617b      	str	r3, [r7, #20]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c36:	697b      	ldr	r3, [r7, #20]
 8001c38:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c40:	429a      	cmp	r2, r3
 8001c42:	d10d      	bne.n	8001c60 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001c44:	697b      	ldr	r3, [r7, #20]
 8001c46:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c4e:	429a      	cmp	r2, r3
 8001c50:	d106      	bne.n	8001c60 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8001c52:	697b      	ldr	r3, [r7, #20]
 8001c54:	f403 0240 	and.w	r2, r3, #12582912	; 0xc00000
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001c5c:	429a      	cmp	r2, r3
 8001c5e:	d001      	beq.n	8001c64 <HAL_RCC_OscConfig+0x64c>
        {
          return HAL_ERROR;
 8001c60:	2301      	movs	r3, #1
 8001c62:	e000      	b.n	8001c66 <HAL_RCC_OscConfig+0x64e>
        }
      }
    }
  }

  return HAL_OK;
 8001c64:	2300      	movs	r3, #0
}
 8001c66:	4618      	mov	r0, r3
 8001c68:	3720      	adds	r7, #32
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	bd80      	pop	{r7, pc}
 8001c6e:	bf00      	nop
 8001c70:	40023800 	.word	0x40023800
 8001c74:	42470060 	.word	0x42470060

08001c78 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	b084      	sub	sp, #16
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	6078      	str	r0, [r7, #4]
 8001c80:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d101      	bne.n	8001c8c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001c88:	2301      	movs	r3, #1
 8001c8a:	e11a      	b.n	8001ec2 <HAL_RCC_ClockConfig+0x24a>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001c8c:	4b8f      	ldr	r3, [pc, #572]	; (8001ecc <HAL_RCC_ClockConfig+0x254>)
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	f003 0301 	and.w	r3, r3, #1
 8001c94:	683a      	ldr	r2, [r7, #0]
 8001c96:	429a      	cmp	r2, r3
 8001c98:	d919      	bls.n	8001cce <HAL_RCC_ClockConfig+0x56>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c9a:	683b      	ldr	r3, [r7, #0]
 8001c9c:	2b01      	cmp	r3, #1
 8001c9e:	d105      	bne.n	8001cac <HAL_RCC_ClockConfig+0x34>
 8001ca0:	4b8a      	ldr	r3, [pc, #552]	; (8001ecc <HAL_RCC_ClockConfig+0x254>)
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	4a89      	ldr	r2, [pc, #548]	; (8001ecc <HAL_RCC_ClockConfig+0x254>)
 8001ca6:	f043 0304 	orr.w	r3, r3, #4
 8001caa:	6013      	str	r3, [r2, #0]
 8001cac:	4b87      	ldr	r3, [pc, #540]	; (8001ecc <HAL_RCC_ClockConfig+0x254>)
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	f023 0201 	bic.w	r2, r3, #1
 8001cb4:	4985      	ldr	r1, [pc, #532]	; (8001ecc <HAL_RCC_ClockConfig+0x254>)
 8001cb6:	683b      	ldr	r3, [r7, #0]
 8001cb8:	4313      	orrs	r3, r2
 8001cba:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001cbc:	4b83      	ldr	r3, [pc, #524]	; (8001ecc <HAL_RCC_ClockConfig+0x254>)
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	f003 0301 	and.w	r3, r3, #1
 8001cc4:	683a      	ldr	r2, [r7, #0]
 8001cc6:	429a      	cmp	r2, r3
 8001cc8:	d001      	beq.n	8001cce <HAL_RCC_ClockConfig+0x56>
    {
      return HAL_ERROR;
 8001cca:	2301      	movs	r3, #1
 8001ccc:	e0f9      	b.n	8001ec2 <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	f003 0302 	and.w	r3, r3, #2
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d008      	beq.n	8001cec <HAL_RCC_ClockConfig+0x74>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001cda:	4b7d      	ldr	r3, [pc, #500]	; (8001ed0 <HAL_RCC_ClockConfig+0x258>)
 8001cdc:	689b      	ldr	r3, [r3, #8]
 8001cde:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	689b      	ldr	r3, [r3, #8]
 8001ce6:	497a      	ldr	r1, [pc, #488]	; (8001ed0 <HAL_RCC_ClockConfig+0x258>)
 8001ce8:	4313      	orrs	r3, r2
 8001cea:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	f003 0301 	and.w	r3, r3, #1
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	f000 808e 	beq.w	8001e16 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	685b      	ldr	r3, [r3, #4]
 8001cfe:	2b02      	cmp	r3, #2
 8001d00:	d107      	bne.n	8001d12 <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001d02:	4b73      	ldr	r3, [pc, #460]	; (8001ed0 <HAL_RCC_ClockConfig+0x258>)
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d121      	bne.n	8001d52 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8001d0e:	2301      	movs	r3, #1
 8001d10:	e0d7      	b.n	8001ec2 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	685b      	ldr	r3, [r3, #4]
 8001d16:	2b03      	cmp	r3, #3
 8001d18:	d107      	bne.n	8001d2a <HAL_RCC_ClockConfig+0xb2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001d1a:	4b6d      	ldr	r3, [pc, #436]	; (8001ed0 <HAL_RCC_ClockConfig+0x258>)
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d115      	bne.n	8001d52 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8001d26:	2301      	movs	r3, #1
 8001d28:	e0cb      	b.n	8001ec2 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	685b      	ldr	r3, [r3, #4]
 8001d2e:	2b01      	cmp	r3, #1
 8001d30:	d107      	bne.n	8001d42 <HAL_RCC_ClockConfig+0xca>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001d32:	4b67      	ldr	r3, [pc, #412]	; (8001ed0 <HAL_RCC_ClockConfig+0x258>)
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	f003 0302 	and.w	r3, r3, #2
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d109      	bne.n	8001d52 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8001d3e:	2301      	movs	r3, #1
 8001d40:	e0bf      	b.n	8001ec2 <HAL_RCC_ClockConfig+0x24a>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001d42:	4b63      	ldr	r3, [pc, #396]	; (8001ed0 <HAL_RCC_ClockConfig+0x258>)
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d101      	bne.n	8001d52 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8001d4e:	2301      	movs	r3, #1
 8001d50:	e0b7      	b.n	8001ec2 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001d52:	4b5f      	ldr	r3, [pc, #380]	; (8001ed0 <HAL_RCC_ClockConfig+0x258>)
 8001d54:	689b      	ldr	r3, [r3, #8]
 8001d56:	f023 0203 	bic.w	r2, r3, #3
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	685b      	ldr	r3, [r3, #4]
 8001d5e:	495c      	ldr	r1, [pc, #368]	; (8001ed0 <HAL_RCC_ClockConfig+0x258>)
 8001d60:	4313      	orrs	r3, r2
 8001d62:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001d64:	f7fe fa76 	bl	8000254 <HAL_GetTick>
 8001d68:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	685b      	ldr	r3, [r3, #4]
 8001d6e:	2b02      	cmp	r3, #2
 8001d70:	d112      	bne.n	8001d98 <HAL_RCC_ClockConfig+0x120>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001d72:	e00a      	b.n	8001d8a <HAL_RCC_ClockConfig+0x112>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d74:	f7fe fa6e 	bl	8000254 <HAL_GetTick>
 8001d78:	4602      	mov	r2, r0
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	1ad3      	subs	r3, r2, r3
 8001d7e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d82:	4293      	cmp	r3, r2
 8001d84:	d901      	bls.n	8001d8a <HAL_RCC_ClockConfig+0x112>
        {
          return HAL_TIMEOUT;
 8001d86:	2303      	movs	r3, #3
 8001d88:	e09b      	b.n	8001ec2 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001d8a:	4b51      	ldr	r3, [pc, #324]	; (8001ed0 <HAL_RCC_ClockConfig+0x258>)
 8001d8c:	689b      	ldr	r3, [r3, #8]
 8001d8e:	f003 030c 	and.w	r3, r3, #12
 8001d92:	2b08      	cmp	r3, #8
 8001d94:	d1ee      	bne.n	8001d74 <HAL_RCC_ClockConfig+0xfc>
 8001d96:	e03e      	b.n	8001e16 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	685b      	ldr	r3, [r3, #4]
 8001d9c:	2b03      	cmp	r3, #3
 8001d9e:	d112      	bne.n	8001dc6 <HAL_RCC_ClockConfig+0x14e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001da0:	e00a      	b.n	8001db8 <HAL_RCC_ClockConfig+0x140>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001da2:	f7fe fa57 	bl	8000254 <HAL_GetTick>
 8001da6:	4602      	mov	r2, r0
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	1ad3      	subs	r3, r2, r3
 8001dac:	f241 3288 	movw	r2, #5000	; 0x1388
 8001db0:	4293      	cmp	r3, r2
 8001db2:	d901      	bls.n	8001db8 <HAL_RCC_ClockConfig+0x140>
        {
          return HAL_TIMEOUT;
 8001db4:	2303      	movs	r3, #3
 8001db6:	e084      	b.n	8001ec2 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001db8:	4b45      	ldr	r3, [pc, #276]	; (8001ed0 <HAL_RCC_ClockConfig+0x258>)
 8001dba:	689b      	ldr	r3, [r3, #8]
 8001dbc:	f003 030c 	and.w	r3, r3, #12
 8001dc0:	2b0c      	cmp	r3, #12
 8001dc2:	d1ee      	bne.n	8001da2 <HAL_RCC_ClockConfig+0x12a>
 8001dc4:	e027      	b.n	8001e16 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	685b      	ldr	r3, [r3, #4]
 8001dca:	2b01      	cmp	r3, #1
 8001dcc:	d11d      	bne.n	8001e0a <HAL_RCC_ClockConfig+0x192>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001dce:	e00a      	b.n	8001de6 <HAL_RCC_ClockConfig+0x16e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001dd0:	f7fe fa40 	bl	8000254 <HAL_GetTick>
 8001dd4:	4602      	mov	r2, r0
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	1ad3      	subs	r3, r2, r3
 8001dda:	f241 3288 	movw	r2, #5000	; 0x1388
 8001dde:	4293      	cmp	r3, r2
 8001de0:	d901      	bls.n	8001de6 <HAL_RCC_ClockConfig+0x16e>
        {
          return HAL_TIMEOUT;
 8001de2:	2303      	movs	r3, #3
 8001de4:	e06d      	b.n	8001ec2 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001de6:	4b3a      	ldr	r3, [pc, #232]	; (8001ed0 <HAL_RCC_ClockConfig+0x258>)
 8001de8:	689b      	ldr	r3, [r3, #8]
 8001dea:	f003 030c 	and.w	r3, r3, #12
 8001dee:	2b04      	cmp	r3, #4
 8001df0:	d1ee      	bne.n	8001dd0 <HAL_RCC_ClockConfig+0x158>
 8001df2:	e010      	b.n	8001e16 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001df4:	f7fe fa2e 	bl	8000254 <HAL_GetTick>
 8001df8:	4602      	mov	r2, r0
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	1ad3      	subs	r3, r2, r3
 8001dfe:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e02:	4293      	cmp	r3, r2
 8001e04:	d901      	bls.n	8001e0a <HAL_RCC_ClockConfig+0x192>
        {
          return HAL_TIMEOUT;
 8001e06:	2303      	movs	r3, #3
 8001e08:	e05b      	b.n	8001ec2 <HAL_RCC_ClockConfig+0x24a>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8001e0a:	4b31      	ldr	r3, [pc, #196]	; (8001ed0 <HAL_RCC_ClockConfig+0x258>)
 8001e0c:	689b      	ldr	r3, [r3, #8]
 8001e0e:	f003 030c 	and.w	r3, r3, #12
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d1ee      	bne.n	8001df4 <HAL_RCC_ClockConfig+0x17c>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001e16:	4b2d      	ldr	r3, [pc, #180]	; (8001ecc <HAL_RCC_ClockConfig+0x254>)
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	f003 0301 	and.w	r3, r3, #1
 8001e1e:	683a      	ldr	r2, [r7, #0]
 8001e20:	429a      	cmp	r2, r3
 8001e22:	d219      	bcs.n	8001e58 <HAL_RCC_ClockConfig+0x1e0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e24:	683b      	ldr	r3, [r7, #0]
 8001e26:	2b01      	cmp	r3, #1
 8001e28:	d105      	bne.n	8001e36 <HAL_RCC_ClockConfig+0x1be>
 8001e2a:	4b28      	ldr	r3, [pc, #160]	; (8001ecc <HAL_RCC_ClockConfig+0x254>)
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	4a27      	ldr	r2, [pc, #156]	; (8001ecc <HAL_RCC_ClockConfig+0x254>)
 8001e30:	f043 0304 	orr.w	r3, r3, #4
 8001e34:	6013      	str	r3, [r2, #0]
 8001e36:	4b25      	ldr	r3, [pc, #148]	; (8001ecc <HAL_RCC_ClockConfig+0x254>)
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	f023 0201 	bic.w	r2, r3, #1
 8001e3e:	4923      	ldr	r1, [pc, #140]	; (8001ecc <HAL_RCC_ClockConfig+0x254>)
 8001e40:	683b      	ldr	r3, [r7, #0]
 8001e42:	4313      	orrs	r3, r2
 8001e44:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e46:	4b21      	ldr	r3, [pc, #132]	; (8001ecc <HAL_RCC_ClockConfig+0x254>)
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	f003 0301 	and.w	r3, r3, #1
 8001e4e:	683a      	ldr	r2, [r7, #0]
 8001e50:	429a      	cmp	r2, r3
 8001e52:	d001      	beq.n	8001e58 <HAL_RCC_ClockConfig+0x1e0>
    {
      return HAL_ERROR;
 8001e54:	2301      	movs	r3, #1
 8001e56:	e034      	b.n	8001ec2 <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	f003 0304 	and.w	r3, r3, #4
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d008      	beq.n	8001e76 <HAL_RCC_ClockConfig+0x1fe>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001e64:	4b1a      	ldr	r3, [pc, #104]	; (8001ed0 <HAL_RCC_ClockConfig+0x258>)
 8001e66:	689b      	ldr	r3, [r3, #8]
 8001e68:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	68db      	ldr	r3, [r3, #12]
 8001e70:	4917      	ldr	r1, [pc, #92]	; (8001ed0 <HAL_RCC_ClockConfig+0x258>)
 8001e72:	4313      	orrs	r3, r2
 8001e74:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	f003 0308 	and.w	r3, r3, #8
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d009      	beq.n	8001e96 <HAL_RCC_ClockConfig+0x21e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001e82:	4b13      	ldr	r3, [pc, #76]	; (8001ed0 <HAL_RCC_ClockConfig+0x258>)
 8001e84:	689b      	ldr	r3, [r3, #8]
 8001e86:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	691b      	ldr	r3, [r3, #16]
 8001e8e:	00db      	lsls	r3, r3, #3
 8001e90:	490f      	ldr	r1, [pc, #60]	; (8001ed0 <HAL_RCC_ClockConfig+0x258>)
 8001e92:	4313      	orrs	r3, r2
 8001e94:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001e96:	f000 f823 	bl	8001ee0 <HAL_RCC_GetSysClockFreq>
 8001e9a:	4601      	mov	r1, r0
 8001e9c:	4b0c      	ldr	r3, [pc, #48]	; (8001ed0 <HAL_RCC_ClockConfig+0x258>)
 8001e9e:	689b      	ldr	r3, [r3, #8]
 8001ea0:	091b      	lsrs	r3, r3, #4
 8001ea2:	f003 030f 	and.w	r3, r3, #15
 8001ea6:	4a0b      	ldr	r2, [pc, #44]	; (8001ed4 <HAL_RCC_ClockConfig+0x25c>)
 8001ea8:	5cd3      	ldrb	r3, [r2, r3]
 8001eaa:	fa21 f303 	lsr.w	r3, r1, r3
 8001eae:	4a0a      	ldr	r2, [pc, #40]	; (8001ed8 <HAL_RCC_ClockConfig+0x260>)
 8001eb0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001eb2:	4b0a      	ldr	r3, [pc, #40]	; (8001edc <HAL_RCC_ClockConfig+0x264>)
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	4618      	mov	r0, r3
 8001eb8:	f7fe f980 	bl	80001bc <HAL_InitTick>
 8001ebc:	4603      	mov	r3, r0
 8001ebe:	72fb      	strb	r3, [r7, #11]

  return status;
 8001ec0:	7afb      	ldrb	r3, [r7, #11]
}
 8001ec2:	4618      	mov	r0, r3
 8001ec4:	3710      	adds	r7, #16
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	bd80      	pop	{r7, pc}
 8001eca:	bf00      	nop
 8001ecc:	40023c00 	.word	0x40023c00
 8001ed0:	40023800 	.word	0x40023800
 8001ed4:	08002f84 	.word	0x08002f84
 8001ed8:	20000008 	.word	0x20000008
 8001edc:	20000000 	.word	0x20000000

08001ee0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001ee0:	b480      	push	{r7}
 8001ee2:	b087      	sub	sp, #28
 8001ee4:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange, sysclockfreq;

  tmpreg = RCC->CFGR;
 8001ee6:	4b26      	ldr	r3, [pc, #152]	; (8001f80 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001ee8:	689b      	ldr	r3, [r3, #8]
 8001eea:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	f003 030c 	and.w	r3, r3, #12
 8001ef2:	2b08      	cmp	r3, #8
 8001ef4:	d006      	beq.n	8001f04 <HAL_RCC_GetSysClockFreq+0x24>
 8001ef6:	2b0c      	cmp	r3, #12
 8001ef8:	d007      	beq.n	8001f0a <HAL_RCC_GetSysClockFreq+0x2a>
 8001efa:	2b04      	cmp	r3, #4
 8001efc:	d12c      	bne.n	8001f58 <HAL_RCC_GetSysClockFreq+0x78>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001efe:	4b21      	ldr	r3, [pc, #132]	; (8001f84 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001f00:	613b      	str	r3, [r7, #16]
      break;
 8001f02:	e037      	b.n	8001f74 <HAL_RCC_GetSysClockFreq+0x94>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001f04:	4b20      	ldr	r3, [pc, #128]	; (8001f88 <HAL_RCC_GetSysClockFreq+0xa8>)
 8001f06:	613b      	str	r3, [r7, #16]
      break;
 8001f08:	e034      	b.n	8001f74 <HAL_RCC_GetSysClockFreq+0x94>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	0c9b      	lsrs	r3, r3, #18
 8001f0e:	f003 030f 	and.w	r3, r3, #15
 8001f12:	4a1e      	ldr	r2, [pc, #120]	; (8001f8c <HAL_RCC_GetSysClockFreq+0xac>)
 8001f14:	5cd3      	ldrb	r3, [r2, r3]
 8001f16:	60bb      	str	r3, [r7, #8]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	0d9b      	lsrs	r3, r3, #22
 8001f1c:	f003 0303 	and.w	r3, r3, #3
 8001f20:	3301      	adds	r3, #1
 8001f22:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001f24:	4b16      	ldr	r3, [pc, #88]	; (8001f80 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001f26:	689b      	ldr	r3, [r3, #8]
 8001f28:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d008      	beq.n	8001f42 <HAL_RCC_GetSysClockFreq+0x62>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE * pllm) / plld;
 8001f30:	68bb      	ldr	r3, [r7, #8]
 8001f32:	4a15      	ldr	r2, [pc, #84]	; (8001f88 <HAL_RCC_GetSysClockFreq+0xa8>)
 8001f34:	fb02 f203 	mul.w	r2, r2, r3
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f3e:	617b      	str	r3, [r7, #20]
 8001f40:	e007      	b.n	8001f52 <HAL_RCC_GetSysClockFreq+0x72>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE * pllm) / plld;
 8001f42:	68bb      	ldr	r3, [r7, #8]
 8001f44:	4a0f      	ldr	r2, [pc, #60]	; (8001f84 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001f46:	fb02 f203 	mul.w	r2, r2, r3
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f50:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllvco;
 8001f52:	697b      	ldr	r3, [r7, #20]
 8001f54:	613b      	str	r3, [r7, #16]
      break;
 8001f56:	e00d      	b.n	8001f74 <HAL_RCC_GetSysClockFreq+0x94>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8001f58:	4b09      	ldr	r3, [pc, #36]	; (8001f80 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001f5a:	685b      	ldr	r3, [r3, #4]
 8001f5c:	0b5b      	lsrs	r3, r3, #13
 8001f5e:	f003 0307 	and.w	r3, r3, #7
 8001f62:	603b      	str	r3, [r7, #0]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8001f64:	683b      	ldr	r3, [r7, #0]
 8001f66:	3301      	adds	r3, #1
 8001f68:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001f6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f70:	613b      	str	r3, [r7, #16]
      break;
 8001f72:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001f74:	693b      	ldr	r3, [r7, #16]
}
 8001f76:	4618      	mov	r0, r3
 8001f78:	371c      	adds	r7, #28
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	bc80      	pop	{r7}
 8001f7e:	4770      	bx	lr
 8001f80:	40023800 	.word	0x40023800
 8001f84:	00f42400 	.word	0x00f42400
 8001f88:	016e3600 	.word	0x016e3600
 8001f8c:	08002f78 	.word	0x08002f78

08001f90 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001f90:	b480      	push	{r7}
 8001f92:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001f94:	4b02      	ldr	r3, [pc, #8]	; (8001fa0 <HAL_RCC_GetHCLKFreq+0x10>)
 8001f96:	681b      	ldr	r3, [r3, #0]
}
 8001f98:	4618      	mov	r0, r3
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	bc80      	pop	{r7}
 8001f9e:	4770      	bx	lr
 8001fa0:	20000008 	.word	0x20000008

08001fa4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001fa8:	f7ff fff2 	bl	8001f90 <HAL_RCC_GetHCLKFreq>
 8001fac:	4601      	mov	r1, r0
 8001fae:	4b05      	ldr	r3, [pc, #20]	; (8001fc4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001fb0:	689b      	ldr	r3, [r3, #8]
 8001fb2:	0a1b      	lsrs	r3, r3, #8
 8001fb4:	f003 0307 	and.w	r3, r3, #7
 8001fb8:	4a03      	ldr	r2, [pc, #12]	; (8001fc8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001fba:	5cd3      	ldrb	r3, [r2, r3]
 8001fbc:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001fc0:	4618      	mov	r0, r3
 8001fc2:	bd80      	pop	{r7, pc}
 8001fc4:	40023800 	.word	0x40023800
 8001fc8:	08002f94 	.word	0x08002f94

08001fcc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range
  * @param  MSIrange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_6
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSIrange)
{
 8001fcc:	b480      	push	{r7}
 8001fce:	b087      	sub	sp, #28
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001fd4:	2300      	movs	r3, #0
 8001fd6:	613b      	str	r3, [r7, #16]

  /* HCLK can reach 4 MHz only if AHB prescaler = 1 */
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8001fd8:	4b29      	ldr	r3, [pc, #164]	; (8002080 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8001fda:	689b      	ldr	r3, [r3, #8]
 8001fdc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d12c      	bne.n	800203e <RCC_SetFlashLatencyFromMSIRange+0x72>
  {
    if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001fe4:	4b26      	ldr	r3, [pc, #152]	; (8002080 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8001fe6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fe8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d005      	beq.n	8001ffc <RCC_SetFlashLatencyFromMSIRange+0x30>
    {
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8001ff0:	4b24      	ldr	r3, [pc, #144]	; (8002084 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 8001ff8:	617b      	str	r3, [r7, #20]
 8001ffa:	e016      	b.n	800202a <RCC_SetFlashLatencyFromMSIRange+0x5e>
    }
    else
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ffc:	4b20      	ldr	r3, [pc, #128]	; (8002080 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8001ffe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002000:	4a1f      	ldr	r2, [pc, #124]	; (8002080 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8002002:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002006:	6253      	str	r3, [r2, #36]	; 0x24
 8002008:	4b1d      	ldr	r3, [pc, #116]	; (8002080 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800200a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800200c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002010:	60fb      	str	r3, [r7, #12]
 8002012:	68fb      	ldr	r3, [r7, #12]
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8002014:	4b1b      	ldr	r3, [pc, #108]	; (8002084 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 800201c:	617b      	str	r3, [r7, #20]
      __HAL_RCC_PWR_CLK_DISABLE();
 800201e:	4b18      	ldr	r3, [pc, #96]	; (8002080 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8002020:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002022:	4a17      	ldr	r2, [pc, #92]	; (8002080 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8002024:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002028:	6253      	str	r3, [r2, #36]	; 0x24
    }

    /* Check if need to set latency 1 only for Range 3 & HCLK = 4MHz */
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 800202a:	697b      	ldr	r3, [r7, #20]
 800202c:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8002030:	d105      	bne.n	800203e <RCC_SetFlashLatencyFromMSIRange+0x72>
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8002038:	d101      	bne.n	800203e <RCC_SetFlashLatencyFromMSIRange+0x72>
    {
      latency = FLASH_LATENCY_1; /* 1WS */
 800203a:	2301      	movs	r3, #1
 800203c:	613b      	str	r3, [r7, #16]
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800203e:	693b      	ldr	r3, [r7, #16]
 8002040:	2b01      	cmp	r3, #1
 8002042:	d105      	bne.n	8002050 <RCC_SetFlashLatencyFromMSIRange+0x84>
 8002044:	4b10      	ldr	r3, [pc, #64]	; (8002088 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	4a0f      	ldr	r2, [pc, #60]	; (8002088 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800204a:	f043 0304 	orr.w	r3, r3, #4
 800204e:	6013      	str	r3, [r2, #0]
 8002050:	4b0d      	ldr	r3, [pc, #52]	; (8002088 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	f023 0201 	bic.w	r2, r3, #1
 8002058:	490b      	ldr	r1, [pc, #44]	; (8002088 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800205a:	693b      	ldr	r3, [r7, #16]
 800205c:	4313      	orrs	r3, r2
 800205e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002060:	4b09      	ldr	r3, [pc, #36]	; (8002088 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	f003 0301 	and.w	r3, r3, #1
 8002068:	693a      	ldr	r2, [r7, #16]
 800206a:	429a      	cmp	r2, r3
 800206c:	d001      	beq.n	8002072 <RCC_SetFlashLatencyFromMSIRange+0xa6>
  {
    return HAL_ERROR;
 800206e:	2301      	movs	r3, #1
 8002070:	e000      	b.n	8002074 <RCC_SetFlashLatencyFromMSIRange+0xa8>
  }

  return HAL_OK;
 8002072:	2300      	movs	r3, #0
}
 8002074:	4618      	mov	r0, r3
 8002076:	371c      	adds	r7, #28
 8002078:	46bd      	mov	sp, r7
 800207a:	bc80      	pop	{r7}
 800207c:	4770      	bx	lr
 800207e:	bf00      	nop
 8002080:	40023800 	.word	0x40023800
 8002084:	40007000 	.word	0x40007000
 8002088:	40023c00 	.word	0x40023c00

0800208c <HAL_UART_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800208c:	b580      	push	{r7, lr}
 800208e:	b088      	sub	sp, #32
 8002090:	af02      	add	r7, sp, #8
 8002092:	60f8      	str	r0, [r7, #12]
 8002094:	60b9      	str	r1, [r7, #8]
 8002096:	603b      	str	r3, [r7, #0]
 8002098:	4613      	mov	r3, r2
 800209a:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 800209c:	2300      	movs	r3, #0
 800209e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80020a6:	b2db      	uxtb	r3, r3
 80020a8:	2b20      	cmp	r3, #32
 80020aa:	f040 8083 	bne.w	80021b4 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 80020ae:	68bb      	ldr	r3, [r7, #8]
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d002      	beq.n	80020ba <HAL_UART_Transmit+0x2e>
 80020b4:	88fb      	ldrh	r3, [r7, #6]
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d101      	bne.n	80020be <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 80020ba:	2301      	movs	r3, #1
 80020bc:	e07b      	b.n	80021b6 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80020c4:	2b01      	cmp	r3, #1
 80020c6:	d101      	bne.n	80020cc <HAL_UART_Transmit+0x40>
 80020c8:	2302      	movs	r3, #2
 80020ca:	e074      	b.n	80021b6 <HAL_UART_Transmit+0x12a>
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	2201      	movs	r2, #1
 80020d0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	2200      	movs	r2, #0
 80020d8:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	2221      	movs	r2, #33	; 0x21
 80020de:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80020e2:	f7fe f8b7 	bl	8000254 <HAL_GetTick>
 80020e6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	88fa      	ldrh	r2, [r7, #6]
 80020ec:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	88fa      	ldrh	r2, [r7, #6]
 80020f2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80020f4:	e042      	b.n	800217c <HAL_UART_Transmit+0xf0>
    {
      huart->TxXferCount--;
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80020fa:	b29b      	uxth	r3, r3
 80020fc:	3b01      	subs	r3, #1
 80020fe:	b29a      	uxth	r2, r3
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	689b      	ldr	r3, [r3, #8]
 8002108:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800210c:	d122      	bne.n	8002154 <HAL_UART_Transmit+0xc8>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800210e:	683b      	ldr	r3, [r7, #0]
 8002110:	9300      	str	r3, [sp, #0]
 8002112:	697b      	ldr	r3, [r7, #20]
 8002114:	2200      	movs	r2, #0
 8002116:	2180      	movs	r1, #128	; 0x80
 8002118:	68f8      	ldr	r0, [r7, #12]
 800211a:	f000 f850 	bl	80021be <UART_WaitOnFlagUntilTimeout>
 800211e:	4603      	mov	r3, r0
 8002120:	2b00      	cmp	r3, #0
 8002122:	d001      	beq.n	8002128 <HAL_UART_Transmit+0x9c>
        {
          return HAL_TIMEOUT;
 8002124:	2303      	movs	r3, #3
 8002126:	e046      	b.n	80021b6 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8002128:	68bb      	ldr	r3, [r7, #8]
 800212a:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 800212c:	693b      	ldr	r3, [r7, #16]
 800212e:	881b      	ldrh	r3, [r3, #0]
 8002130:	461a      	mov	r2, r3
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800213a:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	691b      	ldr	r3, [r3, #16]
 8002140:	2b00      	cmp	r3, #0
 8002142:	d103      	bne.n	800214c <HAL_UART_Transmit+0xc0>
        {
          pData += 2U;
 8002144:	68bb      	ldr	r3, [r7, #8]
 8002146:	3302      	adds	r3, #2
 8002148:	60bb      	str	r3, [r7, #8]
 800214a:	e017      	b.n	800217c <HAL_UART_Transmit+0xf0>
        }
        else
        {
          pData += 1U;
 800214c:	68bb      	ldr	r3, [r7, #8]
 800214e:	3301      	adds	r3, #1
 8002150:	60bb      	str	r3, [r7, #8]
 8002152:	e013      	b.n	800217c <HAL_UART_Transmit+0xf0>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002154:	683b      	ldr	r3, [r7, #0]
 8002156:	9300      	str	r3, [sp, #0]
 8002158:	697b      	ldr	r3, [r7, #20]
 800215a:	2200      	movs	r2, #0
 800215c:	2180      	movs	r1, #128	; 0x80
 800215e:	68f8      	ldr	r0, [r7, #12]
 8002160:	f000 f82d 	bl	80021be <UART_WaitOnFlagUntilTimeout>
 8002164:	4603      	mov	r3, r0
 8002166:	2b00      	cmp	r3, #0
 8002168:	d001      	beq.n	800216e <HAL_UART_Transmit+0xe2>
        {
          return HAL_TIMEOUT;
 800216a:	2303      	movs	r3, #3
 800216c:	e023      	b.n	80021b6 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 800216e:	68bb      	ldr	r3, [r7, #8]
 8002170:	1c5a      	adds	r2, r3, #1
 8002172:	60ba      	str	r2, [r7, #8]
 8002174:	781a      	ldrb	r2, [r3, #0]
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002180:	b29b      	uxth	r3, r3
 8002182:	2b00      	cmp	r3, #0
 8002184:	d1b7      	bne.n	80020f6 <HAL_UART_Transmit+0x6a>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002186:	683b      	ldr	r3, [r7, #0]
 8002188:	9300      	str	r3, [sp, #0]
 800218a:	697b      	ldr	r3, [r7, #20]
 800218c:	2200      	movs	r2, #0
 800218e:	2140      	movs	r1, #64	; 0x40
 8002190:	68f8      	ldr	r0, [r7, #12]
 8002192:	f000 f814 	bl	80021be <UART_WaitOnFlagUntilTimeout>
 8002196:	4603      	mov	r3, r0
 8002198:	2b00      	cmp	r3, #0
 800219a:	d001      	beq.n	80021a0 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 800219c:	2303      	movs	r3, #3
 800219e:	e00a      	b.n	80021b6 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	2220      	movs	r2, #32
 80021a4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	2200      	movs	r2, #0
 80021ac:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 80021b0:	2300      	movs	r3, #0
 80021b2:	e000      	b.n	80021b6 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 80021b4:	2302      	movs	r3, #2
  }
}
 80021b6:	4618      	mov	r0, r3
 80021b8:	3718      	adds	r7, #24
 80021ba:	46bd      	mov	sp, r7
 80021bc:	bd80      	pop	{r7, pc}

080021be <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80021be:	b580      	push	{r7, lr}
 80021c0:	b084      	sub	sp, #16
 80021c2:	af00      	add	r7, sp, #0
 80021c4:	60f8      	str	r0, [r7, #12]
 80021c6:	60b9      	str	r1, [r7, #8]
 80021c8:	603b      	str	r3, [r7, #0]
 80021ca:	4613      	mov	r3, r2
 80021cc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80021ce:	e02c      	b.n	800222a <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80021d0:	69bb      	ldr	r3, [r7, #24]
 80021d2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80021d6:	d028      	beq.n	800222a <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80021d8:	69bb      	ldr	r3, [r7, #24]
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d007      	beq.n	80021ee <UART_WaitOnFlagUntilTimeout+0x30>
 80021de:	f7fe f839 	bl	8000254 <HAL_GetTick>
 80021e2:	4602      	mov	r2, r0
 80021e4:	683b      	ldr	r3, [r7, #0]
 80021e6:	1ad3      	subs	r3, r2, r3
 80021e8:	69ba      	ldr	r2, [r7, #24]
 80021ea:	429a      	cmp	r2, r3
 80021ec:	d21d      	bcs.n	800222a <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	68da      	ldr	r2, [r3, #12]
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80021fc:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	695a      	ldr	r2, [r3, #20]
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	f022 0201 	bic.w	r2, r2, #1
 800220c:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	2220      	movs	r2, #32
 8002212:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	2220      	movs	r2, #32
 800221a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	2200      	movs	r2, #0
 8002222:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8002226:	2303      	movs	r3, #3
 8002228:	e00f      	b.n	800224a <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	681a      	ldr	r2, [r3, #0]
 8002230:	68bb      	ldr	r3, [r7, #8]
 8002232:	4013      	ands	r3, r2
 8002234:	68ba      	ldr	r2, [r7, #8]
 8002236:	429a      	cmp	r2, r3
 8002238:	bf0c      	ite	eq
 800223a:	2301      	moveq	r3, #1
 800223c:	2300      	movne	r3, #0
 800223e:	b2db      	uxtb	r3, r3
 8002240:	461a      	mov	r2, r3
 8002242:	79fb      	ldrb	r3, [r7, #7]
 8002244:	429a      	cmp	r2, r3
 8002246:	d0c3      	beq.n	80021d0 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002248:	2300      	movs	r3, #0
}
 800224a:	4618      	mov	r0, r3
 800224c:	3710      	adds	r7, #16
 800224e:	46bd      	mov	sp, r7
 8002250:	bd80      	pop	{r7, pc}
	...

08002254 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002254:	b580      	push	{r7, lr}
 8002256:	b086      	sub	sp, #24
 8002258:	af02      	add	r7, sp, #8
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800225a:	f7fd ff97 	bl	800018c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800225e:	f000 f869 	bl	8002334 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002262:	f000 f8dd 	bl	8002420 <MX_GPIO_Init>
  MX_I2C1_Init();
 8002266:	f000 f8ad 	bl	80023c4 <MX_I2C1_Init>
	  /*I2C*/



	  // Tell TMP102 that we want to read from the temperature register
	      buf[0] = SENSOR_LIGHT_REG_DATA;
 800226a:	4b2b      	ldr	r3, [pc, #172]	; (8002318 <main+0xc4>)
 800226c:	781b      	ldrb	r3, [r3, #0]
 800226e:	703b      	strb	r3, [r7, #0]
	      ret = HAL_I2C_Master_Transmit(&hi2c1, SENSOR_LIGHT_ADDR, buf, 1, HAL_MAX_DELAY);
 8002270:	4b2a      	ldr	r3, [pc, #168]	; (800231c <main+0xc8>)
 8002272:	781b      	ldrb	r3, [r3, #0]
 8002274:	b299      	uxth	r1, r3
 8002276:	463a      	mov	r2, r7
 8002278:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800227c:	9300      	str	r3, [sp, #0]
 800227e:	2301      	movs	r3, #1
 8002280:	4827      	ldr	r0, [pc, #156]	; (8002320 <main+0xcc>)
 8002282:	f7fe fb9d 	bl	80009c0 <HAL_I2C_Master_Transmit>
 8002286:	4603      	mov	r3, r0
 8002288:	73fb      	strb	r3, [r7, #15]
	      if ( ret != HAL_OK ) {
 800228a:	7bfb      	ldrb	r3, [r7, #15]
 800228c:	2b00      	cmp	r3, #0
 800228e:	d008      	beq.n	80022a2 <main+0x4e>
	        strcpy((char*)buf, "Error Tx\r\n");
 8002290:	463b      	mov	r3, r7
 8002292:	4a24      	ldr	r2, [pc, #144]	; (8002324 <main+0xd0>)
 8002294:	ca07      	ldmia	r2, {r0, r1, r2}
 8002296:	c303      	stmia	r3!, {r0, r1}
 8002298:	801a      	strh	r2, [r3, #0]
 800229a:	3302      	adds	r3, #2
 800229c:	0c12      	lsrs	r2, r2, #16
 800229e:	701a      	strb	r2, [r3, #0]
 80022a0:	e028      	b.n	80022f4 <main+0xa0>
	      } else {

	        // Read 2 bytes from the temperature register
	        ret = HAL_I2C_Master_Receive(&hi2c1, SENSOR_LIGHT_ADDR, buf, 2, HAL_MAX_DELAY);
 80022a2:	4b1e      	ldr	r3, [pc, #120]	; (800231c <main+0xc8>)
 80022a4:	781b      	ldrb	r3, [r3, #0]
 80022a6:	b299      	uxth	r1, r3
 80022a8:	463a      	mov	r2, r7
 80022aa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80022ae:	9300      	str	r3, [sp, #0]
 80022b0:	2302      	movs	r3, #2
 80022b2:	481b      	ldr	r0, [pc, #108]	; (8002320 <main+0xcc>)
 80022b4:	f7fe fc82 	bl	8000bbc <HAL_I2C_Master_Receive>
 80022b8:	4603      	mov	r3, r0
 80022ba:	73fb      	strb	r3, [r7, #15]
	        if ( ret != HAL_OK ) {
 80022bc:	7bfb      	ldrb	r3, [r7, #15]
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d008      	beq.n	80022d4 <main+0x80>
	          strcpy((char*)buf, "Error Rx\r\n");
 80022c2:	463b      	mov	r3, r7
 80022c4:	4a18      	ldr	r2, [pc, #96]	; (8002328 <main+0xd4>)
 80022c6:	ca07      	ldmia	r2, {r0, r1, r2}
 80022c8:	c303      	stmia	r3!, {r0, r1}
 80022ca:	801a      	strh	r2, [r3, #0]
 80022cc:	3302      	adds	r3, #2
 80022ce:	0c12      	lsrs	r2, r2, #16
 80022d0:	701a      	strb	r2, [r3, #0]
 80022d2:	e00f      	b.n	80022f4 <main+0xa0>
	        } else {

	          //Combine the bytes
	          val = ((int16_t)buf[0] << 4) | (buf[1] >> 4);
 80022d4:	783b      	ldrb	r3, [r7, #0]
 80022d6:	011b      	lsls	r3, r3, #4
 80022d8:	b21a      	sxth	r2, r3
 80022da:	787b      	ldrb	r3, [r7, #1]
 80022dc:	091b      	lsrs	r3, r3, #4
 80022de:	b2db      	uxtb	r3, r3
 80022e0:	b21b      	sxth	r3, r3
 80022e2:	4313      	orrs	r3, r2
 80022e4:	81bb      	strh	r3, [r7, #12]

	          sprintf((char*)buf,
 80022e6:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80022ea:	463b      	mov	r3, r7
 80022ec:	490f      	ldr	r1, [pc, #60]	; (800232c <main+0xd8>)
 80022ee:	4618      	mov	r0, r3
 80022f0:	f000 fa12 	bl	8002718 <siprintf>
	                ((unsigned int)val ));
	        }
	      }

	      // Send out buffer (temperature or error message)
	      HAL_UART_Transmit(&huart1, buf, strlen((char*)buf), HAL_MAX_DELAY);
 80022f4:	463b      	mov	r3, r7
 80022f6:	4618      	mov	r0, r3
 80022f8:	f7fd ff40 	bl	800017c <strlen>
 80022fc:	4603      	mov	r3, r0
 80022fe:	b29a      	uxth	r2, r3
 8002300:	4639      	mov	r1, r7
 8002302:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002306:	480a      	ldr	r0, [pc, #40]	; (8002330 <main+0xdc>)
 8002308:	f7ff fec0 	bl	800208c <HAL_UART_Transmit>

	      // Wait
	      HAL_Delay(500);
 800230c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002310:	f7fd ffaa 	bl	8000268 <HAL_Delay>
	      buf[0] = SENSOR_LIGHT_REG_DATA;
 8002314:	e7a9      	b.n	800226a <main+0x16>
 8002316:	bf00      	nop
 8002318:	08002f73 	.word	0x08002f73
 800231c:	08002f74 	.word	0x08002f74
 8002320:	2000009c 	.word	0x2000009c
 8002324:	08002f54 	.word	0x08002f54
 8002328:	08002f60 	.word	0x08002f60
 800232c:	08002f6c 	.word	0x08002f6c
 8002330:	200000f0 	.word	0x200000f0

08002334 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002334:	b580      	push	{r7, lr}
 8002336:	b092      	sub	sp, #72	; 0x48
 8002338:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800233a:	f107 0314 	add.w	r3, r7, #20
 800233e:	2234      	movs	r2, #52	; 0x34
 8002340:	2100      	movs	r1, #0
 8002342:	4618      	mov	r0, r3
 8002344:	f000 f9e0 	bl	8002708 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002348:	463b      	mov	r3, r7
 800234a:	2200      	movs	r2, #0
 800234c:	601a      	str	r2, [r3, #0]
 800234e:	605a      	str	r2, [r3, #4]
 8002350:	609a      	str	r2, [r3, #8]
 8002352:	60da      	str	r2, [r3, #12]
 8002354:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002356:	4b1a      	ldr	r3, [pc, #104]	; (80023c0 <SystemClock_Config+0x8c>)
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 800235e:	4a18      	ldr	r2, [pc, #96]	; (80023c0 <SystemClock_Config+0x8c>)
 8002360:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002364:	6013      	str	r3, [r2, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8002366:	2310      	movs	r3, #16
 8002368:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800236a:	2301      	movs	r3, #1
 800236c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800236e:	2300      	movs	r3, #0
 8002370:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_5;
 8002372:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8002376:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8002378:	2300      	movs	r3, #0
 800237a:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800237c:	f107 0314 	add.w	r3, r7, #20
 8002380:	4618      	mov	r0, r3
 8002382:	f7ff f949 	bl	8001618 <HAL_RCC_OscConfig>
 8002386:	4603      	mov	r3, r0
 8002388:	2b00      	cmp	r3, #0
 800238a:	d001      	beq.n	8002390 <SystemClock_Config+0x5c>
  {
    Error_Handler();
 800238c:	f000 f86a 	bl	8002464 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002390:	230f      	movs	r3, #15
 8002392:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8002394:	2300      	movs	r3, #0
 8002396:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002398:	2300      	movs	r3, #0
 800239a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800239c:	2300      	movs	r3, #0
 800239e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80023a0:	2300      	movs	r3, #0
 80023a2:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80023a4:	463b      	mov	r3, r7
 80023a6:	2100      	movs	r1, #0
 80023a8:	4618      	mov	r0, r3
 80023aa:	f7ff fc65 	bl	8001c78 <HAL_RCC_ClockConfig>
 80023ae:	4603      	mov	r3, r0
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d001      	beq.n	80023b8 <SystemClock_Config+0x84>
  {
    Error_Handler();
 80023b4:	f000 f856 	bl	8002464 <Error_Handler>
  }
}
 80023b8:	bf00      	nop
 80023ba:	3748      	adds	r7, #72	; 0x48
 80023bc:	46bd      	mov	sp, r7
 80023be:	bd80      	pop	{r7, pc}
 80023c0:	40007000 	.word	0x40007000

080023c4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80023c4:	b580      	push	{r7, lr}
 80023c6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80023c8:	4b12      	ldr	r3, [pc, #72]	; (8002414 <MX_I2C1_Init+0x50>)
 80023ca:	4a13      	ldr	r2, [pc, #76]	; (8002418 <MX_I2C1_Init+0x54>)
 80023cc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80023ce:	4b11      	ldr	r3, [pc, #68]	; (8002414 <MX_I2C1_Init+0x50>)
 80023d0:	4a12      	ldr	r2, [pc, #72]	; (800241c <MX_I2C1_Init+0x58>)
 80023d2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80023d4:	4b0f      	ldr	r3, [pc, #60]	; (8002414 <MX_I2C1_Init+0x50>)
 80023d6:	2200      	movs	r2, #0
 80023d8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80023da:	4b0e      	ldr	r3, [pc, #56]	; (8002414 <MX_I2C1_Init+0x50>)
 80023dc:	2200      	movs	r2, #0
 80023de:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80023e0:	4b0c      	ldr	r3, [pc, #48]	; (8002414 <MX_I2C1_Init+0x50>)
 80023e2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80023e6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80023e8:	4b0a      	ldr	r3, [pc, #40]	; (8002414 <MX_I2C1_Init+0x50>)
 80023ea:	2200      	movs	r2, #0
 80023ec:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80023ee:	4b09      	ldr	r3, [pc, #36]	; (8002414 <MX_I2C1_Init+0x50>)
 80023f0:	2200      	movs	r2, #0
 80023f2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80023f4:	4b07      	ldr	r3, [pc, #28]	; (8002414 <MX_I2C1_Init+0x50>)
 80023f6:	2200      	movs	r2, #0
 80023f8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80023fa:	4b06      	ldr	r3, [pc, #24]	; (8002414 <MX_I2C1_Init+0x50>)
 80023fc:	2200      	movs	r2, #0
 80023fe:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002400:	4804      	ldr	r0, [pc, #16]	; (8002414 <MX_I2C1_Init+0x50>)
 8002402:	f7fe f9b5 	bl	8000770 <HAL_I2C_Init>
 8002406:	4603      	mov	r3, r0
 8002408:	2b00      	cmp	r3, #0
 800240a:	d001      	beq.n	8002410 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800240c:	f000 f82a 	bl	8002464 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002410:	bf00      	nop
 8002412:	bd80      	pop	{r7, pc}
 8002414:	2000009c 	.word	0x2000009c
 8002418:	40005400 	.word	0x40005400
 800241c:	000186a0 	.word	0x000186a0

08002420 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002420:	b480      	push	{r7}
 8002422:	b083      	sub	sp, #12
 8002424:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002426:	4b0e      	ldr	r3, [pc, #56]	; (8002460 <MX_GPIO_Init+0x40>)
 8002428:	69db      	ldr	r3, [r3, #28]
 800242a:	4a0d      	ldr	r2, [pc, #52]	; (8002460 <MX_GPIO_Init+0x40>)
 800242c:	f043 0301 	orr.w	r3, r3, #1
 8002430:	61d3      	str	r3, [r2, #28]
 8002432:	4b0b      	ldr	r3, [pc, #44]	; (8002460 <MX_GPIO_Init+0x40>)
 8002434:	69db      	ldr	r3, [r3, #28]
 8002436:	f003 0301 	and.w	r3, r3, #1
 800243a:	607b      	str	r3, [r7, #4]
 800243c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800243e:	4b08      	ldr	r3, [pc, #32]	; (8002460 <MX_GPIO_Init+0x40>)
 8002440:	69db      	ldr	r3, [r3, #28]
 8002442:	4a07      	ldr	r2, [pc, #28]	; (8002460 <MX_GPIO_Init+0x40>)
 8002444:	f043 0302 	orr.w	r3, r3, #2
 8002448:	61d3      	str	r3, [r2, #28]
 800244a:	4b05      	ldr	r3, [pc, #20]	; (8002460 <MX_GPIO_Init+0x40>)
 800244c:	69db      	ldr	r3, [r3, #28]
 800244e:	f003 0302 	and.w	r3, r3, #2
 8002452:	603b      	str	r3, [r7, #0]
 8002454:	683b      	ldr	r3, [r7, #0]

}
 8002456:	bf00      	nop
 8002458:	370c      	adds	r7, #12
 800245a:	46bd      	mov	sp, r7
 800245c:	bc80      	pop	{r7}
 800245e:	4770      	bx	lr
 8002460:	40023800 	.word	0x40023800

08002464 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002464:	b480      	push	{r7}
 8002466:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8002468:	bf00      	nop
 800246a:	46bd      	mov	sp, r7
 800246c:	bc80      	pop	{r7}
 800246e:	4770      	bx	lr

08002470 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002470:	b480      	push	{r7}
 8002472:	b085      	sub	sp, #20
 8002474:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_COMP_CLK_ENABLE();
 8002476:	4b14      	ldr	r3, [pc, #80]	; (80024c8 <HAL_MspInit+0x58>)
 8002478:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800247a:	4a13      	ldr	r2, [pc, #76]	; (80024c8 <HAL_MspInit+0x58>)
 800247c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002480:	6253      	str	r3, [r2, #36]	; 0x24
 8002482:	4b11      	ldr	r3, [pc, #68]	; (80024c8 <HAL_MspInit+0x58>)
 8002484:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002486:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800248a:	60fb      	str	r3, [r7, #12]
 800248c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800248e:	4b0e      	ldr	r3, [pc, #56]	; (80024c8 <HAL_MspInit+0x58>)
 8002490:	6a1b      	ldr	r3, [r3, #32]
 8002492:	4a0d      	ldr	r2, [pc, #52]	; (80024c8 <HAL_MspInit+0x58>)
 8002494:	f043 0301 	orr.w	r3, r3, #1
 8002498:	6213      	str	r3, [r2, #32]
 800249a:	4b0b      	ldr	r3, [pc, #44]	; (80024c8 <HAL_MspInit+0x58>)
 800249c:	6a1b      	ldr	r3, [r3, #32]
 800249e:	f003 0301 	and.w	r3, r3, #1
 80024a2:	60bb      	str	r3, [r7, #8]
 80024a4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80024a6:	4b08      	ldr	r3, [pc, #32]	; (80024c8 <HAL_MspInit+0x58>)
 80024a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024aa:	4a07      	ldr	r2, [pc, #28]	; (80024c8 <HAL_MspInit+0x58>)
 80024ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80024b0:	6253      	str	r3, [r2, #36]	; 0x24
 80024b2:	4b05      	ldr	r3, [pc, #20]	; (80024c8 <HAL_MspInit+0x58>)
 80024b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024ba:	607b      	str	r3, [r7, #4]
 80024bc:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80024be:	bf00      	nop
 80024c0:	3714      	adds	r7, #20
 80024c2:	46bd      	mov	sp, r7
 80024c4:	bc80      	pop	{r7}
 80024c6:	4770      	bx	lr
 80024c8:	40023800 	.word	0x40023800

080024cc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80024cc:	b580      	push	{r7, lr}
 80024ce:	b08a      	sub	sp, #40	; 0x28
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024d4:	f107 0314 	add.w	r3, r7, #20
 80024d8:	2200      	movs	r2, #0
 80024da:	601a      	str	r2, [r3, #0]
 80024dc:	605a      	str	r2, [r3, #4]
 80024de:	609a      	str	r2, [r3, #8]
 80024e0:	60da      	str	r2, [r3, #12]
 80024e2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	4a17      	ldr	r2, [pc, #92]	; (8002548 <HAL_I2C_MspInit+0x7c>)
 80024ea:	4293      	cmp	r3, r2
 80024ec:	d128      	bne.n	8002540 <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80024ee:	4b17      	ldr	r3, [pc, #92]	; (800254c <HAL_I2C_MspInit+0x80>)
 80024f0:	69db      	ldr	r3, [r3, #28]
 80024f2:	4a16      	ldr	r2, [pc, #88]	; (800254c <HAL_I2C_MspInit+0x80>)
 80024f4:	f043 0302 	orr.w	r3, r3, #2
 80024f8:	61d3      	str	r3, [r2, #28]
 80024fa:	4b14      	ldr	r3, [pc, #80]	; (800254c <HAL_I2C_MspInit+0x80>)
 80024fc:	69db      	ldr	r3, [r3, #28]
 80024fe:	f003 0302 	and.w	r3, r3, #2
 8002502:	613b      	str	r3, [r7, #16]
 8002504:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002506:	f44f 7340 	mov.w	r3, #768	; 0x300
 800250a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800250c:	2312      	movs	r3, #18
 800250e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002510:	2301      	movs	r3, #1
 8002512:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002514:	2303      	movs	r3, #3
 8002516:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002518:	2304      	movs	r3, #4
 800251a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800251c:	f107 0314 	add.w	r3, r7, #20
 8002520:	4619      	mov	r1, r3
 8002522:	480b      	ldr	r0, [pc, #44]	; (8002550 <HAL_I2C_MspInit+0x84>)
 8002524:	f7fd ffa6 	bl	8000474 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002528:	4b08      	ldr	r3, [pc, #32]	; (800254c <HAL_I2C_MspInit+0x80>)
 800252a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800252c:	4a07      	ldr	r2, [pc, #28]	; (800254c <HAL_I2C_MspInit+0x80>)
 800252e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002532:	6253      	str	r3, [r2, #36]	; 0x24
 8002534:	4b05      	ldr	r3, [pc, #20]	; (800254c <HAL_I2C_MspInit+0x80>)
 8002536:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002538:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800253c:	60fb      	str	r3, [r7, #12]
 800253e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002540:	bf00      	nop
 8002542:	3728      	adds	r7, #40	; 0x28
 8002544:	46bd      	mov	sp, r7
 8002546:	bd80      	pop	{r7, pc}
 8002548:	40005400 	.word	0x40005400
 800254c:	40023800 	.word	0x40023800
 8002550:	40020400 	.word	0x40020400

08002554 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002554:	b480      	push	{r7}
 8002556:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002558:	bf00      	nop
 800255a:	46bd      	mov	sp, r7
 800255c:	bc80      	pop	{r7}
 800255e:	4770      	bx	lr

08002560 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002560:	b480      	push	{r7}
 8002562:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002564:	e7fe      	b.n	8002564 <HardFault_Handler+0x4>

08002566 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002566:	b480      	push	{r7}
 8002568:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800256a:	e7fe      	b.n	800256a <MemManage_Handler+0x4>

0800256c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800256c:	b480      	push	{r7}
 800256e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002570:	e7fe      	b.n	8002570 <BusFault_Handler+0x4>

08002572 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002572:	b480      	push	{r7}
 8002574:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002576:	e7fe      	b.n	8002576 <UsageFault_Handler+0x4>

08002578 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002578:	b480      	push	{r7}
 800257a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800257c:	bf00      	nop
 800257e:	46bd      	mov	sp, r7
 8002580:	bc80      	pop	{r7}
 8002582:	4770      	bx	lr

08002584 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002584:	b480      	push	{r7}
 8002586:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002588:	bf00      	nop
 800258a:	46bd      	mov	sp, r7
 800258c:	bc80      	pop	{r7}
 800258e:	4770      	bx	lr

08002590 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002590:	b480      	push	{r7}
 8002592:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002594:	bf00      	nop
 8002596:	46bd      	mov	sp, r7
 8002598:	bc80      	pop	{r7}
 800259a:	4770      	bx	lr

0800259c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800259c:	b580      	push	{r7, lr}
 800259e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80025a0:	f7fd fe46 	bl	8000230 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80025a4:	bf00      	nop
 80025a6:	bd80      	pop	{r7, pc}

080025a8 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80025a8:	b580      	push	{r7, lr}
 80025aa:	b084      	sub	sp, #16
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80025b0:	4b11      	ldr	r3, [pc, #68]	; (80025f8 <_sbrk+0x50>)
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d102      	bne.n	80025be <_sbrk+0x16>
		heap_end = &end;
 80025b8:	4b0f      	ldr	r3, [pc, #60]	; (80025f8 <_sbrk+0x50>)
 80025ba:	4a10      	ldr	r2, [pc, #64]	; (80025fc <_sbrk+0x54>)
 80025bc:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80025be:	4b0e      	ldr	r3, [pc, #56]	; (80025f8 <_sbrk+0x50>)
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80025c4:	4b0c      	ldr	r3, [pc, #48]	; (80025f8 <_sbrk+0x50>)
 80025c6:	681a      	ldr	r2, [r3, #0]
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	4413      	add	r3, r2
 80025cc:	466a      	mov	r2, sp
 80025ce:	4293      	cmp	r3, r2
 80025d0:	d907      	bls.n	80025e2 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 80025d2:	f000 f86f 	bl	80026b4 <__errno>
 80025d6:	4602      	mov	r2, r0
 80025d8:	230c      	movs	r3, #12
 80025da:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 80025dc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80025e0:	e006      	b.n	80025f0 <_sbrk+0x48>
	}

	heap_end += incr;
 80025e2:	4b05      	ldr	r3, [pc, #20]	; (80025f8 <_sbrk+0x50>)
 80025e4:	681a      	ldr	r2, [r3, #0]
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	4413      	add	r3, r2
 80025ea:	4a03      	ldr	r2, [pc, #12]	; (80025f8 <_sbrk+0x50>)
 80025ec:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80025ee:	68fb      	ldr	r3, [r7, #12]
}
 80025f0:	4618      	mov	r0, r3
 80025f2:	3710      	adds	r7, #16
 80025f4:	46bd      	mov	sp, r7
 80025f6:	bd80      	pop	{r7, pc}
 80025f8:	2000008c 	.word	0x2000008c
 80025fc:	20000138 	.word	0x20000138

08002600 <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002600:	b480      	push	{r7}
 8002602:	af00      	add	r7, sp, #0
  /*!< Set MSION bit */
  RCC->CR |= (uint32_t)0x00000100;
 8002604:	4b15      	ldr	r3, [pc, #84]	; (800265c <SystemInit+0x5c>)
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	4a14      	ldr	r2, [pc, #80]	; (800265c <SystemInit+0x5c>)
 800260a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800260e:	6013      	str	r3, [r2, #0]

  /*!< Reset SW[1:0], HPRE[3:0], PPRE1[2:0], PPRE2[2:0], MCOSEL[2:0] and MCOPRE[2:0] bits */
  RCC->CFGR &= (uint32_t)0x88FFC00C;
 8002610:	4b12      	ldr	r3, [pc, #72]	; (800265c <SystemInit+0x5c>)
 8002612:	689a      	ldr	r2, [r3, #8]
 8002614:	4911      	ldr	r1, [pc, #68]	; (800265c <SystemInit+0x5c>)
 8002616:	4b12      	ldr	r3, [pc, #72]	; (8002660 <SystemInit+0x60>)
 8002618:	4013      	ands	r3, r2
 800261a:	608b      	str	r3, [r1, #8]
  
  /*!< Reset HSION, HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xEEFEFFFE;
 800261c:	4b0f      	ldr	r3, [pc, #60]	; (800265c <SystemInit+0x5c>)
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	4a0e      	ldr	r2, [pc, #56]	; (800265c <SystemInit+0x5c>)
 8002622:	f023 5388 	bic.w	r3, r3, #285212672	; 0x11000000
 8002626:	f023 1301 	bic.w	r3, r3, #65537	; 0x10001
 800262a:	6013      	str	r3, [r2, #0]

  /*!< Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800262c:	4b0b      	ldr	r3, [pc, #44]	; (800265c <SystemInit+0x5c>)
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	4a0a      	ldr	r2, [pc, #40]	; (800265c <SystemInit+0x5c>)
 8002632:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002636:	6013      	str	r3, [r2, #0]

  /*!< Reset PLLSRC, PLLMUL[3:0] and PLLDIV[1:0] bits */
  RCC->CFGR &= (uint32_t)0xFF02FFFF;
 8002638:	4b08      	ldr	r3, [pc, #32]	; (800265c <SystemInit+0x5c>)
 800263a:	689b      	ldr	r3, [r3, #8]
 800263c:	4a07      	ldr	r2, [pc, #28]	; (800265c <SystemInit+0x5c>)
 800263e:	f423 037d 	bic.w	r3, r3, #16580608	; 0xfd0000
 8002642:	6093      	str	r3, [r2, #8]

  /*!< Disable all interrupts */
  RCC->CIR = 0x00000000;
 8002644:	4b05      	ldr	r3, [pc, #20]	; (800265c <SystemInit+0x5c>)
 8002646:	2200      	movs	r2, #0
 8002648:	60da      	str	r2, [r3, #12]
#endif /* DATA_IN_ExtSRAM */
    
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 800264a:	4b06      	ldr	r3, [pc, #24]	; (8002664 <SystemInit+0x64>)
 800264c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002650:	609a      	str	r2, [r3, #8]
#endif
}
 8002652:	bf00      	nop
 8002654:	46bd      	mov	sp, r7
 8002656:	bc80      	pop	{r7}
 8002658:	4770      	bx	lr
 800265a:	bf00      	nop
 800265c:	40023800 	.word	0x40023800
 8002660:	88ffc00c 	.word	0x88ffc00c
 8002664:	e000ed00 	.word	0xe000ed00

08002668 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8002668:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800266a:	e003      	b.n	8002674 <LoopCopyDataInit>

0800266c <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 800266c:	4b0b      	ldr	r3, [pc, #44]	; (800269c <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 800266e:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8002670:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8002672:	3104      	adds	r1, #4

08002674 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8002674:	480a      	ldr	r0, [pc, #40]	; (80026a0 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8002676:	4b0b      	ldr	r3, [pc, #44]	; (80026a4 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8002678:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800267a:	429a      	cmp	r2, r3
  bcc CopyDataInit
 800267c:	d3f6      	bcc.n	800266c <CopyDataInit>
  ldr r2, =_sbss
 800267e:	4a0a      	ldr	r2, [pc, #40]	; (80026a8 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8002680:	e002      	b.n	8002688 <LoopFillZerobss>

08002682 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8002682:	2300      	movs	r3, #0
  str r3, [r2], #4
 8002684:	f842 3b04 	str.w	r3, [r2], #4

08002688 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8002688:	4b08      	ldr	r3, [pc, #32]	; (80026ac <LoopFillZerobss+0x24>)
  cmp r2, r3
 800268a:	429a      	cmp	r2, r3
  bcc FillZerobss
 800268c:	d3f9      	bcc.n	8002682 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800268e:	f7ff ffb7 	bl	8002600 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002692:	f000 f815 	bl	80026c0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002696:	f7ff fddd 	bl	8002254 <main>
  bx lr
 800269a:	4770      	bx	lr
  ldr r3, =_sidata
 800269c:	08002fd8 	.word	0x08002fd8
  ldr r0, =_sdata
 80026a0:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80026a4:	20000070 	.word	0x20000070
  ldr r2, =_sbss
 80026a8:	20000070 	.word	0x20000070
  ldr r3, = _ebss
 80026ac:	20000134 	.word	0x20000134

080026b0 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80026b0:	e7fe      	b.n	80026b0 <ADC1_IRQHandler>
	...

080026b4 <__errno>:
 80026b4:	4b01      	ldr	r3, [pc, #4]	; (80026bc <__errno+0x8>)
 80026b6:	6818      	ldr	r0, [r3, #0]
 80026b8:	4770      	bx	lr
 80026ba:	bf00      	nop
 80026bc:	2000000c 	.word	0x2000000c

080026c0 <__libc_init_array>:
 80026c0:	b570      	push	{r4, r5, r6, lr}
 80026c2:	2500      	movs	r5, #0
 80026c4:	4e0c      	ldr	r6, [pc, #48]	; (80026f8 <__libc_init_array+0x38>)
 80026c6:	4c0d      	ldr	r4, [pc, #52]	; (80026fc <__libc_init_array+0x3c>)
 80026c8:	1ba4      	subs	r4, r4, r6
 80026ca:	10a4      	asrs	r4, r4, #2
 80026cc:	42a5      	cmp	r5, r4
 80026ce:	d109      	bne.n	80026e4 <__libc_init_array+0x24>
 80026d0:	f000 fc34 	bl	8002f3c <_init>
 80026d4:	2500      	movs	r5, #0
 80026d6:	4e0a      	ldr	r6, [pc, #40]	; (8002700 <__libc_init_array+0x40>)
 80026d8:	4c0a      	ldr	r4, [pc, #40]	; (8002704 <__libc_init_array+0x44>)
 80026da:	1ba4      	subs	r4, r4, r6
 80026dc:	10a4      	asrs	r4, r4, #2
 80026de:	42a5      	cmp	r5, r4
 80026e0:	d105      	bne.n	80026ee <__libc_init_array+0x2e>
 80026e2:	bd70      	pop	{r4, r5, r6, pc}
 80026e4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80026e8:	4798      	blx	r3
 80026ea:	3501      	adds	r5, #1
 80026ec:	e7ee      	b.n	80026cc <__libc_init_array+0xc>
 80026ee:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80026f2:	4798      	blx	r3
 80026f4:	3501      	adds	r5, #1
 80026f6:	e7f2      	b.n	80026de <__libc_init_array+0x1e>
 80026f8:	08002fd0 	.word	0x08002fd0
 80026fc:	08002fd0 	.word	0x08002fd0
 8002700:	08002fd0 	.word	0x08002fd0
 8002704:	08002fd4 	.word	0x08002fd4

08002708 <memset>:
 8002708:	4603      	mov	r3, r0
 800270a:	4402      	add	r2, r0
 800270c:	4293      	cmp	r3, r2
 800270e:	d100      	bne.n	8002712 <memset+0xa>
 8002710:	4770      	bx	lr
 8002712:	f803 1b01 	strb.w	r1, [r3], #1
 8002716:	e7f9      	b.n	800270c <memset+0x4>

08002718 <siprintf>:
 8002718:	b40e      	push	{r1, r2, r3}
 800271a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800271e:	b500      	push	{lr}
 8002720:	b09c      	sub	sp, #112	; 0x70
 8002722:	ab1d      	add	r3, sp, #116	; 0x74
 8002724:	9002      	str	r0, [sp, #8]
 8002726:	9006      	str	r0, [sp, #24]
 8002728:	9107      	str	r1, [sp, #28]
 800272a:	9104      	str	r1, [sp, #16]
 800272c:	4808      	ldr	r0, [pc, #32]	; (8002750 <siprintf+0x38>)
 800272e:	4909      	ldr	r1, [pc, #36]	; (8002754 <siprintf+0x3c>)
 8002730:	f853 2b04 	ldr.w	r2, [r3], #4
 8002734:	9105      	str	r1, [sp, #20]
 8002736:	6800      	ldr	r0, [r0, #0]
 8002738:	a902      	add	r1, sp, #8
 800273a:	9301      	str	r3, [sp, #4]
 800273c:	f000 f866 	bl	800280c <_svfiprintf_r>
 8002740:	2200      	movs	r2, #0
 8002742:	9b02      	ldr	r3, [sp, #8]
 8002744:	701a      	strb	r2, [r3, #0]
 8002746:	b01c      	add	sp, #112	; 0x70
 8002748:	f85d eb04 	ldr.w	lr, [sp], #4
 800274c:	b003      	add	sp, #12
 800274e:	4770      	bx	lr
 8002750:	2000000c 	.word	0x2000000c
 8002754:	ffff0208 	.word	0xffff0208

08002758 <__ssputs_r>:
 8002758:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800275c:	688e      	ldr	r6, [r1, #8]
 800275e:	4682      	mov	sl, r0
 8002760:	429e      	cmp	r6, r3
 8002762:	460c      	mov	r4, r1
 8002764:	4690      	mov	r8, r2
 8002766:	4699      	mov	r9, r3
 8002768:	d837      	bhi.n	80027da <__ssputs_r+0x82>
 800276a:	898a      	ldrh	r2, [r1, #12]
 800276c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8002770:	d031      	beq.n	80027d6 <__ssputs_r+0x7e>
 8002772:	2302      	movs	r3, #2
 8002774:	6825      	ldr	r5, [r4, #0]
 8002776:	6909      	ldr	r1, [r1, #16]
 8002778:	1a6f      	subs	r7, r5, r1
 800277a:	6965      	ldr	r5, [r4, #20]
 800277c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002780:	fb95 f5f3 	sdiv	r5, r5, r3
 8002784:	f109 0301 	add.w	r3, r9, #1
 8002788:	443b      	add	r3, r7
 800278a:	429d      	cmp	r5, r3
 800278c:	bf38      	it	cc
 800278e:	461d      	movcc	r5, r3
 8002790:	0553      	lsls	r3, r2, #21
 8002792:	d530      	bpl.n	80027f6 <__ssputs_r+0x9e>
 8002794:	4629      	mov	r1, r5
 8002796:	f000 fb37 	bl	8002e08 <_malloc_r>
 800279a:	4606      	mov	r6, r0
 800279c:	b950      	cbnz	r0, 80027b4 <__ssputs_r+0x5c>
 800279e:	230c      	movs	r3, #12
 80027a0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80027a4:	f8ca 3000 	str.w	r3, [sl]
 80027a8:	89a3      	ldrh	r3, [r4, #12]
 80027aa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80027ae:	81a3      	strh	r3, [r4, #12]
 80027b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80027b4:	463a      	mov	r2, r7
 80027b6:	6921      	ldr	r1, [r4, #16]
 80027b8:	f000 fab6 	bl	8002d28 <memcpy>
 80027bc:	89a3      	ldrh	r3, [r4, #12]
 80027be:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80027c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80027c6:	81a3      	strh	r3, [r4, #12]
 80027c8:	6126      	str	r6, [r4, #16]
 80027ca:	443e      	add	r6, r7
 80027cc:	6026      	str	r6, [r4, #0]
 80027ce:	464e      	mov	r6, r9
 80027d0:	6165      	str	r5, [r4, #20]
 80027d2:	1bed      	subs	r5, r5, r7
 80027d4:	60a5      	str	r5, [r4, #8]
 80027d6:	454e      	cmp	r6, r9
 80027d8:	d900      	bls.n	80027dc <__ssputs_r+0x84>
 80027da:	464e      	mov	r6, r9
 80027dc:	4632      	mov	r2, r6
 80027de:	4641      	mov	r1, r8
 80027e0:	6820      	ldr	r0, [r4, #0]
 80027e2:	f000 faac 	bl	8002d3e <memmove>
 80027e6:	68a3      	ldr	r3, [r4, #8]
 80027e8:	2000      	movs	r0, #0
 80027ea:	1b9b      	subs	r3, r3, r6
 80027ec:	60a3      	str	r3, [r4, #8]
 80027ee:	6823      	ldr	r3, [r4, #0]
 80027f0:	441e      	add	r6, r3
 80027f2:	6026      	str	r6, [r4, #0]
 80027f4:	e7dc      	b.n	80027b0 <__ssputs_r+0x58>
 80027f6:	462a      	mov	r2, r5
 80027f8:	f000 fb60 	bl	8002ebc <_realloc_r>
 80027fc:	4606      	mov	r6, r0
 80027fe:	2800      	cmp	r0, #0
 8002800:	d1e2      	bne.n	80027c8 <__ssputs_r+0x70>
 8002802:	6921      	ldr	r1, [r4, #16]
 8002804:	4650      	mov	r0, sl
 8002806:	f000 fab3 	bl	8002d70 <_free_r>
 800280a:	e7c8      	b.n	800279e <__ssputs_r+0x46>

0800280c <_svfiprintf_r>:
 800280c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002810:	461d      	mov	r5, r3
 8002812:	898b      	ldrh	r3, [r1, #12]
 8002814:	b09d      	sub	sp, #116	; 0x74
 8002816:	061f      	lsls	r7, r3, #24
 8002818:	4680      	mov	r8, r0
 800281a:	460c      	mov	r4, r1
 800281c:	4616      	mov	r6, r2
 800281e:	d50f      	bpl.n	8002840 <_svfiprintf_r+0x34>
 8002820:	690b      	ldr	r3, [r1, #16]
 8002822:	b96b      	cbnz	r3, 8002840 <_svfiprintf_r+0x34>
 8002824:	2140      	movs	r1, #64	; 0x40
 8002826:	f000 faef 	bl	8002e08 <_malloc_r>
 800282a:	6020      	str	r0, [r4, #0]
 800282c:	6120      	str	r0, [r4, #16]
 800282e:	b928      	cbnz	r0, 800283c <_svfiprintf_r+0x30>
 8002830:	230c      	movs	r3, #12
 8002832:	f8c8 3000 	str.w	r3, [r8]
 8002836:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800283a:	e0c8      	b.n	80029ce <_svfiprintf_r+0x1c2>
 800283c:	2340      	movs	r3, #64	; 0x40
 800283e:	6163      	str	r3, [r4, #20]
 8002840:	2300      	movs	r3, #0
 8002842:	9309      	str	r3, [sp, #36]	; 0x24
 8002844:	2320      	movs	r3, #32
 8002846:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800284a:	2330      	movs	r3, #48	; 0x30
 800284c:	f04f 0b01 	mov.w	fp, #1
 8002850:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002854:	9503      	str	r5, [sp, #12]
 8002856:	4637      	mov	r7, r6
 8002858:	463d      	mov	r5, r7
 800285a:	f815 3b01 	ldrb.w	r3, [r5], #1
 800285e:	b10b      	cbz	r3, 8002864 <_svfiprintf_r+0x58>
 8002860:	2b25      	cmp	r3, #37	; 0x25
 8002862:	d13e      	bne.n	80028e2 <_svfiprintf_r+0xd6>
 8002864:	ebb7 0a06 	subs.w	sl, r7, r6
 8002868:	d00b      	beq.n	8002882 <_svfiprintf_r+0x76>
 800286a:	4653      	mov	r3, sl
 800286c:	4632      	mov	r2, r6
 800286e:	4621      	mov	r1, r4
 8002870:	4640      	mov	r0, r8
 8002872:	f7ff ff71 	bl	8002758 <__ssputs_r>
 8002876:	3001      	adds	r0, #1
 8002878:	f000 80a4 	beq.w	80029c4 <_svfiprintf_r+0x1b8>
 800287c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800287e:	4453      	add	r3, sl
 8002880:	9309      	str	r3, [sp, #36]	; 0x24
 8002882:	783b      	ldrb	r3, [r7, #0]
 8002884:	2b00      	cmp	r3, #0
 8002886:	f000 809d 	beq.w	80029c4 <_svfiprintf_r+0x1b8>
 800288a:	2300      	movs	r3, #0
 800288c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002890:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002894:	9304      	str	r3, [sp, #16]
 8002896:	9307      	str	r3, [sp, #28]
 8002898:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800289c:	931a      	str	r3, [sp, #104]	; 0x68
 800289e:	462f      	mov	r7, r5
 80028a0:	2205      	movs	r2, #5
 80028a2:	f817 1b01 	ldrb.w	r1, [r7], #1
 80028a6:	4850      	ldr	r0, [pc, #320]	; (80029e8 <_svfiprintf_r+0x1dc>)
 80028a8:	f000 fa30 	bl	8002d0c <memchr>
 80028ac:	9b04      	ldr	r3, [sp, #16]
 80028ae:	b9d0      	cbnz	r0, 80028e6 <_svfiprintf_r+0xda>
 80028b0:	06d9      	lsls	r1, r3, #27
 80028b2:	bf44      	itt	mi
 80028b4:	2220      	movmi	r2, #32
 80028b6:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80028ba:	071a      	lsls	r2, r3, #28
 80028bc:	bf44      	itt	mi
 80028be:	222b      	movmi	r2, #43	; 0x2b
 80028c0:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80028c4:	782a      	ldrb	r2, [r5, #0]
 80028c6:	2a2a      	cmp	r2, #42	; 0x2a
 80028c8:	d015      	beq.n	80028f6 <_svfiprintf_r+0xea>
 80028ca:	462f      	mov	r7, r5
 80028cc:	2000      	movs	r0, #0
 80028ce:	250a      	movs	r5, #10
 80028d0:	9a07      	ldr	r2, [sp, #28]
 80028d2:	4639      	mov	r1, r7
 80028d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80028d8:	3b30      	subs	r3, #48	; 0x30
 80028da:	2b09      	cmp	r3, #9
 80028dc:	d94d      	bls.n	800297a <_svfiprintf_r+0x16e>
 80028de:	b1b8      	cbz	r0, 8002910 <_svfiprintf_r+0x104>
 80028e0:	e00f      	b.n	8002902 <_svfiprintf_r+0xf6>
 80028e2:	462f      	mov	r7, r5
 80028e4:	e7b8      	b.n	8002858 <_svfiprintf_r+0x4c>
 80028e6:	4a40      	ldr	r2, [pc, #256]	; (80029e8 <_svfiprintf_r+0x1dc>)
 80028e8:	463d      	mov	r5, r7
 80028ea:	1a80      	subs	r0, r0, r2
 80028ec:	fa0b f000 	lsl.w	r0, fp, r0
 80028f0:	4318      	orrs	r0, r3
 80028f2:	9004      	str	r0, [sp, #16]
 80028f4:	e7d3      	b.n	800289e <_svfiprintf_r+0x92>
 80028f6:	9a03      	ldr	r2, [sp, #12]
 80028f8:	1d11      	adds	r1, r2, #4
 80028fa:	6812      	ldr	r2, [r2, #0]
 80028fc:	9103      	str	r1, [sp, #12]
 80028fe:	2a00      	cmp	r2, #0
 8002900:	db01      	blt.n	8002906 <_svfiprintf_r+0xfa>
 8002902:	9207      	str	r2, [sp, #28]
 8002904:	e004      	b.n	8002910 <_svfiprintf_r+0x104>
 8002906:	4252      	negs	r2, r2
 8002908:	f043 0302 	orr.w	r3, r3, #2
 800290c:	9207      	str	r2, [sp, #28]
 800290e:	9304      	str	r3, [sp, #16]
 8002910:	783b      	ldrb	r3, [r7, #0]
 8002912:	2b2e      	cmp	r3, #46	; 0x2e
 8002914:	d10c      	bne.n	8002930 <_svfiprintf_r+0x124>
 8002916:	787b      	ldrb	r3, [r7, #1]
 8002918:	2b2a      	cmp	r3, #42	; 0x2a
 800291a:	d133      	bne.n	8002984 <_svfiprintf_r+0x178>
 800291c:	9b03      	ldr	r3, [sp, #12]
 800291e:	3702      	adds	r7, #2
 8002920:	1d1a      	adds	r2, r3, #4
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	9203      	str	r2, [sp, #12]
 8002926:	2b00      	cmp	r3, #0
 8002928:	bfb8      	it	lt
 800292a:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800292e:	9305      	str	r3, [sp, #20]
 8002930:	4d2e      	ldr	r5, [pc, #184]	; (80029ec <_svfiprintf_r+0x1e0>)
 8002932:	2203      	movs	r2, #3
 8002934:	7839      	ldrb	r1, [r7, #0]
 8002936:	4628      	mov	r0, r5
 8002938:	f000 f9e8 	bl	8002d0c <memchr>
 800293c:	b138      	cbz	r0, 800294e <_svfiprintf_r+0x142>
 800293e:	2340      	movs	r3, #64	; 0x40
 8002940:	1b40      	subs	r0, r0, r5
 8002942:	fa03 f000 	lsl.w	r0, r3, r0
 8002946:	9b04      	ldr	r3, [sp, #16]
 8002948:	3701      	adds	r7, #1
 800294a:	4303      	orrs	r3, r0
 800294c:	9304      	str	r3, [sp, #16]
 800294e:	7839      	ldrb	r1, [r7, #0]
 8002950:	2206      	movs	r2, #6
 8002952:	4827      	ldr	r0, [pc, #156]	; (80029f0 <_svfiprintf_r+0x1e4>)
 8002954:	1c7e      	adds	r6, r7, #1
 8002956:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800295a:	f000 f9d7 	bl	8002d0c <memchr>
 800295e:	2800      	cmp	r0, #0
 8002960:	d038      	beq.n	80029d4 <_svfiprintf_r+0x1c8>
 8002962:	4b24      	ldr	r3, [pc, #144]	; (80029f4 <_svfiprintf_r+0x1e8>)
 8002964:	bb13      	cbnz	r3, 80029ac <_svfiprintf_r+0x1a0>
 8002966:	9b03      	ldr	r3, [sp, #12]
 8002968:	3307      	adds	r3, #7
 800296a:	f023 0307 	bic.w	r3, r3, #7
 800296e:	3308      	adds	r3, #8
 8002970:	9303      	str	r3, [sp, #12]
 8002972:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002974:	444b      	add	r3, r9
 8002976:	9309      	str	r3, [sp, #36]	; 0x24
 8002978:	e76d      	b.n	8002856 <_svfiprintf_r+0x4a>
 800297a:	fb05 3202 	mla	r2, r5, r2, r3
 800297e:	2001      	movs	r0, #1
 8002980:	460f      	mov	r7, r1
 8002982:	e7a6      	b.n	80028d2 <_svfiprintf_r+0xc6>
 8002984:	2300      	movs	r3, #0
 8002986:	250a      	movs	r5, #10
 8002988:	4619      	mov	r1, r3
 800298a:	3701      	adds	r7, #1
 800298c:	9305      	str	r3, [sp, #20]
 800298e:	4638      	mov	r0, r7
 8002990:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002994:	3a30      	subs	r2, #48	; 0x30
 8002996:	2a09      	cmp	r2, #9
 8002998:	d903      	bls.n	80029a2 <_svfiprintf_r+0x196>
 800299a:	2b00      	cmp	r3, #0
 800299c:	d0c8      	beq.n	8002930 <_svfiprintf_r+0x124>
 800299e:	9105      	str	r1, [sp, #20]
 80029a0:	e7c6      	b.n	8002930 <_svfiprintf_r+0x124>
 80029a2:	fb05 2101 	mla	r1, r5, r1, r2
 80029a6:	2301      	movs	r3, #1
 80029a8:	4607      	mov	r7, r0
 80029aa:	e7f0      	b.n	800298e <_svfiprintf_r+0x182>
 80029ac:	ab03      	add	r3, sp, #12
 80029ae:	9300      	str	r3, [sp, #0]
 80029b0:	4622      	mov	r2, r4
 80029b2:	4b11      	ldr	r3, [pc, #68]	; (80029f8 <_svfiprintf_r+0x1ec>)
 80029b4:	a904      	add	r1, sp, #16
 80029b6:	4640      	mov	r0, r8
 80029b8:	f3af 8000 	nop.w
 80029bc:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 80029c0:	4681      	mov	r9, r0
 80029c2:	d1d6      	bne.n	8002972 <_svfiprintf_r+0x166>
 80029c4:	89a3      	ldrh	r3, [r4, #12]
 80029c6:	065b      	lsls	r3, r3, #25
 80029c8:	f53f af35 	bmi.w	8002836 <_svfiprintf_r+0x2a>
 80029cc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80029ce:	b01d      	add	sp, #116	; 0x74
 80029d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80029d4:	ab03      	add	r3, sp, #12
 80029d6:	9300      	str	r3, [sp, #0]
 80029d8:	4622      	mov	r2, r4
 80029da:	4b07      	ldr	r3, [pc, #28]	; (80029f8 <_svfiprintf_r+0x1ec>)
 80029dc:	a904      	add	r1, sp, #16
 80029de:	4640      	mov	r0, r8
 80029e0:	f000 f882 	bl	8002ae8 <_printf_i>
 80029e4:	e7ea      	b.n	80029bc <_svfiprintf_r+0x1b0>
 80029e6:	bf00      	nop
 80029e8:	08002f9c 	.word	0x08002f9c
 80029ec:	08002fa2 	.word	0x08002fa2
 80029f0:	08002fa6 	.word	0x08002fa6
 80029f4:	00000000 	.word	0x00000000
 80029f8:	08002759 	.word	0x08002759

080029fc <_printf_common>:
 80029fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002a00:	4691      	mov	r9, r2
 8002a02:	461f      	mov	r7, r3
 8002a04:	688a      	ldr	r2, [r1, #8]
 8002a06:	690b      	ldr	r3, [r1, #16]
 8002a08:	4606      	mov	r6, r0
 8002a0a:	4293      	cmp	r3, r2
 8002a0c:	bfb8      	it	lt
 8002a0e:	4613      	movlt	r3, r2
 8002a10:	f8c9 3000 	str.w	r3, [r9]
 8002a14:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002a18:	460c      	mov	r4, r1
 8002a1a:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002a1e:	b112      	cbz	r2, 8002a26 <_printf_common+0x2a>
 8002a20:	3301      	adds	r3, #1
 8002a22:	f8c9 3000 	str.w	r3, [r9]
 8002a26:	6823      	ldr	r3, [r4, #0]
 8002a28:	0699      	lsls	r1, r3, #26
 8002a2a:	bf42      	ittt	mi
 8002a2c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8002a30:	3302      	addmi	r3, #2
 8002a32:	f8c9 3000 	strmi.w	r3, [r9]
 8002a36:	6825      	ldr	r5, [r4, #0]
 8002a38:	f015 0506 	ands.w	r5, r5, #6
 8002a3c:	d107      	bne.n	8002a4e <_printf_common+0x52>
 8002a3e:	f104 0a19 	add.w	sl, r4, #25
 8002a42:	68e3      	ldr	r3, [r4, #12]
 8002a44:	f8d9 2000 	ldr.w	r2, [r9]
 8002a48:	1a9b      	subs	r3, r3, r2
 8002a4a:	42ab      	cmp	r3, r5
 8002a4c:	dc29      	bgt.n	8002aa2 <_printf_common+0xa6>
 8002a4e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8002a52:	6822      	ldr	r2, [r4, #0]
 8002a54:	3300      	adds	r3, #0
 8002a56:	bf18      	it	ne
 8002a58:	2301      	movne	r3, #1
 8002a5a:	0692      	lsls	r2, r2, #26
 8002a5c:	d42e      	bmi.n	8002abc <_printf_common+0xc0>
 8002a5e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002a62:	4639      	mov	r1, r7
 8002a64:	4630      	mov	r0, r6
 8002a66:	47c0      	blx	r8
 8002a68:	3001      	adds	r0, #1
 8002a6a:	d021      	beq.n	8002ab0 <_printf_common+0xb4>
 8002a6c:	6823      	ldr	r3, [r4, #0]
 8002a6e:	68e5      	ldr	r5, [r4, #12]
 8002a70:	f003 0306 	and.w	r3, r3, #6
 8002a74:	2b04      	cmp	r3, #4
 8002a76:	bf18      	it	ne
 8002a78:	2500      	movne	r5, #0
 8002a7a:	f8d9 2000 	ldr.w	r2, [r9]
 8002a7e:	f04f 0900 	mov.w	r9, #0
 8002a82:	bf08      	it	eq
 8002a84:	1aad      	subeq	r5, r5, r2
 8002a86:	68a3      	ldr	r3, [r4, #8]
 8002a88:	6922      	ldr	r2, [r4, #16]
 8002a8a:	bf08      	it	eq
 8002a8c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002a90:	4293      	cmp	r3, r2
 8002a92:	bfc4      	itt	gt
 8002a94:	1a9b      	subgt	r3, r3, r2
 8002a96:	18ed      	addgt	r5, r5, r3
 8002a98:	341a      	adds	r4, #26
 8002a9a:	454d      	cmp	r5, r9
 8002a9c:	d11a      	bne.n	8002ad4 <_printf_common+0xd8>
 8002a9e:	2000      	movs	r0, #0
 8002aa0:	e008      	b.n	8002ab4 <_printf_common+0xb8>
 8002aa2:	2301      	movs	r3, #1
 8002aa4:	4652      	mov	r2, sl
 8002aa6:	4639      	mov	r1, r7
 8002aa8:	4630      	mov	r0, r6
 8002aaa:	47c0      	blx	r8
 8002aac:	3001      	adds	r0, #1
 8002aae:	d103      	bne.n	8002ab8 <_printf_common+0xbc>
 8002ab0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002ab4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002ab8:	3501      	adds	r5, #1
 8002aba:	e7c2      	b.n	8002a42 <_printf_common+0x46>
 8002abc:	2030      	movs	r0, #48	; 0x30
 8002abe:	18e1      	adds	r1, r4, r3
 8002ac0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002ac4:	1c5a      	adds	r2, r3, #1
 8002ac6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002aca:	4422      	add	r2, r4
 8002acc:	3302      	adds	r3, #2
 8002ace:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002ad2:	e7c4      	b.n	8002a5e <_printf_common+0x62>
 8002ad4:	2301      	movs	r3, #1
 8002ad6:	4622      	mov	r2, r4
 8002ad8:	4639      	mov	r1, r7
 8002ada:	4630      	mov	r0, r6
 8002adc:	47c0      	blx	r8
 8002ade:	3001      	adds	r0, #1
 8002ae0:	d0e6      	beq.n	8002ab0 <_printf_common+0xb4>
 8002ae2:	f109 0901 	add.w	r9, r9, #1
 8002ae6:	e7d8      	b.n	8002a9a <_printf_common+0x9e>

08002ae8 <_printf_i>:
 8002ae8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002aec:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8002af0:	460c      	mov	r4, r1
 8002af2:	7e09      	ldrb	r1, [r1, #24]
 8002af4:	b085      	sub	sp, #20
 8002af6:	296e      	cmp	r1, #110	; 0x6e
 8002af8:	4617      	mov	r7, r2
 8002afa:	4606      	mov	r6, r0
 8002afc:	4698      	mov	r8, r3
 8002afe:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8002b00:	f000 80b3 	beq.w	8002c6a <_printf_i+0x182>
 8002b04:	d822      	bhi.n	8002b4c <_printf_i+0x64>
 8002b06:	2963      	cmp	r1, #99	; 0x63
 8002b08:	d036      	beq.n	8002b78 <_printf_i+0x90>
 8002b0a:	d80a      	bhi.n	8002b22 <_printf_i+0x3a>
 8002b0c:	2900      	cmp	r1, #0
 8002b0e:	f000 80b9 	beq.w	8002c84 <_printf_i+0x19c>
 8002b12:	2958      	cmp	r1, #88	; 0x58
 8002b14:	f000 8083 	beq.w	8002c1e <_printf_i+0x136>
 8002b18:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002b1c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8002b20:	e032      	b.n	8002b88 <_printf_i+0xa0>
 8002b22:	2964      	cmp	r1, #100	; 0x64
 8002b24:	d001      	beq.n	8002b2a <_printf_i+0x42>
 8002b26:	2969      	cmp	r1, #105	; 0x69
 8002b28:	d1f6      	bne.n	8002b18 <_printf_i+0x30>
 8002b2a:	6820      	ldr	r0, [r4, #0]
 8002b2c:	6813      	ldr	r3, [r2, #0]
 8002b2e:	0605      	lsls	r5, r0, #24
 8002b30:	f103 0104 	add.w	r1, r3, #4
 8002b34:	d52a      	bpl.n	8002b8c <_printf_i+0xa4>
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	6011      	str	r1, [r2, #0]
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	da03      	bge.n	8002b46 <_printf_i+0x5e>
 8002b3e:	222d      	movs	r2, #45	; 0x2d
 8002b40:	425b      	negs	r3, r3
 8002b42:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8002b46:	486f      	ldr	r0, [pc, #444]	; (8002d04 <_printf_i+0x21c>)
 8002b48:	220a      	movs	r2, #10
 8002b4a:	e039      	b.n	8002bc0 <_printf_i+0xd8>
 8002b4c:	2973      	cmp	r1, #115	; 0x73
 8002b4e:	f000 809d 	beq.w	8002c8c <_printf_i+0x1a4>
 8002b52:	d808      	bhi.n	8002b66 <_printf_i+0x7e>
 8002b54:	296f      	cmp	r1, #111	; 0x6f
 8002b56:	d020      	beq.n	8002b9a <_printf_i+0xb2>
 8002b58:	2970      	cmp	r1, #112	; 0x70
 8002b5a:	d1dd      	bne.n	8002b18 <_printf_i+0x30>
 8002b5c:	6823      	ldr	r3, [r4, #0]
 8002b5e:	f043 0320 	orr.w	r3, r3, #32
 8002b62:	6023      	str	r3, [r4, #0]
 8002b64:	e003      	b.n	8002b6e <_printf_i+0x86>
 8002b66:	2975      	cmp	r1, #117	; 0x75
 8002b68:	d017      	beq.n	8002b9a <_printf_i+0xb2>
 8002b6a:	2978      	cmp	r1, #120	; 0x78
 8002b6c:	d1d4      	bne.n	8002b18 <_printf_i+0x30>
 8002b6e:	2378      	movs	r3, #120	; 0x78
 8002b70:	4865      	ldr	r0, [pc, #404]	; (8002d08 <_printf_i+0x220>)
 8002b72:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8002b76:	e055      	b.n	8002c24 <_printf_i+0x13c>
 8002b78:	6813      	ldr	r3, [r2, #0]
 8002b7a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002b7e:	1d19      	adds	r1, r3, #4
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	6011      	str	r1, [r2, #0]
 8002b84:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002b88:	2301      	movs	r3, #1
 8002b8a:	e08c      	b.n	8002ca6 <_printf_i+0x1be>
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8002b92:	6011      	str	r1, [r2, #0]
 8002b94:	bf18      	it	ne
 8002b96:	b21b      	sxthne	r3, r3
 8002b98:	e7cf      	b.n	8002b3a <_printf_i+0x52>
 8002b9a:	6813      	ldr	r3, [r2, #0]
 8002b9c:	6825      	ldr	r5, [r4, #0]
 8002b9e:	1d18      	adds	r0, r3, #4
 8002ba0:	6010      	str	r0, [r2, #0]
 8002ba2:	0628      	lsls	r0, r5, #24
 8002ba4:	d501      	bpl.n	8002baa <_printf_i+0xc2>
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	e002      	b.n	8002bb0 <_printf_i+0xc8>
 8002baa:	0668      	lsls	r0, r5, #25
 8002bac:	d5fb      	bpl.n	8002ba6 <_printf_i+0xbe>
 8002bae:	881b      	ldrh	r3, [r3, #0]
 8002bb0:	296f      	cmp	r1, #111	; 0x6f
 8002bb2:	bf14      	ite	ne
 8002bb4:	220a      	movne	r2, #10
 8002bb6:	2208      	moveq	r2, #8
 8002bb8:	4852      	ldr	r0, [pc, #328]	; (8002d04 <_printf_i+0x21c>)
 8002bba:	2100      	movs	r1, #0
 8002bbc:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8002bc0:	6865      	ldr	r5, [r4, #4]
 8002bc2:	2d00      	cmp	r5, #0
 8002bc4:	60a5      	str	r5, [r4, #8]
 8002bc6:	f2c0 8095 	blt.w	8002cf4 <_printf_i+0x20c>
 8002bca:	6821      	ldr	r1, [r4, #0]
 8002bcc:	f021 0104 	bic.w	r1, r1, #4
 8002bd0:	6021      	str	r1, [r4, #0]
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d13d      	bne.n	8002c52 <_printf_i+0x16a>
 8002bd6:	2d00      	cmp	r5, #0
 8002bd8:	f040 808e 	bne.w	8002cf8 <_printf_i+0x210>
 8002bdc:	4665      	mov	r5, ip
 8002bde:	2a08      	cmp	r2, #8
 8002be0:	d10b      	bne.n	8002bfa <_printf_i+0x112>
 8002be2:	6823      	ldr	r3, [r4, #0]
 8002be4:	07db      	lsls	r3, r3, #31
 8002be6:	d508      	bpl.n	8002bfa <_printf_i+0x112>
 8002be8:	6923      	ldr	r3, [r4, #16]
 8002bea:	6862      	ldr	r2, [r4, #4]
 8002bec:	429a      	cmp	r2, r3
 8002bee:	bfde      	ittt	le
 8002bf0:	2330      	movle	r3, #48	; 0x30
 8002bf2:	f805 3c01 	strble.w	r3, [r5, #-1]
 8002bf6:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8002bfa:	ebac 0305 	sub.w	r3, ip, r5
 8002bfe:	6123      	str	r3, [r4, #16]
 8002c00:	f8cd 8000 	str.w	r8, [sp]
 8002c04:	463b      	mov	r3, r7
 8002c06:	aa03      	add	r2, sp, #12
 8002c08:	4621      	mov	r1, r4
 8002c0a:	4630      	mov	r0, r6
 8002c0c:	f7ff fef6 	bl	80029fc <_printf_common>
 8002c10:	3001      	adds	r0, #1
 8002c12:	d14d      	bne.n	8002cb0 <_printf_i+0x1c8>
 8002c14:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002c18:	b005      	add	sp, #20
 8002c1a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002c1e:	4839      	ldr	r0, [pc, #228]	; (8002d04 <_printf_i+0x21c>)
 8002c20:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8002c24:	6813      	ldr	r3, [r2, #0]
 8002c26:	6821      	ldr	r1, [r4, #0]
 8002c28:	1d1d      	adds	r5, r3, #4
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	6015      	str	r5, [r2, #0]
 8002c2e:	060a      	lsls	r2, r1, #24
 8002c30:	d50b      	bpl.n	8002c4a <_printf_i+0x162>
 8002c32:	07ca      	lsls	r2, r1, #31
 8002c34:	bf44      	itt	mi
 8002c36:	f041 0120 	orrmi.w	r1, r1, #32
 8002c3a:	6021      	strmi	r1, [r4, #0]
 8002c3c:	b91b      	cbnz	r3, 8002c46 <_printf_i+0x15e>
 8002c3e:	6822      	ldr	r2, [r4, #0]
 8002c40:	f022 0220 	bic.w	r2, r2, #32
 8002c44:	6022      	str	r2, [r4, #0]
 8002c46:	2210      	movs	r2, #16
 8002c48:	e7b7      	b.n	8002bba <_printf_i+0xd2>
 8002c4a:	064d      	lsls	r5, r1, #25
 8002c4c:	bf48      	it	mi
 8002c4e:	b29b      	uxthmi	r3, r3
 8002c50:	e7ef      	b.n	8002c32 <_printf_i+0x14a>
 8002c52:	4665      	mov	r5, ip
 8002c54:	fbb3 f1f2 	udiv	r1, r3, r2
 8002c58:	fb02 3311 	mls	r3, r2, r1, r3
 8002c5c:	5cc3      	ldrb	r3, [r0, r3]
 8002c5e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8002c62:	460b      	mov	r3, r1
 8002c64:	2900      	cmp	r1, #0
 8002c66:	d1f5      	bne.n	8002c54 <_printf_i+0x16c>
 8002c68:	e7b9      	b.n	8002bde <_printf_i+0xf6>
 8002c6a:	6813      	ldr	r3, [r2, #0]
 8002c6c:	6825      	ldr	r5, [r4, #0]
 8002c6e:	1d18      	adds	r0, r3, #4
 8002c70:	6961      	ldr	r1, [r4, #20]
 8002c72:	6010      	str	r0, [r2, #0]
 8002c74:	0628      	lsls	r0, r5, #24
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	d501      	bpl.n	8002c7e <_printf_i+0x196>
 8002c7a:	6019      	str	r1, [r3, #0]
 8002c7c:	e002      	b.n	8002c84 <_printf_i+0x19c>
 8002c7e:	066a      	lsls	r2, r5, #25
 8002c80:	d5fb      	bpl.n	8002c7a <_printf_i+0x192>
 8002c82:	8019      	strh	r1, [r3, #0]
 8002c84:	2300      	movs	r3, #0
 8002c86:	4665      	mov	r5, ip
 8002c88:	6123      	str	r3, [r4, #16]
 8002c8a:	e7b9      	b.n	8002c00 <_printf_i+0x118>
 8002c8c:	6813      	ldr	r3, [r2, #0]
 8002c8e:	1d19      	adds	r1, r3, #4
 8002c90:	6011      	str	r1, [r2, #0]
 8002c92:	681d      	ldr	r5, [r3, #0]
 8002c94:	6862      	ldr	r2, [r4, #4]
 8002c96:	2100      	movs	r1, #0
 8002c98:	4628      	mov	r0, r5
 8002c9a:	f000 f837 	bl	8002d0c <memchr>
 8002c9e:	b108      	cbz	r0, 8002ca4 <_printf_i+0x1bc>
 8002ca0:	1b40      	subs	r0, r0, r5
 8002ca2:	6060      	str	r0, [r4, #4]
 8002ca4:	6863      	ldr	r3, [r4, #4]
 8002ca6:	6123      	str	r3, [r4, #16]
 8002ca8:	2300      	movs	r3, #0
 8002caa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002cae:	e7a7      	b.n	8002c00 <_printf_i+0x118>
 8002cb0:	6923      	ldr	r3, [r4, #16]
 8002cb2:	462a      	mov	r2, r5
 8002cb4:	4639      	mov	r1, r7
 8002cb6:	4630      	mov	r0, r6
 8002cb8:	47c0      	blx	r8
 8002cba:	3001      	adds	r0, #1
 8002cbc:	d0aa      	beq.n	8002c14 <_printf_i+0x12c>
 8002cbe:	6823      	ldr	r3, [r4, #0]
 8002cc0:	079b      	lsls	r3, r3, #30
 8002cc2:	d413      	bmi.n	8002cec <_printf_i+0x204>
 8002cc4:	68e0      	ldr	r0, [r4, #12]
 8002cc6:	9b03      	ldr	r3, [sp, #12]
 8002cc8:	4298      	cmp	r0, r3
 8002cca:	bfb8      	it	lt
 8002ccc:	4618      	movlt	r0, r3
 8002cce:	e7a3      	b.n	8002c18 <_printf_i+0x130>
 8002cd0:	2301      	movs	r3, #1
 8002cd2:	464a      	mov	r2, r9
 8002cd4:	4639      	mov	r1, r7
 8002cd6:	4630      	mov	r0, r6
 8002cd8:	47c0      	blx	r8
 8002cda:	3001      	adds	r0, #1
 8002cdc:	d09a      	beq.n	8002c14 <_printf_i+0x12c>
 8002cde:	3501      	adds	r5, #1
 8002ce0:	68e3      	ldr	r3, [r4, #12]
 8002ce2:	9a03      	ldr	r2, [sp, #12]
 8002ce4:	1a9b      	subs	r3, r3, r2
 8002ce6:	42ab      	cmp	r3, r5
 8002ce8:	dcf2      	bgt.n	8002cd0 <_printf_i+0x1e8>
 8002cea:	e7eb      	b.n	8002cc4 <_printf_i+0x1dc>
 8002cec:	2500      	movs	r5, #0
 8002cee:	f104 0919 	add.w	r9, r4, #25
 8002cf2:	e7f5      	b.n	8002ce0 <_printf_i+0x1f8>
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d1ac      	bne.n	8002c52 <_printf_i+0x16a>
 8002cf8:	7803      	ldrb	r3, [r0, #0]
 8002cfa:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002cfe:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002d02:	e76c      	b.n	8002bde <_printf_i+0xf6>
 8002d04:	08002fad 	.word	0x08002fad
 8002d08:	08002fbe 	.word	0x08002fbe

08002d0c <memchr>:
 8002d0c:	b510      	push	{r4, lr}
 8002d0e:	b2c9      	uxtb	r1, r1
 8002d10:	4402      	add	r2, r0
 8002d12:	4290      	cmp	r0, r2
 8002d14:	4603      	mov	r3, r0
 8002d16:	d101      	bne.n	8002d1c <memchr+0x10>
 8002d18:	2300      	movs	r3, #0
 8002d1a:	e003      	b.n	8002d24 <memchr+0x18>
 8002d1c:	781c      	ldrb	r4, [r3, #0]
 8002d1e:	3001      	adds	r0, #1
 8002d20:	428c      	cmp	r4, r1
 8002d22:	d1f6      	bne.n	8002d12 <memchr+0x6>
 8002d24:	4618      	mov	r0, r3
 8002d26:	bd10      	pop	{r4, pc}

08002d28 <memcpy>:
 8002d28:	b510      	push	{r4, lr}
 8002d2a:	1e43      	subs	r3, r0, #1
 8002d2c:	440a      	add	r2, r1
 8002d2e:	4291      	cmp	r1, r2
 8002d30:	d100      	bne.n	8002d34 <memcpy+0xc>
 8002d32:	bd10      	pop	{r4, pc}
 8002d34:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002d38:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002d3c:	e7f7      	b.n	8002d2e <memcpy+0x6>

08002d3e <memmove>:
 8002d3e:	4288      	cmp	r0, r1
 8002d40:	b510      	push	{r4, lr}
 8002d42:	eb01 0302 	add.w	r3, r1, r2
 8002d46:	d807      	bhi.n	8002d58 <memmove+0x1a>
 8002d48:	1e42      	subs	r2, r0, #1
 8002d4a:	4299      	cmp	r1, r3
 8002d4c:	d00a      	beq.n	8002d64 <memmove+0x26>
 8002d4e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002d52:	f802 4f01 	strb.w	r4, [r2, #1]!
 8002d56:	e7f8      	b.n	8002d4a <memmove+0xc>
 8002d58:	4283      	cmp	r3, r0
 8002d5a:	d9f5      	bls.n	8002d48 <memmove+0xa>
 8002d5c:	1881      	adds	r1, r0, r2
 8002d5e:	1ad2      	subs	r2, r2, r3
 8002d60:	42d3      	cmn	r3, r2
 8002d62:	d100      	bne.n	8002d66 <memmove+0x28>
 8002d64:	bd10      	pop	{r4, pc}
 8002d66:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8002d6a:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8002d6e:	e7f7      	b.n	8002d60 <memmove+0x22>

08002d70 <_free_r>:
 8002d70:	b538      	push	{r3, r4, r5, lr}
 8002d72:	4605      	mov	r5, r0
 8002d74:	2900      	cmp	r1, #0
 8002d76:	d043      	beq.n	8002e00 <_free_r+0x90>
 8002d78:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002d7c:	1f0c      	subs	r4, r1, #4
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	bfb8      	it	lt
 8002d82:	18e4      	addlt	r4, r4, r3
 8002d84:	f000 f8d0 	bl	8002f28 <__malloc_lock>
 8002d88:	4a1e      	ldr	r2, [pc, #120]	; (8002e04 <_free_r+0x94>)
 8002d8a:	6813      	ldr	r3, [r2, #0]
 8002d8c:	4610      	mov	r0, r2
 8002d8e:	b933      	cbnz	r3, 8002d9e <_free_r+0x2e>
 8002d90:	6063      	str	r3, [r4, #4]
 8002d92:	6014      	str	r4, [r2, #0]
 8002d94:	4628      	mov	r0, r5
 8002d96:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002d9a:	f000 b8c6 	b.w	8002f2a <__malloc_unlock>
 8002d9e:	42a3      	cmp	r3, r4
 8002da0:	d90b      	bls.n	8002dba <_free_r+0x4a>
 8002da2:	6821      	ldr	r1, [r4, #0]
 8002da4:	1862      	adds	r2, r4, r1
 8002da6:	4293      	cmp	r3, r2
 8002da8:	bf01      	itttt	eq
 8002daa:	681a      	ldreq	r2, [r3, #0]
 8002dac:	685b      	ldreq	r3, [r3, #4]
 8002dae:	1852      	addeq	r2, r2, r1
 8002db0:	6022      	streq	r2, [r4, #0]
 8002db2:	6063      	str	r3, [r4, #4]
 8002db4:	6004      	str	r4, [r0, #0]
 8002db6:	e7ed      	b.n	8002d94 <_free_r+0x24>
 8002db8:	4613      	mov	r3, r2
 8002dba:	685a      	ldr	r2, [r3, #4]
 8002dbc:	b10a      	cbz	r2, 8002dc2 <_free_r+0x52>
 8002dbe:	42a2      	cmp	r2, r4
 8002dc0:	d9fa      	bls.n	8002db8 <_free_r+0x48>
 8002dc2:	6819      	ldr	r1, [r3, #0]
 8002dc4:	1858      	adds	r0, r3, r1
 8002dc6:	42a0      	cmp	r0, r4
 8002dc8:	d10b      	bne.n	8002de2 <_free_r+0x72>
 8002dca:	6820      	ldr	r0, [r4, #0]
 8002dcc:	4401      	add	r1, r0
 8002dce:	1858      	adds	r0, r3, r1
 8002dd0:	4282      	cmp	r2, r0
 8002dd2:	6019      	str	r1, [r3, #0]
 8002dd4:	d1de      	bne.n	8002d94 <_free_r+0x24>
 8002dd6:	6810      	ldr	r0, [r2, #0]
 8002dd8:	6852      	ldr	r2, [r2, #4]
 8002dda:	4401      	add	r1, r0
 8002ddc:	6019      	str	r1, [r3, #0]
 8002dde:	605a      	str	r2, [r3, #4]
 8002de0:	e7d8      	b.n	8002d94 <_free_r+0x24>
 8002de2:	d902      	bls.n	8002dea <_free_r+0x7a>
 8002de4:	230c      	movs	r3, #12
 8002de6:	602b      	str	r3, [r5, #0]
 8002de8:	e7d4      	b.n	8002d94 <_free_r+0x24>
 8002dea:	6820      	ldr	r0, [r4, #0]
 8002dec:	1821      	adds	r1, r4, r0
 8002dee:	428a      	cmp	r2, r1
 8002df0:	bf01      	itttt	eq
 8002df2:	6811      	ldreq	r1, [r2, #0]
 8002df4:	6852      	ldreq	r2, [r2, #4]
 8002df6:	1809      	addeq	r1, r1, r0
 8002df8:	6021      	streq	r1, [r4, #0]
 8002dfa:	6062      	str	r2, [r4, #4]
 8002dfc:	605c      	str	r4, [r3, #4]
 8002dfe:	e7c9      	b.n	8002d94 <_free_r+0x24>
 8002e00:	bd38      	pop	{r3, r4, r5, pc}
 8002e02:	bf00      	nop
 8002e04:	20000090 	.word	0x20000090

08002e08 <_malloc_r>:
 8002e08:	b570      	push	{r4, r5, r6, lr}
 8002e0a:	1ccd      	adds	r5, r1, #3
 8002e0c:	f025 0503 	bic.w	r5, r5, #3
 8002e10:	3508      	adds	r5, #8
 8002e12:	2d0c      	cmp	r5, #12
 8002e14:	bf38      	it	cc
 8002e16:	250c      	movcc	r5, #12
 8002e18:	2d00      	cmp	r5, #0
 8002e1a:	4606      	mov	r6, r0
 8002e1c:	db01      	blt.n	8002e22 <_malloc_r+0x1a>
 8002e1e:	42a9      	cmp	r1, r5
 8002e20:	d903      	bls.n	8002e2a <_malloc_r+0x22>
 8002e22:	230c      	movs	r3, #12
 8002e24:	6033      	str	r3, [r6, #0]
 8002e26:	2000      	movs	r0, #0
 8002e28:	bd70      	pop	{r4, r5, r6, pc}
 8002e2a:	f000 f87d 	bl	8002f28 <__malloc_lock>
 8002e2e:	4a21      	ldr	r2, [pc, #132]	; (8002eb4 <_malloc_r+0xac>)
 8002e30:	6814      	ldr	r4, [r2, #0]
 8002e32:	4621      	mov	r1, r4
 8002e34:	b991      	cbnz	r1, 8002e5c <_malloc_r+0x54>
 8002e36:	4c20      	ldr	r4, [pc, #128]	; (8002eb8 <_malloc_r+0xb0>)
 8002e38:	6823      	ldr	r3, [r4, #0]
 8002e3a:	b91b      	cbnz	r3, 8002e44 <_malloc_r+0x3c>
 8002e3c:	4630      	mov	r0, r6
 8002e3e:	f000 f863 	bl	8002f08 <_sbrk_r>
 8002e42:	6020      	str	r0, [r4, #0]
 8002e44:	4629      	mov	r1, r5
 8002e46:	4630      	mov	r0, r6
 8002e48:	f000 f85e 	bl	8002f08 <_sbrk_r>
 8002e4c:	1c43      	adds	r3, r0, #1
 8002e4e:	d124      	bne.n	8002e9a <_malloc_r+0x92>
 8002e50:	230c      	movs	r3, #12
 8002e52:	4630      	mov	r0, r6
 8002e54:	6033      	str	r3, [r6, #0]
 8002e56:	f000 f868 	bl	8002f2a <__malloc_unlock>
 8002e5a:	e7e4      	b.n	8002e26 <_malloc_r+0x1e>
 8002e5c:	680b      	ldr	r3, [r1, #0]
 8002e5e:	1b5b      	subs	r3, r3, r5
 8002e60:	d418      	bmi.n	8002e94 <_malloc_r+0x8c>
 8002e62:	2b0b      	cmp	r3, #11
 8002e64:	d90f      	bls.n	8002e86 <_malloc_r+0x7e>
 8002e66:	600b      	str	r3, [r1, #0]
 8002e68:	18cc      	adds	r4, r1, r3
 8002e6a:	50cd      	str	r5, [r1, r3]
 8002e6c:	4630      	mov	r0, r6
 8002e6e:	f000 f85c 	bl	8002f2a <__malloc_unlock>
 8002e72:	f104 000b 	add.w	r0, r4, #11
 8002e76:	1d23      	adds	r3, r4, #4
 8002e78:	f020 0007 	bic.w	r0, r0, #7
 8002e7c:	1ac3      	subs	r3, r0, r3
 8002e7e:	d0d3      	beq.n	8002e28 <_malloc_r+0x20>
 8002e80:	425a      	negs	r2, r3
 8002e82:	50e2      	str	r2, [r4, r3]
 8002e84:	e7d0      	b.n	8002e28 <_malloc_r+0x20>
 8002e86:	684b      	ldr	r3, [r1, #4]
 8002e88:	428c      	cmp	r4, r1
 8002e8a:	bf16      	itet	ne
 8002e8c:	6063      	strne	r3, [r4, #4]
 8002e8e:	6013      	streq	r3, [r2, #0]
 8002e90:	460c      	movne	r4, r1
 8002e92:	e7eb      	b.n	8002e6c <_malloc_r+0x64>
 8002e94:	460c      	mov	r4, r1
 8002e96:	6849      	ldr	r1, [r1, #4]
 8002e98:	e7cc      	b.n	8002e34 <_malloc_r+0x2c>
 8002e9a:	1cc4      	adds	r4, r0, #3
 8002e9c:	f024 0403 	bic.w	r4, r4, #3
 8002ea0:	42a0      	cmp	r0, r4
 8002ea2:	d005      	beq.n	8002eb0 <_malloc_r+0xa8>
 8002ea4:	1a21      	subs	r1, r4, r0
 8002ea6:	4630      	mov	r0, r6
 8002ea8:	f000 f82e 	bl	8002f08 <_sbrk_r>
 8002eac:	3001      	adds	r0, #1
 8002eae:	d0cf      	beq.n	8002e50 <_malloc_r+0x48>
 8002eb0:	6025      	str	r5, [r4, #0]
 8002eb2:	e7db      	b.n	8002e6c <_malloc_r+0x64>
 8002eb4:	20000090 	.word	0x20000090
 8002eb8:	20000094 	.word	0x20000094

08002ebc <_realloc_r>:
 8002ebc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ebe:	4607      	mov	r7, r0
 8002ec0:	4614      	mov	r4, r2
 8002ec2:	460e      	mov	r6, r1
 8002ec4:	b921      	cbnz	r1, 8002ed0 <_realloc_r+0x14>
 8002ec6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8002eca:	4611      	mov	r1, r2
 8002ecc:	f7ff bf9c 	b.w	8002e08 <_malloc_r>
 8002ed0:	b922      	cbnz	r2, 8002edc <_realloc_r+0x20>
 8002ed2:	f7ff ff4d 	bl	8002d70 <_free_r>
 8002ed6:	4625      	mov	r5, r4
 8002ed8:	4628      	mov	r0, r5
 8002eda:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002edc:	f000 f826 	bl	8002f2c <_malloc_usable_size_r>
 8002ee0:	42a0      	cmp	r0, r4
 8002ee2:	d20f      	bcs.n	8002f04 <_realloc_r+0x48>
 8002ee4:	4621      	mov	r1, r4
 8002ee6:	4638      	mov	r0, r7
 8002ee8:	f7ff ff8e 	bl	8002e08 <_malloc_r>
 8002eec:	4605      	mov	r5, r0
 8002eee:	2800      	cmp	r0, #0
 8002ef0:	d0f2      	beq.n	8002ed8 <_realloc_r+0x1c>
 8002ef2:	4631      	mov	r1, r6
 8002ef4:	4622      	mov	r2, r4
 8002ef6:	f7ff ff17 	bl	8002d28 <memcpy>
 8002efa:	4631      	mov	r1, r6
 8002efc:	4638      	mov	r0, r7
 8002efe:	f7ff ff37 	bl	8002d70 <_free_r>
 8002f02:	e7e9      	b.n	8002ed8 <_realloc_r+0x1c>
 8002f04:	4635      	mov	r5, r6
 8002f06:	e7e7      	b.n	8002ed8 <_realloc_r+0x1c>

08002f08 <_sbrk_r>:
 8002f08:	b538      	push	{r3, r4, r5, lr}
 8002f0a:	2300      	movs	r3, #0
 8002f0c:	4c05      	ldr	r4, [pc, #20]	; (8002f24 <_sbrk_r+0x1c>)
 8002f0e:	4605      	mov	r5, r0
 8002f10:	4608      	mov	r0, r1
 8002f12:	6023      	str	r3, [r4, #0]
 8002f14:	f7ff fb48 	bl	80025a8 <_sbrk>
 8002f18:	1c43      	adds	r3, r0, #1
 8002f1a:	d102      	bne.n	8002f22 <_sbrk_r+0x1a>
 8002f1c:	6823      	ldr	r3, [r4, #0]
 8002f1e:	b103      	cbz	r3, 8002f22 <_sbrk_r+0x1a>
 8002f20:	602b      	str	r3, [r5, #0]
 8002f22:	bd38      	pop	{r3, r4, r5, pc}
 8002f24:	20000130 	.word	0x20000130

08002f28 <__malloc_lock>:
 8002f28:	4770      	bx	lr

08002f2a <__malloc_unlock>:
 8002f2a:	4770      	bx	lr

08002f2c <_malloc_usable_size_r>:
 8002f2c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002f30:	1f18      	subs	r0, r3, #4
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	bfbc      	itt	lt
 8002f36:	580b      	ldrlt	r3, [r1, r0]
 8002f38:	18c0      	addlt	r0, r0, r3
 8002f3a:	4770      	bx	lr

08002f3c <_init>:
 8002f3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f3e:	bf00      	nop
 8002f40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002f42:	bc08      	pop	{r3}
 8002f44:	469e      	mov	lr, r3
 8002f46:	4770      	bx	lr

08002f48 <_fini>:
 8002f48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f4a:	bf00      	nop
 8002f4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002f4e:	bc08      	pop	{r3}
 8002f50:	469e      	mov	lr, r3
 8002f52:	4770      	bx	lr
